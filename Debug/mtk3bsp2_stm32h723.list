
mtk3bsp2_stm32h723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012444  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  08012710  08012710  00022710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012b94  08012b94  00022b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012b9c  08012b9c  00022b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012ba0  08012ba0  00022ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000050  24000000  08012ba4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000050  08012bf4  00030050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000b0  08012c54  000300b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .mtk_exctbl   00000a60  24000200  08012cb4  00030200  2**8
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000004d4  24000c60  08013714  00030c60  2**2
                  ALLOC
 11 .noinit       000022d8  24001138  08013714  00031138  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24003410  08013714  00033410  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030c60  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030c8e  2**0
                  CONTENTS, READONLY
 15 .debug_info   00035460  00000000  00000000  00030cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008715  00000000  00000000  00066131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002630  00000000  00000000  0006e848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001cd7  00000000  00000000  00070e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003d702  00000000  00000000  00072b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00045246  00000000  00000000  000b0251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00166904  00000000  00000000  000f5497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00009b4c  00000000  00000000  0025bd9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 000000ad  00000000  00000000  002658e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000c60 	.word	0x24000c60
 80002e8:	00000000 	.word	0x00000000
 80002ec:	080126f8 	.word	0x080126f8

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000c64 	.word	0x24000c64
 8000308:	080126f8 	.word	0x080126f8

0800030c <knl_dispatch_entry>:
	.thumb_func
	.globl Csym(knl_dispatch_entry)

Csym(knl_dispatch_entry):	
/*----------------- Start dispatch processing. -----------------*/
	ldr	r0, =Csym(knl_dispatch_disabled)
 800030c:	4828      	ldr	r0, [pc, #160]	; (80003b0 <l_dispatch_200+0x16>)
	ldr	r1, =1
 800030e:	f04f 0101 	mov.w	r1, #1
	str	r1, [r0]			// Dispatch disable
 8000312:	6001      	str	r1, [r0, #0]

	ldr	r0, =Csym(knl_ctxtsk)
 8000314:	4827      	ldr	r0, [pc, #156]	; (80003b4 <l_dispatch_200+0x1a>)
	ldr	r1, [r0]			// R1 = ctxtsk
 8000316:	6801      	ldr	r1, [r0, #0]
	cmp	r1, #0
 8000318:	2900      	cmp	r1, #0
	bne	l_dispatch_000
 800031a:	d102      	bne.n	8000322 <l_dispatch_000>

	ldr	sp, =(Csym(knl_tmp_stack) + TMP_STACK_SIZE)	// Set temporal stack
 800031c:	f8df d098 	ldr.w	sp, [pc, #152]	; 80003b8 <l_dispatch_200+0x1e>
	b	l_dispatch_100
 8000320:	e011      	b.n	8000346 <l_dispatch_100>

08000322 <l_dispatch_000>:

/*----------------- Save "ctxtsk" context. -----------------*/
l_dispatch_000: 
	push	{r4-r11}
 8000322:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	push	{lr}
 8000326:	b500      	push	{lr}

#if USE_FPU			// Save FPU register
	ldr	r2, [r1, #TCB_tskatr]
 8000328:	690a      	ldr	r2, [r1, #16]
	ands	r2, r2, #TA_FPU
 800032a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
	beq	l_dispatch_010			// ctxtsk is not a TA_FPU attribute.
 800032e:	d005      	beq.n	800033c <l_dispatch_010>

	ands	r3,lr, #EXPRN_NO_FPU
 8000330:	f01e 0310 	ands.w	r3, lr, #16
	bne	l_dispatch_010			// ctxtsk does not execute FPU instructions.
 8000334:	d102      	bne.n	800033c <l_dispatch_010>

	vpush	{s16-s31}			// Push FPU register (S16-S31)
 8000336:	ed2d 8a10 	vpush	{s16-s31}
	push	{r3}				//FPU usage flag
 800033a:	b408      	push	{r3}

0800033c <l_dispatch_010>:

l_dispatch_010:			// End of FPU register save process
#endif /* USE_FPU */

	str	sp, [r1, #TCB_tskctxb + CTXB_ssp]	// Save 'ssp' to TCB
 800033c:	f8c1 d018 	str.w	sp, [r1, #24]

	ldr	r2, =0
 8000340:	f04f 0200 	mov.w	r2, #0
	str	r2, [r0]			// ctxtsk = NULL
 8000344:	6002      	str	r2, [r0, #0]

08000346 <l_dispatch_100>:


/*----------------- Dispatch from "ctxtsk" to "schedtsk" -----------------*/
l_dispatch_100:
	ldr	r4, =Csym(knl_ctxtsk)
 8000346:	4c1b      	ldr	r4, [pc, #108]	; (80003b4 <l_dispatch_200+0x1a>)
	ldr	r5, =Csym(knl_schedtsk)		// R5 = &schedtsk
 8000348:	4d1c      	ldr	r5, [pc, #112]	; (80003bc <l_dispatch_200+0x22>)
	ldr	r6, =Csym(knl_lowpow_discnt)	// R6 = &lowpow_discnt
 800034a:	4e1d      	ldr	r6, [pc, #116]	; (80003c0 <l_dispatch_200+0x26>)

0800034c <l_dispatch_110>:

l_dispatch_110:
	ldr	r2, =INTPRI_VAL(INTPRI_MAX_EXTINT_PRI)	// Disable interruput
 800034c:	f04f 0210 	mov.w	r2, #16
	msr	basepri, r2
 8000350:	f382 8811 	msr	BASEPRI, r2

	ldr	r8, [r5]			// R8 = schedtsk
 8000354:	f8d5 8000 	ldr.w	r8, [r5]
	cmp	r8, #0				// Is there 'schedtsk'?
 8000358:	f1b8 0f00 	cmp.w	r8, #0
	bne	l_dispatch_120
 800035c:	d10d      	bne.n	800037a <l_dispatch_120>

	/* Moves to power saving mode because there are no tasks that can be run. */
	ldr	ip, [r6]			// Is 'low_pow' disabled?
 800035e:	f8d6 c000 	ldr.w	ip, [r6]
	cmp	ip, #0
 8000362:	f1bc 0f00 	cmp.w	ip, #0
	it	eq
 8000366:	bf08      	it	eq
	bleq	Csym(low_pow)			// call low_pow()
 8000368:	f012 f906 	bleq	8012578 <low_pow>

	ldr	r2, =0
 800036c:	f04f 0200 	mov.w	r2, #0
	msr	basepri, r2			// Enable interruput
 8000370:	f382 8811 	msr	BASEPRI, r2
	isb
 8000374:	f3bf 8f6f 	isb	sy

	b	l_dispatch_110
 8000378:	e7e8      	b.n	800034c <l_dispatch_110>

0800037a <l_dispatch_120>:

l_dispatch_120:			// Switch to 'schedtsk'
	str	r8, [r4]			// ctxtsk = schedtsk
 800037a:	f8c4 8000 	str.w	r8, [r4]
	ldr	sp, [r8, #TCB_tskctxb + CTXB_ssp]	// Restore 'ssp' from TCB
 800037e:	f8d8 d018 	ldr.w	sp, [r8, #24]


/*----------------- Restore "schedtsk" context. -----------------*/

#if USE_FPU			// Restore FPU context
	ldr	r0, [r8, #TCB_tskatr]
 8000382:	f8d8 0010 	ldr.w	r0, [r8, #16]
	ands	r0, r0, #TA_FPU
 8000386:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
	beq	l_dispatch_200			// schedtsk is not a TA_FPU attribute.
 800038a:	d006      	beq.n	800039a <l_dispatch_200>

	ldr	r3,[sp]				// load FPU usage flag
 800038c:	9b00      	ldr	r3, [sp, #0]
	ands	r3, r3, #EXPRN_NO_FPU
 800038e:	f013 0310 	ands.w	r3, r3, #16
	bne	l_dispatch_200			// schedtsk does not execute FPU instructions.
 8000392:	d102      	bne.n	800039a <l_dispatch_200>

	pop	{r3}
 8000394:	bc08      	pop	{r3}
	vpop	{s16-s31}			// Pop FPU register (S16-S31)
 8000396:	ecbd 8a10 	vpop	{s16-s31}

0800039a <l_dispatch_200>:

l_dispatch_200:			//  End of FPU register restore process
#endif	/* USE_FPU */

	pop	{lr}
 800039a:	f85d eb04 	ldr.w	lr, [sp], #4
	pop	{r4-r11}
 800039e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	ldr	r0, =Csym(knl_dispatch_disabled)
 80003a2:	4803      	ldr	r0, [pc, #12]	; (80003b0 <l_dispatch_200+0x16>)
	ldr	r1, =0
 80003a4:	f04f 0100 	mov.w	r1, #0
	str	r1, [r0]			// Dispatch enable
 80003a8:	6001      	str	r1, [r0, #0]

	msr	basepri, r1			// Enable inperrupt
 80003aa:	f381 8811 	msr	BASEPRI, r1

	bx	lr
 80003ae:	4770      	bx	lr
	ldr	r0, =Csym(knl_dispatch_disabled)
 80003b0:	24002404 	.word	0x24002404
	ldr	r0, =Csym(knl_ctxtsk)
 80003b4:	24002408 	.word	0x24002408
	ldr	sp, =(Csym(knl_tmp_stack) + TMP_STACK_SIZE)	// Set temporal stack
 80003b8:	240010d8 	.word	0x240010d8
	ldr	r5, =Csym(knl_schedtsk)		// R5 = &schedtsk
 80003bc:	2400240c 	.word	0x2400240c
	ldr	r6, =Csym(knl_lowpow_discnt)	// R6 = &lowpow_discnt
 80003c0:	24000fd4 	.word	0x24000fd4

080003c4 <__aeabi_uldivmod>:
 80003c4:	b953      	cbnz	r3, 80003dc <__aeabi_uldivmod+0x18>
 80003c6:	b94a      	cbnz	r2, 80003dc <__aeabi_uldivmod+0x18>
 80003c8:	2900      	cmp	r1, #0
 80003ca:	bf08      	it	eq
 80003cc:	2800      	cmpeq	r0, #0
 80003ce:	bf1c      	itt	ne
 80003d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003d8:	f000 b970 	b.w	80006bc <__aeabi_idiv0>
 80003dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80003e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e4:	f000 f806 	bl	80003f4 <__udivmoddi4>
 80003e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003f0:	b004      	add	sp, #16
 80003f2:	4770      	bx	lr

080003f4 <__udivmoddi4>:
 80003f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f8:	9e08      	ldr	r6, [sp, #32]
 80003fa:	460d      	mov	r5, r1
 80003fc:	4604      	mov	r4, r0
 80003fe:	460f      	mov	r7, r1
 8000400:	2b00      	cmp	r3, #0
 8000402:	d14a      	bne.n	800049a <__udivmoddi4+0xa6>
 8000404:	428a      	cmp	r2, r1
 8000406:	4694      	mov	ip, r2
 8000408:	d965      	bls.n	80004d6 <__udivmoddi4+0xe2>
 800040a:	fab2 f382 	clz	r3, r2
 800040e:	b143      	cbz	r3, 8000422 <__udivmoddi4+0x2e>
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	f1c3 0220 	rsb	r2, r3, #32
 8000418:	409f      	lsls	r7, r3
 800041a:	fa20 f202 	lsr.w	r2, r0, r2
 800041e:	4317      	orrs	r7, r2
 8000420:	409c      	lsls	r4, r3
 8000422:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000426:	fa1f f58c 	uxth.w	r5, ip
 800042a:	fbb7 f1fe 	udiv	r1, r7, lr
 800042e:	0c22      	lsrs	r2, r4, #16
 8000430:	fb0e 7711 	mls	r7, lr, r1, r7
 8000434:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000438:	fb01 f005 	mul.w	r0, r1, r5
 800043c:	4290      	cmp	r0, r2
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x62>
 8000440:	eb1c 0202 	adds.w	r2, ip, r2
 8000444:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000448:	f080 811c 	bcs.w	8000684 <__udivmoddi4+0x290>
 800044c:	4290      	cmp	r0, r2
 800044e:	f240 8119 	bls.w	8000684 <__udivmoddi4+0x290>
 8000452:	3902      	subs	r1, #2
 8000454:	4462      	add	r2, ip
 8000456:	1a12      	subs	r2, r2, r0
 8000458:	b2a4      	uxth	r4, r4
 800045a:	fbb2 f0fe 	udiv	r0, r2, lr
 800045e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000462:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000466:	fb00 f505 	mul.w	r5, r0, r5
 800046a:	42a5      	cmp	r5, r4
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x90>
 800046e:	eb1c 0404 	adds.w	r4, ip, r4
 8000472:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000476:	f080 8107 	bcs.w	8000688 <__udivmoddi4+0x294>
 800047a:	42a5      	cmp	r5, r4
 800047c:	f240 8104 	bls.w	8000688 <__udivmoddi4+0x294>
 8000480:	4464      	add	r4, ip
 8000482:	3802      	subs	r0, #2
 8000484:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000488:	1b64      	subs	r4, r4, r5
 800048a:	2100      	movs	r1, #0
 800048c:	b11e      	cbz	r6, 8000496 <__udivmoddi4+0xa2>
 800048e:	40dc      	lsrs	r4, r3
 8000490:	2300      	movs	r3, #0
 8000492:	e9c6 4300 	strd	r4, r3, [r6]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0xbc>
 800049e:	2e00      	cmp	r6, #0
 80004a0:	f000 80ed 	beq.w	800067e <__udivmoddi4+0x28a>
 80004a4:	2100      	movs	r1, #0
 80004a6:	e9c6 0500 	strd	r0, r5, [r6]
 80004aa:	4608      	mov	r0, r1
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	fab3 f183 	clz	r1, r3
 80004b4:	2900      	cmp	r1, #0
 80004b6:	d149      	bne.n	800054c <__udivmoddi4+0x158>
 80004b8:	42ab      	cmp	r3, r5
 80004ba:	d302      	bcc.n	80004c2 <__udivmoddi4+0xce>
 80004bc:	4282      	cmp	r2, r0
 80004be:	f200 80f8 	bhi.w	80006b2 <__udivmoddi4+0x2be>
 80004c2:	1a84      	subs	r4, r0, r2
 80004c4:	eb65 0203 	sbc.w	r2, r5, r3
 80004c8:	2001      	movs	r0, #1
 80004ca:	4617      	mov	r7, r2
 80004cc:	2e00      	cmp	r6, #0
 80004ce:	d0e2      	beq.n	8000496 <__udivmoddi4+0xa2>
 80004d0:	e9c6 4700 	strd	r4, r7, [r6]
 80004d4:	e7df      	b.n	8000496 <__udivmoddi4+0xa2>
 80004d6:	b902      	cbnz	r2, 80004da <__udivmoddi4+0xe6>
 80004d8:	deff      	udf	#255	; 0xff
 80004da:	fab2 f382 	clz	r3, r2
 80004de:	2b00      	cmp	r3, #0
 80004e0:	f040 8090 	bne.w	8000604 <__udivmoddi4+0x210>
 80004e4:	1a8a      	subs	r2, r1, r2
 80004e6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ea:	fa1f fe8c 	uxth.w	lr, ip
 80004ee:	2101      	movs	r1, #1
 80004f0:	fbb2 f5f7 	udiv	r5, r2, r7
 80004f4:	fb07 2015 	mls	r0, r7, r5, r2
 80004f8:	0c22      	lsrs	r2, r4, #16
 80004fa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004fe:	fb0e f005 	mul.w	r0, lr, r5
 8000502:	4290      	cmp	r0, r2
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x124>
 8000506:	eb1c 0202 	adds.w	r2, ip, r2
 800050a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800050e:	d202      	bcs.n	8000516 <__udivmoddi4+0x122>
 8000510:	4290      	cmp	r0, r2
 8000512:	f200 80cb 	bhi.w	80006ac <__udivmoddi4+0x2b8>
 8000516:	4645      	mov	r5, r8
 8000518:	1a12      	subs	r2, r2, r0
 800051a:	b2a4      	uxth	r4, r4
 800051c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000520:	fb07 2210 	mls	r2, r7, r0, r2
 8000524:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000528:	fb0e fe00 	mul.w	lr, lr, r0
 800052c:	45a6      	cmp	lr, r4
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x14e>
 8000530:	eb1c 0404 	adds.w	r4, ip, r4
 8000534:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000538:	d202      	bcs.n	8000540 <__udivmoddi4+0x14c>
 800053a:	45a6      	cmp	lr, r4
 800053c:	f200 80bb 	bhi.w	80006b6 <__udivmoddi4+0x2c2>
 8000540:	4610      	mov	r0, r2
 8000542:	eba4 040e 	sub.w	r4, r4, lr
 8000546:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800054a:	e79f      	b.n	800048c <__udivmoddi4+0x98>
 800054c:	f1c1 0720 	rsb	r7, r1, #32
 8000550:	408b      	lsls	r3, r1
 8000552:	fa22 fc07 	lsr.w	ip, r2, r7
 8000556:	ea4c 0c03 	orr.w	ip, ip, r3
 800055a:	fa05 f401 	lsl.w	r4, r5, r1
 800055e:	fa20 f307 	lsr.w	r3, r0, r7
 8000562:	40fd      	lsrs	r5, r7
 8000564:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000568:	4323      	orrs	r3, r4
 800056a:	fbb5 f8f9 	udiv	r8, r5, r9
 800056e:	fa1f fe8c 	uxth.w	lr, ip
 8000572:	fb09 5518 	mls	r5, r9, r8, r5
 8000576:	0c1c      	lsrs	r4, r3, #16
 8000578:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800057c:	fb08 f50e 	mul.w	r5, r8, lr
 8000580:	42a5      	cmp	r5, r4
 8000582:	fa02 f201 	lsl.w	r2, r2, r1
 8000586:	fa00 f001 	lsl.w	r0, r0, r1
 800058a:	d90b      	bls.n	80005a4 <__udivmoddi4+0x1b0>
 800058c:	eb1c 0404 	adds.w	r4, ip, r4
 8000590:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000594:	f080 8088 	bcs.w	80006a8 <__udivmoddi4+0x2b4>
 8000598:	42a5      	cmp	r5, r4
 800059a:	f240 8085 	bls.w	80006a8 <__udivmoddi4+0x2b4>
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	4464      	add	r4, ip
 80005a4:	1b64      	subs	r4, r4, r5
 80005a6:	b29d      	uxth	r5, r3
 80005a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80005ac:	fb09 4413 	mls	r4, r9, r3, r4
 80005b0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005b4:	fb03 fe0e 	mul.w	lr, r3, lr
 80005b8:	45a6      	cmp	lr, r4
 80005ba:	d908      	bls.n	80005ce <__udivmoddi4+0x1da>
 80005bc:	eb1c 0404 	adds.w	r4, ip, r4
 80005c0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005c4:	d26c      	bcs.n	80006a0 <__udivmoddi4+0x2ac>
 80005c6:	45a6      	cmp	lr, r4
 80005c8:	d96a      	bls.n	80006a0 <__udivmoddi4+0x2ac>
 80005ca:	3b02      	subs	r3, #2
 80005cc:	4464      	add	r4, ip
 80005ce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005d2:	fba3 9502 	umull	r9, r5, r3, r2
 80005d6:	eba4 040e 	sub.w	r4, r4, lr
 80005da:	42ac      	cmp	r4, r5
 80005dc:	46c8      	mov	r8, r9
 80005de:	46ae      	mov	lr, r5
 80005e0:	d356      	bcc.n	8000690 <__udivmoddi4+0x29c>
 80005e2:	d053      	beq.n	800068c <__udivmoddi4+0x298>
 80005e4:	b156      	cbz	r6, 80005fc <__udivmoddi4+0x208>
 80005e6:	ebb0 0208 	subs.w	r2, r0, r8
 80005ea:	eb64 040e 	sbc.w	r4, r4, lr
 80005ee:	fa04 f707 	lsl.w	r7, r4, r7
 80005f2:	40ca      	lsrs	r2, r1
 80005f4:	40cc      	lsrs	r4, r1
 80005f6:	4317      	orrs	r7, r2
 80005f8:	e9c6 7400 	strd	r7, r4, [r6]
 80005fc:	4618      	mov	r0, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000604:	f1c3 0120 	rsb	r1, r3, #32
 8000608:	fa02 fc03 	lsl.w	ip, r2, r3
 800060c:	fa20 f201 	lsr.w	r2, r0, r1
 8000610:	fa25 f101 	lsr.w	r1, r5, r1
 8000614:	409d      	lsls	r5, r3
 8000616:	432a      	orrs	r2, r5
 8000618:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800061c:	fa1f fe8c 	uxth.w	lr, ip
 8000620:	fbb1 f0f7 	udiv	r0, r1, r7
 8000624:	fb07 1510 	mls	r5, r7, r0, r1
 8000628:	0c11      	lsrs	r1, r2, #16
 800062a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800062e:	fb00 f50e 	mul.w	r5, r0, lr
 8000632:	428d      	cmp	r5, r1
 8000634:	fa04 f403 	lsl.w	r4, r4, r3
 8000638:	d908      	bls.n	800064c <__udivmoddi4+0x258>
 800063a:	eb1c 0101 	adds.w	r1, ip, r1
 800063e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000642:	d22f      	bcs.n	80006a4 <__udivmoddi4+0x2b0>
 8000644:	428d      	cmp	r5, r1
 8000646:	d92d      	bls.n	80006a4 <__udivmoddi4+0x2b0>
 8000648:	3802      	subs	r0, #2
 800064a:	4461      	add	r1, ip
 800064c:	1b49      	subs	r1, r1, r5
 800064e:	b292      	uxth	r2, r2
 8000650:	fbb1 f5f7 	udiv	r5, r1, r7
 8000654:	fb07 1115 	mls	r1, r7, r5, r1
 8000658:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800065c:	fb05 f10e 	mul.w	r1, r5, lr
 8000660:	4291      	cmp	r1, r2
 8000662:	d908      	bls.n	8000676 <__udivmoddi4+0x282>
 8000664:	eb1c 0202 	adds.w	r2, ip, r2
 8000668:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800066c:	d216      	bcs.n	800069c <__udivmoddi4+0x2a8>
 800066e:	4291      	cmp	r1, r2
 8000670:	d914      	bls.n	800069c <__udivmoddi4+0x2a8>
 8000672:	3d02      	subs	r5, #2
 8000674:	4462      	add	r2, ip
 8000676:	1a52      	subs	r2, r2, r1
 8000678:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800067c:	e738      	b.n	80004f0 <__udivmoddi4+0xfc>
 800067e:	4631      	mov	r1, r6
 8000680:	4630      	mov	r0, r6
 8000682:	e708      	b.n	8000496 <__udivmoddi4+0xa2>
 8000684:	4639      	mov	r1, r7
 8000686:	e6e6      	b.n	8000456 <__udivmoddi4+0x62>
 8000688:	4610      	mov	r0, r2
 800068a:	e6fb      	b.n	8000484 <__udivmoddi4+0x90>
 800068c:	4548      	cmp	r0, r9
 800068e:	d2a9      	bcs.n	80005e4 <__udivmoddi4+0x1f0>
 8000690:	ebb9 0802 	subs.w	r8, r9, r2
 8000694:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000698:	3b01      	subs	r3, #1
 800069a:	e7a3      	b.n	80005e4 <__udivmoddi4+0x1f0>
 800069c:	4645      	mov	r5, r8
 800069e:	e7ea      	b.n	8000676 <__udivmoddi4+0x282>
 80006a0:	462b      	mov	r3, r5
 80006a2:	e794      	b.n	80005ce <__udivmoddi4+0x1da>
 80006a4:	4640      	mov	r0, r8
 80006a6:	e7d1      	b.n	800064c <__udivmoddi4+0x258>
 80006a8:	46d0      	mov	r8, sl
 80006aa:	e77b      	b.n	80005a4 <__udivmoddi4+0x1b0>
 80006ac:	3d02      	subs	r5, #2
 80006ae:	4462      	add	r2, ip
 80006b0:	e732      	b.n	8000518 <__udivmoddi4+0x124>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e70a      	b.n	80004cc <__udivmoddi4+0xd8>
 80006b6:	4464      	add	r4, ip
 80006b8:	3802      	subs	r0, #2
 80006ba:	e742      	b.n	8000542 <__udivmoddi4+0x14e>

080006bc <__aeabi_idiv0>:
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop

080006c0 <open_device>:
//		tk_dly_tsk(3000);
//	}
//}

LOCAL ER open_device(enum DEVICE_CODE target)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
	ER err = E_OK;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]

	switch(target){
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d002      	beq.n	80006da <open_device+0x1a>
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d012      	beq.n	80006fe <open_device+0x3e>
 80006d8:	e023      	b.n	8000722 <open_device+0x62>
		case DEV_UART:
			dd_com = tk_opn_dev((UB*)"huartd", TD_UPDATE);
 80006da:	2103      	movs	r1, #3
 80006dc:	4818      	ldr	r0, [pc, #96]	; (8000740 <open_device+0x80>)
 80006de:	f00c ffed 	bl	800d6bc <tk_opn_dev>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a17      	ldr	r2, [pc, #92]	; (8000744 <open_device+0x84>)
 80006e6:	6013      	str	r3, [r2, #0]
			if(dd_com < E_OK){
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <open_device+0x84>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	da1f      	bge.n	8000730 <open_device+0x70>
				tm_printf((UB*)"uart_init: open error\n");
 80006f0:	4815      	ldr	r0, [pc, #84]	; (8000748 <open_device+0x88>)
 80006f2:	f010 fe91 	bl	8011418 <tm_printf>
				err = -1;
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006fa:	60fb      	str	r3, [r7, #12]
			}
			break;
 80006fc:	e018      	b.n	8000730 <open_device+0x70>
		case DEV_I2C:
			dd_com = tk_opn_dev((UB*)"hiica", TD_UPDATE);
 80006fe:	2103      	movs	r1, #3
 8000700:	4812      	ldr	r0, [pc, #72]	; (800074c <open_device+0x8c>)
 8000702:	f00c ffdb 	bl	800d6bc <tk_opn_dev>
 8000706:	4603      	mov	r3, r0
 8000708:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <open_device+0x84>)
 800070a:	6013      	str	r3, [r2, #0]
			if(dd_com < E_OK){
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <open_device+0x84>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	da0f      	bge.n	8000734 <open_device+0x74>
				tm_printf((UB*)"uart_init: open error\n");
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <open_device+0x88>)
 8000716:	f010 fe7f 	bl	8011418 <tm_printf>
				err = -1;
 800071a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800071e:	60fb      	str	r3, [r7, #12]
			}
			break;
 8000720:	e008      	b.n	8000734 <open_device+0x74>
		default:
			tm_printf((UB*)"undefined error\n");
 8000722:	480b      	ldr	r0, [pc, #44]	; (8000750 <open_device+0x90>)
 8000724:	f010 fe78 	bl	8011418 <tm_printf>
			err = -2;
 8000728:	f06f 0301 	mvn.w	r3, #1
 800072c:	60fb      	str	r3, [r7, #12]
			break;
 800072e:	e002      	b.n	8000736 <open_device+0x76>
			break;
 8000730:	bf00      	nop
 8000732:	e000      	b.n	8000736 <open_device+0x76>
			break;
 8000734:	bf00      	nop
	}

	return err;
 8000736:	68fb      	ldr	r3, [r7, #12]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	08012710 	.word	0x08012710
 8000744:	24000000 	.word	0x24000000
 8000748:	08012718 	.word	0x08012718
 800074c:	08012730 	.word	0x08012730
 8000750:	08012738 	.word	0x08012738

08000754 <get_str_siz>:

LOCAL SZ get_str_siz(const char str[], const char d){
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
	SZ i = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
	while(str[i] != d){
 8000764:	e008      	b.n	8000778 <get_str_siz+0x24>
		if(str[i] == '\0'){
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d00a      	beq.n	8000788 <get_str_siz+0x34>
			break;
		}
		i++;
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	3301      	adds	r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
	while(str[i] != d){
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	78fa      	ldrb	r2, [r7, #3]
 8000782:	429a      	cmp	r2, r3
 8000784:	d1ef      	bne.n	8000766 <get_str_siz+0x12>
 8000786:	e000      	b.n	800078a <get_str_siz+0x36>
			break;
 8000788:	bf00      	nop
	}
	return i;
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3714      	adds	r7, #20
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <read_tsk>:

LOCAL void read_tsk(INT stacd, void *exinf)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0c8      	sub	sp, #288	; 0x120
 800079c:	af02      	add	r7, sp, #8
 800079e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80007a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80007a6:	6018      	str	r0, [r3, #0]
 80007a8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80007ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80007b0:	6019      	str	r1, [r3, #0]
	char data_com[BUFSIZE] = {'\0'};
 80007b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80007b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	3304      	adds	r3, #4
 80007c0:	22fc      	movs	r2, #252	; 0xfc
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f011 ff6b 	bl	80126a0 <memset>
	ER err;
	UB err_cnt = 0, i;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	tm_printf((UB*)"tsk read start\n");
 80007d0:	4834      	ldr	r0, [pc, #208]	; (80008a4 <read_tsk+0x10c>)
 80007d2:	f010 fe21 	bl	8011418 <tm_printf>

	if(dd_com == -1){
 80007d6:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <read_tsk+0x110>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007de:	d10d      	bne.n	80007fc <read_tsk+0x64>
		err = open_device(DEV_UART);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f7ff ff6d 	bl	80006c0 <open_device>
 80007e6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
		if(err != E_OK){
 80007ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d004      	beq.n	80007fc <read_tsk+0x64>
			tm_printf((UB*)"open error\n");
 80007f2:	482e      	ldr	r0, [pc, #184]	; (80008ac <read_tsk+0x114>)
 80007f4:	f010 fe10 	bl	8011418 <tm_printf>
			tk_ext_tsk();
 80007f8:	f00f fa10 	bl	800fc1c <tk_ext_tsk>
		}
	}

    while(1){
    	err = tk_rea_dev(dd_com, 0, data_com, BUFSIZE, TMO_FEVR);
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <read_tsk+0x110>)
 80007fe:	6818      	ldr	r0, [r3, #0]
 8000800:	f107 020c 	add.w	r2, r7, #12
 8000804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080e:	2100      	movs	r1, #0
 8000810:	f00d faa4 	bl	800dd5c <tk_rea_dev>
 8000814:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
    	i = get_str_siz(data_com, '\r');
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	210d      	movs	r1, #13
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ff98 	bl	8000754 <get_str_siz>
 8000824:	4603      	mov	r3, r0
 8000826:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
    	data_com[i] = (UB)'\0';
 800082a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800082e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000832:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000836:	2100      	movs	r1, #0
 8000838:	54d1      	strb	r1, [r2, r3]
    	tm_printf((UB*)"get data: %s\n", data_com);
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	4619      	mov	r1, r3
 8000840:	481b      	ldr	r0, [pc, #108]	; (80008b0 <read_tsk+0x118>)
 8000842:	f010 fde9 	bl	8011418 <tm_printf>

    	if(err >= E_OK){
 8000846:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800084a:	2b00      	cmp	r3, #0
 800084c:	db08      	blt.n	8000860 <read_tsk+0xc8>
    		tm_printf((UB*)"Read Success %d\n", err);
 800084e:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000852:	4818      	ldr	r0, [pc, #96]	; (80008b4 <read_tsk+0x11c>)
 8000854:	f010 fde0 	bl	8011418 <tm_printf>
    		err_cnt = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800085e:	e00d      	b.n	800087c <read_tsk+0xe4>
    	} else {
    		tm_printf((UB*)"Read Error %d\n", err);
 8000860:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000864:	4814      	ldr	r0, [pc, #80]	; (80008b8 <read_tsk+0x120>)
 8000866:	f010 fdd7 	bl	8011418 <tm_printf>
    		err_cnt++;
 800086a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800086e:	3301      	adds	r3, #1
 8000870:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

    		// timeout
        	if(err_cnt > 5){
 8000874:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000878:	2b05      	cmp	r3, #5
 800087a:	d80a      	bhi.n	8000892 <read_tsk+0xfa>
        		break;
        	}
    	}
    	data_com[0] = (UB)'\0';
 800087c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000880:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]

    	tk_dly_tsk(700);
 8000888:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800088c:	f00f faa6 	bl	800fddc <tk_dly_tsk>
    	err = tk_rea_dev(dd_com, 0, data_com, BUFSIZE, TMO_FEVR);
 8000890:	e7b4      	b.n	80007fc <read_tsk+0x64>
        		break;
 8000892:	bf00      	nop
    }
	tk_ext_tsk();
 8000894:	f00f f9c2 	bl	800fc1c <tk_ext_tsk>
}
 8000898:	bf00      	nop
 800089a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	0801274c 	.word	0x0801274c
 80008a8:	24000000 	.word	0x24000000
 80008ac:	0801275c 	.word	0x0801275c
 80008b0:	08012768 	.word	0x08012768
 80008b4:	08012778 	.word	0x08012778
 80008b8:	0801278c 	.word	0x0801278c

080008bc <usermain>:
	tk_ext_tsk();
}

/* usermain関数 */
EXPORT INT    usermain( void )
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
    tm_printf((UB*)"Start User-main program.\n");
 80008c0:	480a      	ldr	r0, [pc, #40]	; (80008ec <usermain+0x30>)
 80008c2:	f010 fda9 	bl	8011418 <tm_printf>

    /* Create & Start Tasks */
//    tskid_1 = tk_cre_tsk(&ctsk_1);
//    tk_sta_tsk(tskid_1, 0);

    tskid_read = tk_cre_tsk(&ctsk_read);
 80008c6:	480a      	ldr	r0, [pc, #40]	; (80008f0 <usermain+0x34>)
 80008c8:	f00f f85a 	bl	800f980 <tk_cre_tsk>
 80008cc:	4603      	mov	r3, r0
 80008ce:	4a09      	ldr	r2, [pc, #36]	; (80008f4 <usermain+0x38>)
 80008d0:	6013      	str	r3, [r2, #0]
    tk_sta_tsk(tskid_read, 0);
 80008d2:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <usermain+0x38>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f00f f8ff 	bl	800fadc <tk_sta_tsk>

//    tskid_send = tk_cre_tsk(&ctsk_send);
//    tk_sta_tsk(tskid_send, 0);

    tk_slp_tsk(TMO_FEVR);
 80008de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008e2:	f00f fa0f 	bl	800fd04 <tk_slp_tsk>

    return 0;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	080127d8 	.word	0x080127d8
 80008f0:	24000004 	.word	0x24000004
 80008f4:	24000c7c 	.word	0x24000c7c

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f000 ffb8 	bl	8001870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f816 	bl	8000930 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000904:	f000 f884 	bl	8000a10 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000908:	f000 fac4 	bl	8000e94 <MX_GPIO_Init>
  MX_ETH_Init();
 800090c:	f000 f996 	bl	8000c3c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000910:	f000 fa6c 	bl	8000dec <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000914:	f000 fab6 	bl	8000e84 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 8000918:	f000 f8aa 	bl	8000a70 <MX_ADC1_Init>
  MX_ADC3_Init();
 800091c:	f000 f920 	bl	8000b60 <MX_ADC3_Init>
  MX_I2C1_Init();
 8000920:	f000 f9d8 	bl	8000cd4 <MX_I2C1_Init>
  MX_UART4_Init();
 8000924:	f000 fa16 	bl	8000d54 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  knl_start_mtkernel();
 8000928:	f010 fe1e 	bl	8011568 <knl_start_mtkernel>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800092c:	e7fe      	b.n	800092c <main+0x34>
	...

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b09c      	sub	sp, #112	; 0x70
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093a:	224c      	movs	r2, #76	; 0x4c
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f011 feae 	bl	80126a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2220      	movs	r2, #32
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f011 fea8 	bl	80126a0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000950:	2002      	movs	r0, #2
 8000952:	f006 fa4f 	bl	8006df4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b2c      	ldr	r3, [pc, #176]	; (8000a0c <SystemClock_Config+0xdc>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a2b      	ldr	r2, [pc, #172]	; (8000a0c <SystemClock_Config+0xdc>)
 8000960:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000964:	6193      	str	r3, [r2, #24]
 8000966:	4b29      	ldr	r3, [pc, #164]	; (8000a0c <SystemClock_Config+0xdc>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000972:	bf00      	nop
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <SystemClock_Config+0xdc>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800097c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000980:	d1f8      	bne.n	8000974 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000982:	2321      	movs	r3, #33	; 0x21
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000986:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800098c:	2301      	movs	r3, #1
 800098e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000990:	2302      	movs	r3, #2
 8000992:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000994:	2302      	movs	r3, #2
 8000996:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800099c:	f240 1313 	movw	r3, #275	; 0x113
 80009a0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009a6:	2304      	movs	r3, #4
 80009a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80009ae:	2304      	movs	r3, #4
 80009b0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009b2:	2300      	movs	r3, #0
 80009b4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	4618      	mov	r0, r3
 80009c0:	f006 fa52 	bl	8006e68 <HAL_RCC_OscConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009ca:	f000 fb6d 	bl	80010a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ce:	233f      	movs	r3, #63	; 0x3f
 80009d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d2:	2303      	movs	r3, #3
 80009d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009da:	2308      	movs	r3, #8
 80009dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009de:	2340      	movs	r3, #64	; 0x40
 80009e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009e2:	2340      	movs	r3, #64	; 0x40
 80009e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009ec:	2340      	movs	r3, #64	; 0x40
 80009ee:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	2103      	movs	r1, #3
 80009f4:	4618      	mov	r0, r3
 80009f6:	f006 fe11 	bl	800761c <HAL_RCC_ClockConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000a00:	f000 fb52 	bl	80010a8 <Error_Handler>
  }
}
 8000a04:	bf00      	nop
 8000a06:	3770      	adds	r7, #112	; 0x70
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	58024800 	.word	0x58024800

08000a10 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b0ae      	sub	sp, #184	; 0xb8
 8000a14:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a16:	463b      	mov	r3, r7
 8000a18:	22b8      	movs	r2, #184	; 0xb8
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f011 fe3f 	bl	80126a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000a26:	f04f 0300 	mov.w	r3, #0
 8000a2a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8000a32:	2318      	movs	r3, #24
 8000a34:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a42:	23c0      	movs	r3, #192	; 0xc0
 8000a44:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	4618      	mov	r0, r3
 8000a58:	f007 f96c 	bl	8007d34 <HAL_RCCEx_PeriphCLKConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a62:	f000 fb21 	bl	80010a8 <Error_Handler>
  }
}
 8000a66:	bf00      	nop
 8000a68:	37b8      	adds	r7, #184	; 0xb8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	; 0x30
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a82:	463b      	mov	r3, r7
 8000a84:	2224      	movs	r2, #36	; 0x24
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f011 fe09 	bl	80126a0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a8e:	4b31      	ldr	r3, [pc, #196]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000a90:	4a31      	ldr	r2, [pc, #196]	; (8000b58 <MX_ADC1_Init+0xe8>)
 8000a92:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a94:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a9a:	4b2e      	ldr	r3, [pc, #184]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aa6:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000aa8:	2204      	movs	r2, #4
 8000aaa:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000aac:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ab2:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ab8:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000abe:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac6:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000acc:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ad8:	4b1e      	ldr	r3, [pc, #120]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aec:	4819      	ldr	r0, [pc, #100]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000aee:	f001 fa15 	bl	8001f1c <HAL_ADC_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000af8:	f000 fad6 	bl	80010a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b04:	4619      	mov	r1, r3
 8000b06:	4813      	ldr	r0, [pc, #76]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000b08:	f002 feaa 	bl	8003860 <HAL_ADCEx_MultiModeConfigChannel>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000b12:	f000 fac9 	bl	80010a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_ADC1_Init+0xec>)
 8000b18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b1a:	2306      	movs	r3, #6
 8000b1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b22:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b26:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b36:	463b      	mov	r3, r7
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <MX_ADC1_Init+0xe4>)
 8000b3c:	f001 ff90 	bl	8002a60 <HAL_ADC_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000b46:	f000 faaf 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b4a:	bf00      	nop
 8000b4c:	3730      	adds	r7, #48	; 0x30
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	24000cb8 	.word	0x24000cb8
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	14f00020 	.word	0x14f00020

08000b60 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2224      	movs	r2, #36	; 0x24
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f011 fd97 	bl	80126a0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b72:	4b2f      	ldr	r3, [pc, #188]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000b74:	4a2f      	ldr	r2, [pc, #188]	; (8000c34 <MX_ADC3_Init+0xd4>)
 8000b76:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b78:	4b2d      	ldr	r3, [pc, #180]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b7e:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000b80:	2208      	movs	r2, #8
 8000b82:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000b84:	4b2a      	ldr	r3, [pc, #168]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b8a:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b90:	4b27      	ldr	r3, [pc, #156]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000b92:	2204      	movs	r2, #4
 8000b94:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b96:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b9c:	4b24      	ldr	r3, [pc, #144]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000ba2:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ba8:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bd6:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000be4:	4812      	ldr	r0, [pc, #72]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000be6:	f001 f999 	bl	8001f1c <HAL_ADC_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000bf0:	f000 fa5a 	bl	80010a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_ADC3_Init+0xd8>)
 8000bf6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf8:	2306      	movs	r3, #6
 8000bfa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c00:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c04:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c06:	2304      	movs	r3, #4
 8000c08:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <MX_ADC3_Init+0xd0>)
 8000c18:	f001 ff22 	bl	8002a60 <HAL_ADC_ConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC3_Init+0xc6>
  {
    Error_Handler();
 8000c22:	f000 fa41 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	; 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	24000d28 	.word	0x24000d28
 8000c34:	58026000 	.word	0x58026000
 8000c38:	19200040 	.word	0x19200040

08000c3c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c40:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <MX_ETH_Init+0x80>)
 8000c42:	4a1f      	ldr	r2, [pc, #124]	; (8000cc0 <MX_ETH_Init+0x84>)
 8000c44:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c46:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <MX_ETH_Init+0x88>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_ETH_Init+0x88>)
 8000c4e:	2280      	movs	r2, #128	; 0x80
 8000c50:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_ETH_Init+0x88>)
 8000c54:	22e1      	movs	r2, #225	; 0xe1
 8000c56:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_ETH_Init+0x88>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c5e:	4b19      	ldr	r3, [pc, #100]	; (8000cc4 <MX_ETH_Init+0x88>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_ETH_Init+0x88>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c6a:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_ETH_Init+0x80>)
 8000c6c:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <MX_ETH_Init+0x88>)
 8000c6e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <MX_ETH_Init+0x80>)
 8000c72:	2201      	movs	r2, #1
 8000c74:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_ETH_Init+0x80>)
 8000c78:	4a13      	ldr	r2, [pc, #76]	; (8000cc8 <MX_ETH_Init+0x8c>)
 8000c7a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_ETH_Init+0x80>)
 8000c7e:	4a13      	ldr	r2, [pc, #76]	; (8000ccc <MX_ETH_Init+0x90>)
 8000c80:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_ETH_Init+0x80>)
 8000c84:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c88:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <MX_ETH_Init+0x80>)
 8000c8c:	f003 fa2e 	bl	80040ec <HAL_ETH_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000c96:	f000 fa07 	bl	80010a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c9a:	2238      	movs	r2, #56	; 0x38
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <MX_ETH_Init+0x94>)
 8000ca0:	f011 fcfe 	bl	80126a0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <MX_ETH_Init+0x94>)
 8000ca6:	2221      	movs	r2, #33	; 0x21
 8000ca8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_ETH_Init+0x94>)
 8000cac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cb0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <MX_ETH_Init+0x94>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	24000d98 	.word	0x24000d98
 8000cc0:	40028000 	.word	0x40028000
 8000cc4:	24000fc4 	.word	0x24000fc4
 8000cc8:	240000b0 	.word	0x240000b0
 8000ccc:	24000050 	.word	0x24000050
 8000cd0:	24000c80 	.word	0x24000c80

08000cd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000cda:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <MX_I2C1_Init+0x78>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60404E72;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000ce0:	4a1b      	ldr	r2, [pc, #108]	; (8000d50 <MX_I2C1_Init+0x7c>)
 8000ce2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cf6:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d0e:	480e      	ldr	r0, [pc, #56]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d10:	f003 ffe2 	bl	8004cd8 <HAL_I2C_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d1a:	f000 f9c5 	bl	80010a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4809      	ldr	r0, [pc, #36]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d22:	f005 ffcf 	bl	8006cc4 <HAL_I2CEx_ConfigAnalogFilter>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d2c:	f000 f9bc 	bl	80010a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d30:	2100      	movs	r1, #0
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_I2C1_Init+0x74>)
 8000d34:	f006 f811 	bl	8006d5a <HAL_I2CEx_ConfigDigitalFilter>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d3e:	f000 f9b3 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	24000e48 	.word	0x24000e48
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	60404e72 	.word	0x60404e72

08000d54 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d58:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <MX_UART4_Init+0x90>)
 8000d5a:	4a23      	ldr	r2, [pc, #140]	; (8000de8 <MX_UART4_Init+0x94>)
 8000d5c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <MX_UART4_Init+0x90>)
 8000d60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d64:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_UART4_Init+0x90>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_UART4_Init+0x90>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_UART4_Init+0x90>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_UART4_Init+0x90>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <MX_UART4_Init+0x90>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_UART4_Init+0x90>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_UART4_Init+0x90>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_UART4_Init+0x90>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <MX_UART4_Init+0x90>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d9c:	4811      	ldr	r0, [pc, #68]	; (8000de4 <MX_UART4_Init+0x90>)
 8000d9e:	f009 fbaf 	bl	800a500 <HAL_UART_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000da8:	f000 f97e 	bl	80010a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dac:	2100      	movs	r1, #0
 8000dae:	480d      	ldr	r0, [pc, #52]	; (8000de4 <MX_UART4_Init+0x90>)
 8000db0:	f00b fd87 	bl	800c8c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000dba:	f000 f975 	bl	80010a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4808      	ldr	r0, [pc, #32]	; (8000de4 <MX_UART4_Init+0x90>)
 8000dc2:	f00b fdbc 	bl	800c93e <HAL_UARTEx_SetRxFifoThreshold>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000dcc:	f000 f96c 	bl	80010a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_UART4_Init+0x90>)
 8000dd2:	f00b fd3d 	bl	800c850 <HAL_UARTEx_DisableFifoMode>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000ddc:	f000 f964 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	24000e9c 	.word	0x24000e9c
 8000de8:	40004c00 	.word	0x40004c00

08000dec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000df2:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <MX_USART3_UART_Init+0x94>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e34:	4811      	ldr	r0, [pc, #68]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e36:	f009 fb63 	bl	800a500 <HAL_UART_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e40:	f000 f932 	bl	80010a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	480d      	ldr	r0, [pc, #52]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e48:	f00b fd3b 	bl	800c8c2 <HAL_UARTEx_SetTxFifoThreshold>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e52:	f000 f929 	bl	80010a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e56:	2100      	movs	r1, #0
 8000e58:	4808      	ldr	r0, [pc, #32]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e5a:	f00b fd70 	bl	800c93e <HAL_UARTEx_SetRxFifoThreshold>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e64:	f000 f920 	bl	80010a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_USART3_UART_Init+0x90>)
 8000e6a:	f00b fcf1 	bl	800c850 <HAL_UARTEx_DisableFifoMode>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e74:	f000 f918 	bl	80010a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	24000f30 	.word	0x24000f30
 8000e80:	40004800 	.word	0x40004800

08000e84 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08e      	sub	sp, #56	; 0x38
 8000e98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
 8000ea8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	4b78      	ldr	r3, [pc, #480]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	4a76      	ldr	r2, [pc, #472]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eba:	4b74      	ldr	r3, [pc, #464]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	623b      	str	r3, [r7, #32]
 8000ec6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ec8:	4b70      	ldr	r3, [pc, #448]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	4a6f      	ldr	r2, [pc, #444]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000ed0:	f043 0320 	orr.w	r3, r3, #32
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed8:	4b6c      	ldr	r3, [pc, #432]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	f003 0320 	and.w	r3, r3, #32
 8000ee2:	61fb      	str	r3, [r7, #28]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee6:	4b69      	ldr	r3, [pc, #420]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	4a67      	ldr	r2, [pc, #412]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000eee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef6:	4b65      	ldr	r3, [pc, #404]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f00:	61bb      	str	r3, [r7, #24]
 8000f02:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b61      	ldr	r3, [pc, #388]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0a:	4a60      	ldr	r2, [pc, #384]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f14:	4b5d      	ldr	r3, [pc, #372]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	4b5a      	ldr	r3, [pc, #360]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a58      	ldr	r2, [pc, #352]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b56      	ldr	r3, [pc, #344]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f40:	4b52      	ldr	r3, [pc, #328]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f46:	4a51      	ldr	r2, [pc, #324]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f50:	4b4e      	ldr	r3, [pc, #312]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000f52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f5e:	4b4b      	ldr	r3, [pc, #300]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	4a49      	ldr	r2, [pc, #292]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000f66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f6e:	4b47      	ldr	r3, [pc, #284]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7c:	4b43      	ldr	r3, [pc, #268]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	4a42      	ldr	r2, [pc, #264]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8c:	4b3f      	ldr	r3, [pc, #252]	; (800108c <MX_GPIO_Init+0x1f8>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	f003 0310 	and.w	r3, r3, #16
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f244 0101 	movw	r1, #16385	; 0x4001
 8000fa0:	483b      	ldr	r0, [pc, #236]	; (8001090 <MX_GPIO_Init+0x1fc>)
 8000fa2:	f003 fe7f 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fac:	4839      	ldr	r0, [pc, #228]	; (8001094 <MX_GPIO_Init+0x200>)
 8000fae:	f003 fe79 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4838      	ldr	r0, [pc, #224]	; (8001098 <MX_GPIO_Init+0x204>)
 8000fb8:	f003 fe74 	bl	8004ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4832      	ldr	r0, [pc, #200]	; (800109c <MX_GPIO_Init+0x208>)
 8000fd2:	f003 fcbf 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000fd6:	f244 0301 	movw	r3, #16385	; 0x4001
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fec:	4619      	mov	r1, r3
 8000fee:	4828      	ldr	r0, [pc, #160]	; (8001090 <MX_GPIO_Init+0x1fc>)
 8000ff0:	f003 fcb0 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800100a:	4619      	mov	r1, r3
 800100c:	4821      	ldr	r0, [pc, #132]	; (8001094 <MX_GPIO_Init+0x200>)
 800100e:	f003 fca1 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001012:	2380      	movs	r3, #128	; 0x80
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001016:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001024:	4619      	mov	r1, r3
 8001026:	481e      	ldr	r0, [pc, #120]	; (80010a0 <MX_GPIO_Init+0x20c>)
 8001028:	f003 fc94 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 800102c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	4619      	mov	r1, r3
 8001040:	4818      	ldr	r0, [pc, #96]	; (80010a4 <MX_GPIO_Init+0x210>)
 8001042:	f003 fc87 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001058:	230a      	movs	r3, #10
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	4619      	mov	r1, r3
 8001062:	4810      	ldr	r0, [pc, #64]	; (80010a4 <MX_GPIO_Init+0x210>)
 8001064:	f003 fc76 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001068:	2302      	movs	r3, #2
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106c:	2301      	movs	r3, #1
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	; (8001098 <MX_GPIO_Init+0x204>)
 8001080:	f003 fc68 	bl	8004954 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001084:	bf00      	nop
 8001086:	3738      	adds	r7, #56	; 0x38
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	58024400 	.word	0x58024400
 8001090:	58020400 	.word	0x58020400
 8001094:	58020c00 	.word	0x58020c00
 8001098:	58021000 	.word	0x58021000
 800109c:	58020800 	.word	0x58020800
 80010a0:	58021800 	.word	0x58021800
 80010a4:	58020000 	.word	0x58020000

080010a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ac:	b672      	cpsid	i
}
 80010ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <Error_Handler+0x8>
	...

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_MspInit+0x30>)
 80010bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010c0:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_MspInit+0x30>)
 80010c2:	f043 0302 	orr.w	r3, r3, #2
 80010c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_MspInit+0x30>)
 80010cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	58024400 	.word	0x58024400

080010e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a46      	ldr	r2, [pc, #280]	; (8001220 <HAL_ADC_MspInit+0x138>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d14d      	bne.n	80011a6 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800110a:	4b46      	ldr	r3, [pc, #280]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 800110c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001110:	4a44      	ldr	r2, [pc, #272]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 8001112:	f043 0320 	orr.w	r3, r3, #32
 8001116:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 800111c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001120:	f003 0320 	and.w	r3, r3, #32
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001128:	4b3e      	ldr	r3, [pc, #248]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112e:	4a3d      	ldr	r2, [pc, #244]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 8001130:	f043 0304 	orr.w	r3, r3, #4
 8001134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001138:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	4a35      	ldr	r2, [pc, #212]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 800114e:	f043 0302 	orr.w	r3, r3, #2
 8001152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001156:	4b33      	ldr	r3, [pc, #204]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001164:	2301      	movs	r3, #1
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001168:	2303      	movs	r3, #3
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	482c      	ldr	r0, [pc, #176]	; (8001228 <HAL_ADC_MspInit+0x140>)
 8001178:	f003 fbec 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800117c:	2302      	movs	r3, #2
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4827      	ldr	r0, [pc, #156]	; (800122c <HAL_ADC_MspInit+0x144>)
 8001190:	f003 fbe0 	bl	8004954 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 10, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	210a      	movs	r1, #10
 8001198:	2012      	movs	r0, #18
 800119a:	f002 fd1e 	bl	8003bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800119e:	2012      	movs	r0, #18
 80011a0:	f002 fd35 	bl	8003c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80011a4:	e037      	b.n	8001216 <HAL_ADC_MspInit+0x12e>
  else if(hadc->Instance==ADC3)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a21      	ldr	r2, [pc, #132]	; (8001230 <HAL_ADC_MspInit+0x148>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d132      	bne.n	8001216 <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 80011b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	4a13      	ldr	r2, [pc, #76]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 80011d6:	f043 0320 	orr.w	r3, r3, #32
 80011da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_ADC_MspInit+0x13c>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	f003 0320 	and.w	r3, r3, #32
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f2:	2303      	movs	r3, #3
 80011f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <HAL_ADC_MspInit+0x14c>)
 8001202:	f003 fba7 	bl	8004954 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 10, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	210a      	movs	r1, #10
 800120a:	207f      	movs	r0, #127	; 0x7f
 800120c:	f002 fce5 	bl	8003bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8001210:	207f      	movs	r0, #127	; 0x7f
 8001212:	f002 fcfc 	bl	8003c0e <HAL_NVIC_EnableIRQ>
}
 8001216:	bf00      	nop
 8001218:	3730      	adds	r7, #48	; 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40022000 	.word	0x40022000
 8001224:	58024400 	.word	0x58024400
 8001228:	58020800 	.word	0x58020800
 800122c:	58020400 	.word	0x58020400
 8001230:	58026000 	.word	0x58026000
 8001234:	58021400 	.word	0x58021400

08001238 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08e      	sub	sp, #56	; 0x38
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a59      	ldr	r2, [pc, #356]	; (80013bc <HAL_ETH_MspInit+0x184>)
 8001256:	4293      	cmp	r3, r2
 8001258:	f040 80ab 	bne.w	80013b2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800125c:	4b58      	ldr	r3, [pc, #352]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 800125e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001262:	4a57      	ldr	r2, [pc, #348]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 8001264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001268:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800126c:	4b54      	ldr	r3, [pc, #336]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 800126e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001276:	623b      	str	r3, [r7, #32]
 8001278:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800127a:	4b51      	ldr	r3, [pc, #324]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 800127c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001280:	4a4f      	ldr	r2, [pc, #316]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 8001282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001286:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800128a:	4b4d      	ldr	r3, [pc, #308]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 800128c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001298:	4b49      	ldr	r3, [pc, #292]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 800129a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800129e:	4a48      	ldr	r2, [pc, #288]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 80012a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80012a8:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 80012aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012bc:	4a40      	ldr	r2, [pc, #256]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c6:	4b3e      	ldr	r3, [pc, #248]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	4b3a      	ldr	r3, [pc, #232]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 80012d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012da:	4a39      	ldr	r2, [pc, #228]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012e4:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 80012f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f8:	4a31      	ldr	r2, [pc, #196]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 80012fa:	f043 0302 	orr.w	r3, r3, #2
 80012fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001302:	4b2f      	ldr	r3, [pc, #188]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 8001304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001308:	f003 0302 	and.w	r3, r3, #2
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 8001312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001316:	4a2a      	ldr	r2, [pc, #168]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 8001318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800131c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <HAL_ETH_MspInit+0x188>)
 8001322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800132e:	2332      	movs	r3, #50	; 0x32
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800133e:	230b      	movs	r3, #11
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001346:	4619      	mov	r1, r3
 8001348:	481e      	ldr	r0, [pc, #120]	; (80013c4 <HAL_ETH_MspInit+0x18c>)
 800134a:	f003 fb03 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800134e:	2386      	movs	r3, #134	; 0x86
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800135e:	230b      	movs	r3, #11
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	4817      	ldr	r0, [pc, #92]	; (80013c8 <HAL_ETH_MspInit+0x190>)
 800136a:	f003 faf3 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800136e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001380:	230b      	movs	r3, #11
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001388:	4619      	mov	r1, r3
 800138a:	4810      	ldr	r0, [pc, #64]	; (80013cc <HAL_ETH_MspInit+0x194>)
 800138c:	f003 fae2 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001390:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013a2:	230b      	movs	r3, #11
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013aa:	4619      	mov	r1, r3
 80013ac:	4808      	ldr	r0, [pc, #32]	; (80013d0 <HAL_ETH_MspInit+0x198>)
 80013ae:	f003 fad1 	bl	8004954 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3738      	adds	r7, #56	; 0x38
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40028000 	.word	0x40028000
 80013c0:	58024400 	.word	0x58024400
 80013c4:	58020800 	.word	0x58020800
 80013c8:	58020000 	.word	0x58020000
 80013cc:	58020400 	.word	0x58020400
 80013d0:	58021800 	.word	0x58021800

080013d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b0b8      	sub	sp, #224	; 0xe0
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	22b8      	movs	r2, #184	; 0xb8
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f011 f953 	bl	80126a0 <memset>
  if(hi2c->Instance==I2C1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a2f      	ldr	r2, [pc, #188]	; (80014bc <HAL_I2C_MspInit+0xe8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d156      	bne.n	80014b2 <HAL_I2C_MspInit+0xde>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001404:	f04f 0208 	mov.w	r2, #8
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001410:	2300      	movs	r3, #0
 8001412:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001416:	f107 0310 	add.w	r3, r7, #16
 800141a:	4618      	mov	r0, r3
 800141c:	f006 fc8a 	bl	8007d34 <HAL_RCCEx_PeriphCLKConfig>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001426:	f7ff fe3f 	bl	80010a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <HAL_I2C_MspInit+0xec>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001430:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <HAL_I2C_MspInit+0xec>)
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143a:	4b21      	ldr	r3, [pc, #132]	; (80014c0 <HAL_I2C_MspInit+0xec>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001448:	f44f 7340 	mov.w	r3, #768	; 0x300
 800144c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001450:	2312      	movs	r3, #18
 8001452:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001462:	2304      	movs	r3, #4
 8001464:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800146c:	4619      	mov	r1, r3
 800146e:	4815      	ldr	r0, [pc, #84]	; (80014c4 <HAL_I2C_MspInit+0xf0>)
 8001470:	f003 fa70 	bl	8004954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_I2C_MspInit+0xec>)
 8001476:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800147a:	4a11      	ldr	r2, [pc, #68]	; (80014c0 <HAL_I2C_MspInit+0xec>)
 800147c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001480:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <HAL_I2C_MspInit+0xec>)
 8001486:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800148a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 10, 0);
 8001492:	2200      	movs	r2, #0
 8001494:	210a      	movs	r1, #10
 8001496:	201f      	movs	r0, #31
 8001498:	f002 fb9f 	bl	8003bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800149c:	201f      	movs	r0, #31
 800149e:	f002 fbb6 	bl	8003c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 10, 0);
 80014a2:	2200      	movs	r2, #0
 80014a4:	210a      	movs	r1, #10
 80014a6:	2020      	movs	r0, #32
 80014a8:	f002 fb97 	bl	8003bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80014ac:	2020      	movs	r0, #32
 80014ae:	f002 fbae 	bl	8003c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	37e0      	adds	r7, #224	; 0xe0
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40005400 	.word	0x40005400
 80014c0:	58024400 	.word	0x58024400
 80014c4:	58020400 	.word	0x58020400

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0bc      	sub	sp, #240	; 0xf0
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	22b8      	movs	r2, #184	; 0xb8
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f011 f8d9 	bl	80126a0 <memset>
  if(huart->Instance==UART4)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a5f      	ldr	r2, [pc, #380]	; (8001670 <HAL_UART_MspInit+0x1a8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d16b      	bne.n	80015d0 <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80014f8:	f04f 0202 	mov.w	r2, #2
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150a:	f107 0320 	add.w	r3, r7, #32
 800150e:	4618      	mov	r0, r3
 8001510:	f006 fc10 	bl	8007d34 <HAL_RCCEx_PeriphCLKConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800151a:	f7ff fdc5 	bl	80010a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800151e:	4b55      	ldr	r3, [pc, #340]	; (8001674 <HAL_UART_MspInit+0x1ac>)
 8001520:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001524:	4a53      	ldr	r2, [pc, #332]	; (8001674 <HAL_UART_MspInit+0x1ac>)
 8001526:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800152a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800152e:	4b51      	ldr	r3, [pc, #324]	; (8001674 <HAL_UART_MspInit+0x1ac>)
 8001530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <HAL_UART_MspInit+0x1ac>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001542:	4a4c      	ldr	r2, [pc, #304]	; (8001674 <HAL_UART_MspInit+0x1ac>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800154c:	4b49      	ldr	r3, [pc, #292]	; (8001674 <HAL_UART_MspInit+0x1ac>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	61bb      	str	r3, [r7, #24]
 8001558:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	4b46      	ldr	r3, [pc, #280]	; (8001674 <HAL_UART_MspInit+0x1ac>)
 800155c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001560:	4a44      	ldr	r2, [pc, #272]	; (8001674 <HAL_UART_MspInit+0x1ac>)
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800156a:	4b42      	ldr	r3, [pc, #264]	; (8001674 <HAL_UART_MspInit+0x1ac>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	617b      	str	r3, [r7, #20]
 8001576:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001578:	2301      	movs	r3, #1
 800157a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001590:	2308      	movs	r3, #8
 8001592:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800159a:	4619      	mov	r1, r3
 800159c:	4836      	ldr	r0, [pc, #216]	; (8001678 <HAL_UART_MspInit+0x1b0>)
 800159e:	f003 f9d9 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015aa:	2302      	movs	r3, #2
 80015ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015bc:	2308      	movs	r3, #8
 80015be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015c6:	4619      	mov	r1, r3
 80015c8:	482c      	ldr	r0, [pc, #176]	; (800167c <HAL_UART_MspInit+0x1b4>)
 80015ca:	f003 f9c3 	bl	8004954 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80015ce:	e04b      	b.n	8001668 <HAL_UART_MspInit+0x1a0>
  else if(huart->Instance==USART3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a2a      	ldr	r2, [pc, #168]	; (8001680 <HAL_UART_MspInit+0x1b8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d146      	bne.n	8001668 <HAL_UART_MspInit+0x1a0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015da:	f04f 0202 	mov.w	r2, #2
 80015de:	f04f 0300 	mov.w	r3, #0
 80015e2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ec:	f107 0320 	add.w	r3, r7, #32
 80015f0:	4618      	mov	r0, r3
 80015f2:	f006 fb9f 	bl	8007d34 <HAL_RCCEx_PeriphCLKConfig>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <HAL_UART_MspInit+0x138>
      Error_Handler();
 80015fc:	f7ff fd54 	bl	80010a8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001600:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <HAL_UART_MspInit+0x1ac>)
 8001602:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001606:	4a1b      	ldr	r2, [pc, #108]	; (8001674 <HAL_UART_MspInit+0x1ac>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001610:	4b18      	ldr	r3, [pc, #96]	; (8001674 <HAL_UART_MspInit+0x1ac>)
 8001612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_UART_MspInit+0x1ac>)
 8001620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001624:	4a13      	ldr	r2, [pc, #76]	; (8001674 <HAL_UART_MspInit+0x1ac>)
 8001626:	f043 0308 	orr.w	r3, r3, #8
 800162a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <HAL_UART_MspInit+0x1ac>)
 8001630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001634:	f003 0308 	and.w	r3, r3, #8
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800163c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001640:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001656:	2307      	movs	r3, #7
 8001658:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800165c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001660:	4619      	mov	r1, r3
 8001662:	4808      	ldr	r0, [pc, #32]	; (8001684 <HAL_UART_MspInit+0x1bc>)
 8001664:	f003 f976 	bl	8004954 <HAL_GPIO_Init>
}
 8001668:	bf00      	nop
 800166a:	37f0      	adds	r7, #240	; 0xf0
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40004c00 	.word	0x40004c00
 8001674:	58024400 	.word	0x58024400
 8001678:	58020000 	.word	0x58020000
 800167c:	58020800 	.word	0x58020800
 8001680:	40004800 	.word	0x40004800
 8001684:	58020c00 	.word	0x58020c00

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800168c:	e7fe      	b.n	800168c <NMI_Handler+0x4>

0800168e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001692:	e7fe      	b.n	8001692 <HardFault_Handler+0x4>

08001694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001698:	e7fe      	b.n	8001698 <MemManage_Handler+0x4>

0800169a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169e:	e7fe      	b.n	800169e <BusFault_Handler+0x4>

080016a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <UsageFault_Handler+0x4>

080016a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016d4:	f000 f93e 	bl	8001954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <ADC_IRQHandler+0x10>)
 80016e2:	f000 ff6f 	bl	80025c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	24000cb8 	.word	0x24000cb8

080016f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <I2C1_EV_IRQHandler+0x10>)
 80016f6:	f003 fd51 	bl	800519c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	24000e48 	.word	0x24000e48

08001704 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001708:	4802      	ldr	r0, [pc, #8]	; (8001714 <I2C1_ER_IRQHandler+0x10>)
 800170a:	f003 fd61 	bl	80051d0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	24000e48 	.word	0x24000e48

08001718 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 800171c:	4802      	ldr	r0, [pc, #8]	; (8001728 <ADC3_IRQHandler+0x10>)
 800171e:	f000 ff51 	bl	80025c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	24000d28 	.word	0x24000d28

0800172c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001730:	4b32      	ldr	r3, [pc, #200]	; (80017fc <SystemInit+0xd0>)
 8001732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001736:	4a31      	ldr	r2, [pc, #196]	; (80017fc <SystemInit+0xd0>)
 8001738:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800173c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001740:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <SystemInit+0xd4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	2b06      	cmp	r3, #6
 800174a:	d807      	bhi.n	800175c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800174c:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <SystemInit+0xd4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 030f 	bic.w	r3, r3, #15
 8001754:	4a2a      	ldr	r2, [pc, #168]	; (8001800 <SystemInit+0xd4>)
 8001756:	f043 0307 	orr.w	r3, r3, #7
 800175a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800175c:	4b29      	ldr	r3, [pc, #164]	; (8001804 <SystemInit+0xd8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a28      	ldr	r2, [pc, #160]	; (8001804 <SystemInit+0xd8>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001768:	4b26      	ldr	r3, [pc, #152]	; (8001804 <SystemInit+0xd8>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800176e:	4b25      	ldr	r3, [pc, #148]	; (8001804 <SystemInit+0xd8>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4924      	ldr	r1, [pc, #144]	; (8001804 <SystemInit+0xd8>)
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <SystemInit+0xdc>)
 8001776:	4013      	ands	r3, r2
 8001778:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <SystemInit+0xd4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001786:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <SystemInit+0xd4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 030f 	bic.w	r3, r3, #15
 800178e:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <SystemInit+0xd4>)
 8001790:	f043 0307 	orr.w	r3, r3, #7
 8001794:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001796:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <SystemInit+0xd8>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <SystemInit+0xd8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <SystemInit+0xd8>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <SystemInit+0xd8>)
 80017aa:	4a18      	ldr	r2, [pc, #96]	; (800180c <SystemInit+0xe0>)
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <SystemInit+0xd8>)
 80017b0:	4a17      	ldr	r2, [pc, #92]	; (8001810 <SystemInit+0xe4>)
 80017b2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <SystemInit+0xd8>)
 80017b6:	4a17      	ldr	r2, [pc, #92]	; (8001814 <SystemInit+0xe8>)
 80017b8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <SystemInit+0xd8>)
 80017bc:	2200      	movs	r2, #0
 80017be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <SystemInit+0xd8>)
 80017c2:	4a14      	ldr	r2, [pc, #80]	; (8001814 <SystemInit+0xe8>)
 80017c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80017c6:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <SystemInit+0xd8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <SystemInit+0xd8>)
 80017ce:	4a11      	ldr	r2, [pc, #68]	; (8001814 <SystemInit+0xe8>)
 80017d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <SystemInit+0xd8>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	; (8001804 <SystemInit+0xd8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a09      	ldr	r2, [pc, #36]	; (8001804 <SystemInit+0xd8>)
 80017de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <SystemInit+0xd8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <SystemInit+0xec>)
 80017ec:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80017f0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00
 8001800:	52002000 	.word	0x52002000
 8001804:	58024400 	.word	0x58024400
 8001808:	eaf6ed7f 	.word	0xeaf6ed7f
 800180c:	02020200 	.word	0x02020200
 8001810:	01ff0000 	.word	0x01ff0000
 8001814:	01010280 	.word	0x01010280
 8001818:	52004000 	.word	0x52004000

0800181c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800181c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001854 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001820:	f7ff ff84 	bl	800172c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001826:	490d      	ldr	r1, [pc, #52]	; (800185c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800182c:	e002      	b.n	8001834 <LoopCopyDataInit>

0800182e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001832:	3304      	adds	r3, #4

08001834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001838:	d3f9      	bcc.n	800182e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800183c:	4c0a      	ldr	r4, [pc, #40]	; (8001868 <LoopFillZerobss+0x22>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001840:	e001      	b.n	8001846 <LoopFillZerobss>

08001842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001844:	3204      	adds	r2, #4

08001846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001848:	d3fb      	bcc.n	8001842 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800184a:	f010 ff31 	bl	80126b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800184e:	f7ff f853 	bl	80008f8 <main>
  bx  lr
 8001852:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001854:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001858:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800185c:	24000050 	.word	0x24000050
  ldr r2, =_sidata
 8001860:	08012ba4 	.word	0x08012ba4
  ldr r2, =_sbss
 8001864:	24000c60 	.word	0x24000c60
  ldr r4, =_ebss
 8001868:	24001134 	.word	0x24001134

0800186c <BDMA_Channel0_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800186c:	e7fe      	b.n	800186c <BDMA_Channel0_IRQHandler>
	...

08001870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001876:	2003      	movs	r0, #3
 8001878:	f002 f9a4 	bl	8003bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800187c:	f006 f884 	bl	8007988 <HAL_RCC_GetSysClockFreq>
 8001880:	4602      	mov	r2, r0
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_Init+0x68>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	0a1b      	lsrs	r3, r3, #8
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	4913      	ldr	r1, [pc, #76]	; (80018dc <HAL_Init+0x6c>)
 800188e:	5ccb      	ldrb	r3, [r1, r3]
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	fa22 f303 	lsr.w	r3, r2, r3
 8001898:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_Init+0x68>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	4a0e      	ldr	r2, [pc, #56]	; (80018dc <HAL_Init+0x6c>)
 80018a4:	5cd3      	ldrb	r3, [r2, r3]
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	fa22 f303 	lsr.w	r3, r2, r3
 80018b0:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <HAL_Init+0x70>)
 80018b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018b4:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <HAL_Init+0x74>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ba:	2000      	movs	r0, #0
 80018bc:	f000 f814 	bl	80018e8 <HAL_InitTick>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e002      	b.n	80018d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018ca:	f7ff fbf3 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	58024400 	.word	0x58024400
 80018dc:	08012a78 	.word	0x08012a78
 80018e0:	24000020 	.word	0x24000020
 80018e4:	2400001c 	.word	0x2400001c

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <HAL_InitTick+0x60>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e021      	b.n	8001940 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_InitTick+0x64>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_InitTick+0x60>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190a:	fbb3 f3f1 	udiv	r3, r3, r1
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	4618      	mov	r0, r3
 8001914:	f002 f989 	bl	8003c2a <HAL_SYSTICK_Config>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e00e      	b.n	8001940 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b0f      	cmp	r3, #15
 8001926:	d80a      	bhi.n	800193e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001928:	2200      	movs	r2, #0
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001930:	f002 f953 	bl	8003bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001934:	4a06      	ldr	r2, [pc, #24]	; (8001950 <HAL_InitTick+0x68>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
 800193c:	e000      	b.n	8001940 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	24000028 	.word	0x24000028
 800194c:	2400001c 	.word	0x2400001c
 8001950:	24000024 	.word	0x24000024

08001954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_IncTick+0x20>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x24>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4413      	add	r3, r2
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <HAL_IncTick+0x24>)
 8001966:	6013      	str	r3, [r2, #0]
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	24000028 	.word	0x24000028
 8001978:	24000fcc 	.word	0x24000fcc

0800197c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTick;
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <HAL_GetTick+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	24000fcc 	.word	0x24000fcc

08001994 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80019a4:	4904      	ldr	r1, [pc, #16]	; (80019b8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	604b      	str	r3, [r1, #4]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	58000400 	.word	0x58000400

080019bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	431a      	orrs	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	609a      	str	r2, [r3, #8]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3360      	adds	r3, #96	; 0x60
 8001a36:	461a      	mov	r2, r3
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <LL_ADC_SetOffset+0x60>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d10b      	bne.n	8001a60 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a5e:	e00b      	b.n	8001a78 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	430b      	orrs	r3, r1
 8001a72:	431a      	orrs	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	58026000 	.word	0x58026000

08001a88 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3360      	adds	r3, #96	; 0x60
 8001a96:	461a      	mov	r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f003 031f 	and.w	r3, r3, #31
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	611a      	str	r2, [r3, #16]
}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4a0c      	ldr	r2, [pc, #48]	; (8001b28 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d00e      	beq.n	8001b1a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3360      	adds	r3, #96	; 0x60
 8001b00:	461a      	mov	r2, r3
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	431a      	orrs	r2, r3
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	601a      	str	r2, [r3, #0]
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	371c      	adds	r7, #28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	58026000 	.word	0x58026000

08001b2c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <LL_ADC_SetOffsetSaturation+0x40>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d10e      	bne.n	8001b5e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	3360      	adds	r3, #96	; 0x60
 8001b44:	461a      	mov	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001b5e:	bf00      	nop
 8001b60:	371c      	adds	r7, #28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	58026000 	.word	0x58026000

08001b70 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b087      	sub	sp, #28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4a0c      	ldr	r2, [pc, #48]	; (8001bb0 <LL_ADC_SetOffsetSign+0x40>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d10e      	bne.n	8001ba2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	3360      	adds	r3, #96	; 0x60
 8001b88:	461a      	mov	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	58026000 	.word	0x58026000

08001bb4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3360      	adds	r3, #96	; 0x60
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <LL_ADC_SetOffsetState+0x50>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d108      	bne.n	8001be8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	431a      	orrs	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001be6:	e007      	b.n	8001bf8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	601a      	str	r2, [r3, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	58026000 	.word	0x58026000

08001c08 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e000      	b.n	8001c22 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b087      	sub	sp, #28
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3330      	adds	r3, #48	; 0x30
 8001c3e:	461a      	mov	r2, r3
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	4413      	add	r3, r2
 8001c4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	f003 031f 	and.w	r3, r3, #31
 8001c58:	211f      	movs	r1, #31
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	401a      	ands	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	0e9b      	lsrs	r3, r3, #26
 8001c66:	f003 011f 	and.w	r1, r3, #31
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	f003 031f 	and.w	r3, r3, #31
 8001c70:	fa01 f303 	lsl.w	r3, r1, r3
 8001c74:	431a      	orrs	r2, r3
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c7a:	bf00      	nop
 8001c7c:	371c      	adds	r7, #28
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c92:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3314      	adds	r3, #20
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	0e5b      	lsrs	r3, r3, #25
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	4413      	add	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	0d1b      	lsrs	r3, r3, #20
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	2107      	movs	r1, #7
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	0d1b      	lsrs	r3, r3, #20
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cf6:	bf00      	nop
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4a1a      	ldr	r2, [pc, #104]	; (8001d7c <LL_ADC_SetChannelSingleDiff+0x78>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d115      	bne.n	8001d44 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d24:	43db      	mvns	r3, r3
 8001d26:	401a      	ands	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0318 	and.w	r3, r3, #24
 8001d2e:	4914      	ldr	r1, [pc, #80]	; (8001d80 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001d30:	40d9      	lsrs	r1, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	400b      	ands	r3, r1
 8001d36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001d42:	e014      	b.n	8001d6e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d50:	43db      	mvns	r3, r3
 8001d52:	401a      	ands	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f003 0318 	and.w	r3, r3, #24
 8001d5a:	4909      	ldr	r1, [pc, #36]	; (8001d80 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001d5c:	40d9      	lsrs	r1, r3
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	400b      	ands	r3, r1
 8001d62:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d66:	431a      	orrs	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	58026000 	.word	0x58026000
 8001d80:	000fffff 	.word	0x000fffff

08001d84 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 031f 	and.w	r3, r3, #31
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <LL_ADC_DisableDeepPowerDown+0x20>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6093      	str	r3, [r2, #8]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	5fffffc0 	.word	0x5fffffc0

08001de0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001df4:	d101      	bne.n	8001dfa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <LL_ADC_EnableInternalRegulator+0x24>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	6fffffc0 	.word	0x6fffffc0

08001e30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e44:	d101      	bne.n	8001e4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <LL_ADC_Enable+0x24>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	f043 0201 	orr.w	r2, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	7fffffc0 	.word	0x7fffffc0

08001e80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d101      	bne.n	8001e98 <LL_ADC_IsEnabled+0x18>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <LL_ADC_IsEnabled+0x1a>
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <LL_ADC_REG_StartConversion+0x24>)
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	f043 0204 	orr.w	r2, r3, #4
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	7fffffc0 	.word	0x7fffffc0

08001ed0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d101      	bne.n	8001ee8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d101      	bne.n	8001f0e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b089      	sub	sp, #36	; 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e1ee      	b.n	8002314 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d109      	bne.n	8001f58 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff f8cf 	bl	80010e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff3f 	bl	8001de0 <LL_ADC_IsDeepPowerDownEnabled>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff25 	bl	8001dbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff5a 	bl	8001e30 <LL_ADC_IsInternalRegulatorEnabled>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d114      	bne.n	8001fac <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff ff3e 	bl	8001e08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f8c:	4b8e      	ldr	r3, [pc, #568]	; (80021c8 <HAL_ADC_Init+0x2ac>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	4a8e      	ldr	r2, [pc, #568]	; (80021cc <HAL_ADC_Init+0x2b0>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	099b      	lsrs	r3, r3, #6
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f9e:	e002      	b.n	8001fa6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f9      	bne.n	8001fa0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff3d 	bl	8001e30 <LL_ADC_IsInternalRegulatorEnabled>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d10d      	bne.n	8001fd8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc0:	f043 0210 	orr.w	r2, r3, #16
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff77 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 8001fe2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f040 8188 	bne.w	8002302 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f040 8184 	bne.w	8002302 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002002:	f043 0202 	orr.w	r2, r3, #2
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff ff36 	bl	8001e80 <LL_ADC_IsEnabled>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d136      	bne.n	8002088 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6c      	ldr	r2, [pc, #432]	; (80021d0 <HAL_ADC_Init+0x2b4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d004      	beq.n	800202e <HAL_ADC_Init+0x112>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a6a      	ldr	r2, [pc, #424]	; (80021d4 <HAL_ADC_Init+0x2b8>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d10e      	bne.n	800204c <HAL_ADC_Init+0x130>
 800202e:	4868      	ldr	r0, [pc, #416]	; (80021d0 <HAL_ADC_Init+0x2b4>)
 8002030:	f7ff ff26 	bl	8001e80 <LL_ADC_IsEnabled>
 8002034:	4604      	mov	r4, r0
 8002036:	4867      	ldr	r0, [pc, #412]	; (80021d4 <HAL_ADC_Init+0x2b8>)
 8002038:	f7ff ff22 	bl	8001e80 <LL_ADC_IsEnabled>
 800203c:	4603      	mov	r3, r0
 800203e:	4323      	orrs	r3, r4
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	e008      	b.n	800205e <HAL_ADC_Init+0x142>
 800204c:	4862      	ldr	r0, [pc, #392]	; (80021d8 <HAL_ADC_Init+0x2bc>)
 800204e:	f7ff ff17 	bl	8001e80 <LL_ADC_IsEnabled>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d012      	beq.n	8002088 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a5a      	ldr	r2, [pc, #360]	; (80021d0 <HAL_ADC_Init+0x2b4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d004      	beq.n	8002076 <HAL_ADC_Init+0x15a>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a58      	ldr	r2, [pc, #352]	; (80021d4 <HAL_ADC_Init+0x2b8>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d101      	bne.n	800207a <HAL_ADC_Init+0x15e>
 8002076:	4a59      	ldr	r2, [pc, #356]	; (80021dc <HAL_ADC_Init+0x2c0>)
 8002078:	e000      	b.n	800207c <HAL_ADC_Init+0x160>
 800207a:	4a59      	ldr	r2, [pc, #356]	; (80021e0 <HAL_ADC_Init+0x2c4>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4619      	mov	r1, r3
 8002082:	4610      	mov	r0, r2
 8002084:	f7ff fc9a 	bl	80019bc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a52      	ldr	r2, [pc, #328]	; (80021d8 <HAL_ADC_Init+0x2bc>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d129      	bne.n	80020e6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	7e5b      	ldrb	r3, [r3, #25]
 8002096:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800209c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80020a2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d013      	beq.n	80020d4 <HAL_ADC_Init+0x1b8>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b0c      	cmp	r3, #12
 80020b2:	d00d      	beq.n	80020d0 <HAL_ADC_Init+0x1b4>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b1c      	cmp	r3, #28
 80020ba:	d007      	beq.n	80020cc <HAL_ADC_Init+0x1b0>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b18      	cmp	r3, #24
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_Init+0x1ac>
 80020c4:	2318      	movs	r3, #24
 80020c6:	e006      	b.n	80020d6 <HAL_ADC_Init+0x1ba>
 80020c8:	2300      	movs	r3, #0
 80020ca:	e004      	b.n	80020d6 <HAL_ADC_Init+0x1ba>
 80020cc:	2310      	movs	r3, #16
 80020ce:	e002      	b.n	80020d6 <HAL_ADC_Init+0x1ba>
 80020d0:	2308      	movs	r3, #8
 80020d2:	e000      	b.n	80020d6 <HAL_ADC_Init+0x1ba>
 80020d4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80020d6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020de:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
 80020e4:	e00e      	b.n	8002104 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	7e5b      	ldrb	r3, [r3, #25]
 80020ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020f0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020f6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020fe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3020 	ldrb.w	r3, [r3, #32]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d106      	bne.n	800211c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	3b01      	subs	r3, #1
 8002114:	045b      	lsls	r3, r3, #17
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	2b00      	cmp	r3, #0
 8002122:	d009      	beq.n	8002138 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002128:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4313      	orrs	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a26      	ldr	r2, [pc, #152]	; (80021d8 <HAL_ADC_Init+0x2bc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d115      	bne.n	800216e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <HAL_ADC_Init+0x2c8>)
 800214a:	4013      	ands	r3, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	69b9      	ldr	r1, [r7, #24]
 8002152:	430b      	orrs	r3, r1
 8002154:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	611a      	str	r2, [r3, #16]
 800216c:	e009      	b.n	8002182 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	4b1c      	ldr	r3, [pc, #112]	; (80021e8 <HAL_ADC_Init+0x2cc>)
 8002176:	4013      	ands	r3, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6812      	ldr	r2, [r2, #0]
 800217c:	69b9      	ldr	r1, [r7, #24]
 800217e:	430b      	orrs	r3, r1
 8002180:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fea2 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 800218c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff feaf 	bl	8001ef6 <LL_ADC_INJ_IsConversionOngoing>
 8002198:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	f040 808e 	bne.w	80022be <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f040 808a 	bne.w	80022be <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a0a      	ldr	r2, [pc, #40]	; (80021d8 <HAL_ADC_Init+0x2bc>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d11b      	bne.n	80021ec <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7e1b      	ldrb	r3, [r3, #24]
 80021b8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021c0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	e018      	b.n	80021fa <HAL_ADC_Init+0x2de>
 80021c8:	2400001c 	.word	0x2400001c
 80021cc:	053e2d63 	.word	0x053e2d63
 80021d0:	40022000 	.word	0x40022000
 80021d4:	40022100 	.word	0x40022100
 80021d8:	58026000 	.word	0x58026000
 80021dc:	40022300 	.word	0x40022300
 80021e0:	58026300 	.word	0x58026300
 80021e4:	fff04007 	.word	0xfff04007
 80021e8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	7e1b      	ldrb	r3, [r3, #24]
 80021f0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	4b46      	ldr	r3, [pc, #280]	; (800231c <HAL_ADC_Init+0x400>)
 8002202:	4013      	ands	r3, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6812      	ldr	r2, [r2, #0]
 8002208:	69b9      	ldr	r1, [r7, #24]
 800220a:	430b      	orrs	r3, r1
 800220c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002214:	2b01      	cmp	r3, #1
 8002216:	d137      	bne.n	8002288 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a3f      	ldr	r2, [pc, #252]	; (8002320 <HAL_ADC_Init+0x404>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d116      	bne.n	8002256 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	4b3d      	ldr	r3, [pc, #244]	; (8002324 <HAL_ADC_Init+0x408>)
 8002230:	4013      	ands	r3, r2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800223a:	4311      	orrs	r1, r2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002240:	4311      	orrs	r1, r2
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002246:	430a      	orrs	r2, r1
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0201 	orr.w	r2, r2, #1
 8002252:	611a      	str	r2, [r3, #16]
 8002254:	e020      	b.n	8002298 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	4b32      	ldr	r3, [pc, #200]	; (8002328 <HAL_ADC_Init+0x40c>)
 800225e:	4013      	ands	r3, r2
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002264:	3a01      	subs	r2, #1
 8002266:	0411      	lsls	r1, r2, #16
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800226c:	4311      	orrs	r1, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002272:	4311      	orrs	r1, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002278:	430a      	orrs	r2, r1
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0201 	orr.w	r2, r2, #1
 8002284:	611a      	str	r2, [r3, #16]
 8002286:	e007      	b.n	8002298 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0201 	bic.w	r2, r2, #1
 8002296:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <HAL_ADC_Init+0x404>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d002      	beq.n	80022be <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f001 f98b 	bl	80035d4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10c      	bne.n	80022e0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	f023 010f 	bic.w	r1, r3, #15
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	1e5a      	subs	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30
 80022de:	e007      	b.n	80022f0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 020f 	bic.w	r2, r2, #15
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022f4:	f023 0303 	bic.w	r3, r3, #3
 80022f8:	f043 0201 	orr.w	r2, r3, #1
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	661a      	str	r2, [r3, #96]	; 0x60
 8002300:	e007      	b.n	8002312 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002306:	f043 0210 	orr.w	r2, r3, #16
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002312:	7ffb      	ldrb	r3, [r7, #31]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3724      	adds	r7, #36	; 0x24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd90      	pop	{r4, r7, pc}
 800231c:	ffffbffc 	.word	0xffffbffc
 8002320:	58026000 	.word	0x58026000
 8002324:	fc00f81f 	.word	0xfc00f81f
 8002328:	fc00f81e 	.word	0xfc00f81e

0800232c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a92      	ldr	r2, [pc, #584]	; (8002584 <HAL_ADC_Start_IT+0x258>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d004      	beq.n	8002348 <HAL_ADC_Start_IT+0x1c>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a91      	ldr	r2, [pc, #580]	; (8002588 <HAL_ADC_Start_IT+0x25c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_ADC_Start_IT+0x20>
 8002348:	4b90      	ldr	r3, [pc, #576]	; (800258c <HAL_ADC_Start_IT+0x260>)
 800234a:	e000      	b.n	800234e <HAL_ADC_Start_IT+0x22>
 800234c:	4b90      	ldr	r3, [pc, #576]	; (8002590 <HAL_ADC_Start_IT+0x264>)
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fd18 	bl	8001d84 <LL_ADC_GetMultimode>
 8002354:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fdb8 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	f040 8118 	bne.w	8002598 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800236e:	2b01      	cmp	r3, #1
 8002370:	d101      	bne.n	8002376 <HAL_ADC_Start_IT+0x4a>
 8002372:	2302      	movs	r3, #2
 8002374:	e113      	b.n	800259e <HAL_ADC_Start_IT+0x272>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f001 f89e 	bl	80034c0 <ADC_Enable>
 8002384:	4603      	mov	r3, r0
 8002386:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002388:	7dfb      	ldrb	r3, [r7, #23]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f040 80f5 	bne.w	800257a <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002394:	4b7f      	ldr	r3, [pc, #508]	; (8002594 <HAL_ADC_Start_IT+0x268>)
 8002396:	4013      	ands	r3, r2
 8002398:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a78      	ldr	r2, [pc, #480]	; (8002588 <HAL_ADC_Start_IT+0x25c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d002      	beq.n	80023b0 <HAL_ADC_Start_IT+0x84>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	e000      	b.n	80023b2 <HAL_ADC_Start_IT+0x86>
 80023b0:	4b74      	ldr	r3, [pc, #464]	; (8002584 <HAL_ADC_Start_IT+0x258>)
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d002      	beq.n	80023c0 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d006      	beq.n	80023e6 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023dc:	f023 0206 	bic.w	r2, r3, #6
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	665a      	str	r2, [r3, #100]	; 0x64
 80023e4:	e002      	b.n	80023ec <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	221c      	movs	r2, #28
 80023f2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 021c 	bic.w	r2, r2, #28
 800240a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d108      	bne.n	8002426 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0208 	orr.w	r2, r2, #8
 8002422:	605a      	str	r2, [r3, #4]
          break;
 8002424:	e008      	b.n	8002438 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f042 0204 	orr.w	r2, r2, #4
 8002434:	605a      	str	r2, [r3, #4]
          break;
 8002436:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d107      	bne.n	8002450 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0210 	orr.w	r2, r2, #16
 800244e:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a4c      	ldr	r2, [pc, #304]	; (8002588 <HAL_ADC_Start_IT+0x25c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d002      	beq.n	8002460 <HAL_ADC_Start_IT+0x134>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	e000      	b.n	8002462 <HAL_ADC_Start_IT+0x136>
 8002460:	4b48      	ldr	r3, [pc, #288]	; (8002584 <HAL_ADC_Start_IT+0x258>)
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	4293      	cmp	r3, r2
 8002468:	d008      	beq.n	800247c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b05      	cmp	r3, #5
 8002474:	d002      	beq.n	800247c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b09      	cmp	r3, #9
 800247a:	d13a      	bne.n	80024f2 <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d02d      	beq.n	80024e6 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002492:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d110      	bne.n	80024c4 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0220 	bic.w	r2, r2, #32
 80024b0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024c0:	605a      	str	r2, [r3, #4]
              break;
 80024c2:	e010      	b.n	80024e6 <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024d2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0220 	orr.w	r2, r2, #32
 80024e2:	605a      	str	r2, [r3, #4]
              break;
 80024e4:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fcdc 	bl	8001ea8 <LL_ADC_REG_StartConversion>
 80024f0:	e054      	b.n	800259c <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a21      	ldr	r2, [pc, #132]	; (8002588 <HAL_ADC_Start_IT+0x25c>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d002      	beq.n	800250e <HAL_ADC_Start_IT+0x1e2>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	e000      	b.n	8002510 <HAL_ADC_Start_IT+0x1e4>
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <HAL_ADC_Start_IT+0x258>)
 8002510:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d03e      	beq.n	800259c <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002522:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002526:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	2b08      	cmp	r3, #8
 8002534:	d110      	bne.n	8002558 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0220 	bic.w	r2, r2, #32
 8002544:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002554:	605a      	str	r2, [r3, #4]
              break;
 8002556:	e021      	b.n	800259c <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002566:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f042 0220 	orr.w	r2, r2, #32
 8002576:	605a      	str	r2, [r3, #4]
              break;
 8002578:	e010      	b.n	800259c <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8002582:	e00b      	b.n	800259c <HAL_ADC_Start_IT+0x270>
 8002584:	40022000 	.word	0x40022000
 8002588:	40022100 	.word	0x40022100
 800258c:	40022300 	.word	0x40022300
 8002590:	58026300 	.word	0x58026300
 8002594:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002598:	2302      	movs	r3, #2
 800259a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800259c:	7dfb      	ldrb	r3, [r7, #23]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop

080025a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80025cc:	2300      	movs	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a87      	ldr	r2, [pc, #540]	; (8002804 <HAL_ADC_IRQHandler+0x240>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d004      	beq.n	80025f4 <HAL_ADC_IRQHandler+0x30>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a86      	ldr	r2, [pc, #536]	; (8002808 <HAL_ADC_IRQHandler+0x244>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d101      	bne.n	80025f8 <HAL_ADC_IRQHandler+0x34>
 80025f4:	4b85      	ldr	r3, [pc, #532]	; (800280c <HAL_ADC_IRQHandler+0x248>)
 80025f6:	e000      	b.n	80025fa <HAL_ADC_IRQHandler+0x36>
 80025f8:	4b85      	ldr	r3, [pc, #532]	; (8002810 <HAL_ADC_IRQHandler+0x24c>)
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fbc2 	bl	8001d84 <LL_ADC_GetMultimode>
 8002600:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d017      	beq.n	800263c <HAL_ADC_IRQHandler+0x78>
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d012      	beq.n	800263c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	d105      	bne.n	800262e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002626:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f001 f90c 	bl	800384c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2202      	movs	r2, #2
 800263a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d004      	beq.n	8002650 <HAL_ADC_IRQHandler+0x8c>
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10a      	bne.n	8002666 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002656:	2b00      	cmp	r3, #0
 8002658:	f000 8083 	beq.w	8002762 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d07d      	beq.n	8002762 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d105      	bne.n	800267e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fac0 	bl	8001c08 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d062      	beq.n	8002754 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a5d      	ldr	r2, [pc, #372]	; (8002808 <HAL_ADC_IRQHandler+0x244>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d002      	beq.n	800269e <HAL_ADC_IRQHandler+0xda>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	e000      	b.n	80026a0 <HAL_ADC_IRQHandler+0xdc>
 800269e:	4b59      	ldr	r3, [pc, #356]	; (8002804 <HAL_ADC_IRQHandler+0x240>)
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d008      	beq.n	80026ba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2b05      	cmp	r3, #5
 80026b2:	d002      	beq.n	80026ba <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b09      	cmp	r3, #9
 80026b8:	d104      	bne.n	80026c4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	623b      	str	r3, [r7, #32]
 80026c2:	e00c      	b.n	80026de <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a4f      	ldr	r2, [pc, #316]	; (8002808 <HAL_ADC_IRQHandler+0x244>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d002      	beq.n	80026d4 <HAL_ADC_IRQHandler+0x110>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	e000      	b.n	80026d6 <HAL_ADC_IRQHandler+0x112>
 80026d4:	4b4b      	ldr	r3, [pc, #300]	; (8002804 <HAL_ADC_IRQHandler+0x240>)
 80026d6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d135      	bne.n	8002754 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d12e      	bne.n	8002754 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fbe8 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d11a      	bne.n	800273c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 020c 	bic.w	r2, r2, #12
 8002714:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d112      	bne.n	8002754 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	661a      	str	r2, [r3, #96]	; 0x60
 800273a:	e00b      	b.n	8002754 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002740:	f043 0210 	orr.w	r2, r3, #16
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f00e ffb9 	bl	80116cc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	220c      	movs	r2, #12
 8002760:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b00      	cmp	r3, #0
 800276a:	d004      	beq.n	8002776 <HAL_ADC_IRQHandler+0x1b2>
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10b      	bne.n	800278e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a0 	beq.w	80028c2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 809a 	beq.w	80028c2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002792:	f003 0310 	and.w	r3, r3, #16
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fa6b 	bl	8001c86 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80027b0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fa26 	bl	8001c08 <LL_ADC_REG_IsTriggerSourceSWStart>
 80027bc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a11      	ldr	r2, [pc, #68]	; (8002808 <HAL_ADC_IRQHandler+0x244>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d002      	beq.n	80027ce <HAL_ADC_IRQHandler+0x20a>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	e000      	b.n	80027d0 <HAL_ADC_IRQHandler+0x20c>
 80027ce:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <HAL_ADC_IRQHandler+0x240>)
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d008      	beq.n	80027ea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b06      	cmp	r3, #6
 80027e2:	d002      	beq.n	80027ea <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b07      	cmp	r3, #7
 80027e8:	d104      	bne.n	80027f4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	623b      	str	r3, [r7, #32]
 80027f2:	e014      	b.n	800281e <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a03      	ldr	r2, [pc, #12]	; (8002808 <HAL_ADC_IRQHandler+0x244>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d00a      	beq.n	8002814 <HAL_ADC_IRQHandler+0x250>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	e008      	b.n	8002816 <HAL_ADC_IRQHandler+0x252>
 8002804:	40022000 	.word	0x40022000
 8002808:	40022100 	.word	0x40022100
 800280c:	40022300 	.word	0x40022300
 8002810:	58026300 	.word	0x58026300
 8002814:	4b84      	ldr	r3, [pc, #528]	; (8002a28 <HAL_ADC_IRQHandler+0x464>)
 8002816:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d047      	beq.n	80028b4 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <HAL_ADC_IRQHandler+0x27a>
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d03f      	beq.n	80028b4 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002834:	6a3b      	ldr	r3, [r7, #32]
 8002836:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800283a:	2b00      	cmp	r3, #0
 800283c:	d13a      	bne.n	80028b4 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d133      	bne.n	80028b4 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d12e      	bne.n	80028b4 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fb4b 	bl	8001ef6 <LL_ADC_INJ_IsConversionOngoing>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d11a      	bne.n	800289c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002874:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d112      	bne.n	80028b4 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002892:	f043 0201 	orr.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	661a      	str	r2, [r3, #96]	; 0x60
 800289a:	e00b      	b.n	80028b4 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a0:	f043 0210 	orr.w	r2, r3, #16
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ac:	f043 0201 	orr.w	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 ffa1 	bl	80037fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2260      	movs	r2, #96	; 0x60
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d011      	beq.n	80028f0 <HAL_ADC_IRQHandler+0x32c>
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00c      	beq.n	80028f0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f8a8 	bl	8002a38 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2280      	movs	r2, #128	; 0x80
 80028ee:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d012      	beq.n	8002920 <HAL_ADC_IRQHandler+0x35c>
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00d      	beq.n	8002920 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002908:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 ff87 	bl	8003824 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800291e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002926:	2b00      	cmp	r3, #0
 8002928:	d012      	beq.n	8002950 <HAL_ADC_IRQHandler+0x38c>
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00d      	beq.n	8002950 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002938:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 ff79 	bl	8003838 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800294e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	d043      	beq.n	80029e2 <HAL_ADC_IRQHandler+0x41e>
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b00      	cmp	r3, #0
 8002962:	d03e      	beq.n	80029e2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 800296c:	2301      	movs	r3, #1
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
 8002970:	e021      	b.n	80029b6 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d015      	beq.n	80029a4 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a2a      	ldr	r2, [pc, #168]	; (8002a28 <HAL_ADC_IRQHandler+0x464>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d004      	beq.n	800298c <HAL_ADC_IRQHandler+0x3c8>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a29      	ldr	r2, [pc, #164]	; (8002a2c <HAL_ADC_IRQHandler+0x468>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d101      	bne.n	8002990 <HAL_ADC_IRQHandler+0x3cc>
 800298c:	4b28      	ldr	r3, [pc, #160]	; (8002a30 <HAL_ADC_IRQHandler+0x46c>)
 800298e:	e000      	b.n	8002992 <HAL_ADC_IRQHandler+0x3ce>
 8002990:	4b28      	ldr	r3, [pc, #160]	; (8002a34 <HAL_ADC_IRQHandler+0x470>)
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fa04 	bl	8001da0 <LL_ADC_GetMultiDMATransfer>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00b      	beq.n	80029b6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800299e:	2301      	movs	r3, #1
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24
 80029a2:	e008      	b.n	80029b6 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80029b2:	2301      	movs	r3, #1
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d10e      	bne.n	80029da <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029cc:	f043 0202 	orr.w	r2, r3, #2
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f839 	bl	8002a4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2210      	movs	r2, #16
 80029e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d018      	beq.n	8002a1e <HAL_ADC_IRQHandler+0x45a>
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d013      	beq.n	8002a1e <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fa:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a06:	f043 0208 	orr.w	r2, r3, #8
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a16:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 fef9 	bl	8003810 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002a1e:	bf00      	nop
 8002a20:	3728      	adds	r7, #40	; 0x28
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40022000 	.word	0x40022000
 8002a2c:	40022100 	.word	0x40022100
 8002a30:	40022300 	.word	0x40022300
 8002a34:	58026300 	.word	0x58026300

08002a38 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b0b9      	sub	sp, #228	; 0xe4
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a7a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4aab      	ldr	r2, [pc, #684]	; (8002d30 <HAL_ADC_ConfigChannel+0x2d0>)
 8002a82:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d102      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x34>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	f000 bcfe 	b.w	8003490 <HAL_ADC_ConfigChannel+0xa30>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fa15 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f040 84e2 	bne.w	8003472 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	db38      	blt.n	8002b28 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a9e      	ldr	r2, [pc, #632]	; (8002d34 <HAL_ADC_ConfigChannel+0x2d4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d033      	beq.n	8002b28 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d108      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x7e>
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	0e9b      	lsrs	r3, r3, #26
 8002ad2:	f003 031f 	and.w	r3, r3, #31
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	e01d      	b.n	8002b1a <HAL_ADC_ConfigChannel+0xba>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aea:	fa93 f3a3 	rbit	r3, r3
 8002aee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002af2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002af6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002afa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8002b02:	2320      	movs	r3, #32
 8002b04:	e004      	b.n	8002b10 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8002b06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b0a:	fab3 f383 	clz	r3, r3
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f003 031f 	and.w	r3, r3, #31
 8002b14:	2201      	movs	r2, #1
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	69d1      	ldr	r1, [r2, #28]
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	6812      	ldr	r2, [r2, #0]
 8002b24:	430b      	orrs	r3, r1
 8002b26:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	f7ff f87a 	bl	8001c2e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff f9c6 	bl	8001ed0 <LL_ADC_REG_IsConversionOngoing>
 8002b44:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff f9d2 	bl	8001ef6 <LL_ADC_INJ_IsConversionOngoing>
 8002b52:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f040 8270 	bne.w	8003040 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b60:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 826b 	bne.w	8003040 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6819      	ldr	r1, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	461a      	mov	r2, r3
 8002b78:	f7ff f898 	bl	8001cac <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a6c      	ldr	r2, [pc, #432]	; (8002d34 <HAL_ADC_ConfigChannel+0x2d4>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10d      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695a      	ldr	r2, [r3, #20]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	08db      	lsrs	r3, r3, #3
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002ba0:	e032      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ba2:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <HAL_ADC_ConfigChannel+0x2d8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002baa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bae:	d10b      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x168>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	695a      	ldr	r2, [r3, #20]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	089b      	lsrs	r3, r3, #2
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	e01d      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x1a4>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10b      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x18e>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	089b      	lsrs	r3, r3, #2
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	e00a      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x1a4>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	089b      	lsrs	r3, r3, #2
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d048      	beq.n	8002ca2 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6818      	ldr	r0, [r3, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6919      	ldr	r1, [r3, #16]
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c20:	f7fe ff00 	bl	8001a24 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a42      	ldr	r2, [pc, #264]	; (8002d34 <HAL_ADC_ConfigChannel+0x2d4>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d119      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6919      	ldr	r1, [r3, #16]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	f7fe ff98 	bl	8001b70 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6919      	ldr	r1, [r3, #16]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d102      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1f8>
 8002c52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c56:	e000      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x1fa>
 8002c58:	2300      	movs	r3, #0
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f7fe ff66 	bl	8001b2c <LL_ADC_SetOffsetSaturation>
 8002c60:	e1ee      	b.n	8003040 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6919      	ldr	r1, [r3, #16]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d102      	bne.n	8002c7a <HAL_ADC_ConfigChannel+0x21a>
 8002c74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c78:	e000      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x21c>
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f7fe ff33 	bl	8001ae8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6919      	ldr	r1, [r3, #16]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	7e1b      	ldrb	r3, [r3, #24]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d102      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x238>
 8002c92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c96:	e000      	b.n	8002c9a <HAL_ADC_ConfigChannel+0x23a>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f7fe ff0a 	bl	8001ab4 <LL_ADC_SetDataRightShift>
 8002ca0:	e1ce      	b.n	8003040 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a23      	ldr	r2, [pc, #140]	; (8002d34 <HAL_ADC_ConfigChannel+0x2d4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	f040 8181 	bne.w	8002fb0 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe fee7 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x27a>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fe fedc 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	0e9b      	lsrs	r3, r3, #26
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	e01e      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x2b8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2100      	movs	r1, #0
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fe fed1 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002cf0:	fa93 f3a3 	rbit	r3, r3
 8002cf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002cf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002cfc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002d00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	e004      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8002d0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d10:	fab3 f383 	clz	r3, r3
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	461a      	mov	r2, r3
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10b      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x2dc>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	0e9b      	lsrs	r3, r3, #26
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	e01e      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x30e>
 8002d30:	47ff0000 	.word	0x47ff0000
 8002d34:	58026000 	.word	0x58026000
 8002d38:	5c001000 	.word	0x5c001000
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002d50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d54:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002d58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002d60:	2320      	movs	r3, #32
 8002d62:	e004      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002d64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d106      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2200      	movs	r2, #0
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fe ff1a 	bl	8001bb4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fe7e 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10a      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x34c>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe fe73 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002da2:	4603      	mov	r3, r0
 8002da4:	0e9b      	lsrs	r3, r3, #26
 8002da6:	f003 021f 	and.w	r2, r3, #31
 8002daa:	e01e      	b.n	8002dea <HAL_ADC_ConfigChannel+0x38a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2101      	movs	r1, #1
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe fe68 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002dca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002dce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002dd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8002dda:	2320      	movs	r3, #32
 8002ddc:	e004      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8002dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x3a2>
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	0e9b      	lsrs	r3, r3, #26
 8002dfc:	f003 031f 	and.w	r3, r3, #31
 8002e00:	e018      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x3d4>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002e16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e1a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002e1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8002e26:	2320      	movs	r3, #32
 8002e28:	e004      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8002e2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d106      	bne.n	8002e46 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2101      	movs	r1, #1
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fe feb7 	bl	8001bb4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2102      	movs	r1, #2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe fe1b 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x412>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2102      	movs	r1, #2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe fe10 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	0e9b      	lsrs	r3, r3, #26
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	e01e      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x450>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2102      	movs	r1, #2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fe fe05 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e88:	fa93 f3a3 	rbit	r3, r3
 8002e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8002ea0:	2320      	movs	r3, #32
 8002ea2:	e004      	b.n	8002eae <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8002ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ea8:	fab3 f383 	clz	r3, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d105      	bne.n	8002ec8 <HAL_ADC_ConfigChannel+0x468>
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	0e9b      	lsrs	r3, r3, #26
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	e014      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x492>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ece:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ed0:	fa93 f3a3 	rbit	r3, r3
 8002ed4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002ed6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ed8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002edc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002ee4:	2320      	movs	r3, #32
 8002ee6:	e004      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002ee8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d106      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2200      	movs	r2, #0
 8002efc:	2102      	movs	r1, #2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fe58 	bl	8001bb4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2103      	movs	r1, #3
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7fe fdbc 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <HAL_ADC_ConfigChannel+0x4d0>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2103      	movs	r1, #3
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fe fdb1 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002f26:	4603      	mov	r3, r0
 8002f28:	0e9b      	lsrs	r3, r3, #26
 8002f2a:	f003 021f 	and.w	r2, r3, #31
 8002f2e:	e017      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x500>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2103      	movs	r1, #3
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe fda6 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f42:	fa93 f3a3 	rbit	r3, r3
 8002f46:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f4a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8002f52:	2320      	movs	r3, #32
 8002f54:	e003      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8002f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x518>
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	0e9b      	lsrs	r3, r3, #26
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	e011      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x53c>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f88:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002f8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8002f90:	2320      	movs	r3, #32
 8002f92:	e003      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8002f94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f96:	fab3 f383 	clz	r3, r3
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d14f      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	2103      	movs	r1, #3
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe fe03 	bl	8001bb4 <LL_ADC_SetOffsetState>
 8002fae:	e047      	b.n	8003040 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	069b      	lsls	r3, r3, #26
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d107      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002fd2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	069b      	lsls	r3, r3, #26
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d107      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002ff6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ffe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	069b      	lsls	r3, r3, #26
 8003008:	429a      	cmp	r2, r3
 800300a:	d107      	bne.n	800301c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800301a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003022:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	069b      	lsls	r3, r3, #26
 800302c:	429a      	cmp	r2, r3
 800302e:	d107      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800303e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fe ff1b 	bl	8001e80 <LL_ADC_IsEnabled>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	f040 8219 	bne.w	8003484 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6819      	ldr	r1, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	461a      	mov	r2, r3
 8003060:	f7fe fe50 	bl	8001d04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4aa1      	ldr	r2, [pc, #644]	; (80032f0 <HAL_ADC_ConfigChannel+0x890>)
 800306a:	4293      	cmp	r3, r2
 800306c:	f040 812e 	bne.w	80032cc <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x638>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0e9b      	lsrs	r3, r3, #26
 8003086:	3301      	adds	r3, #1
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	2b09      	cmp	r3, #9
 800308e:	bf94      	ite	ls
 8003090:	2301      	movls	r3, #1
 8003092:	2300      	movhi	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e019      	b.n	80030cc <HAL_ADC_ConfigChannel+0x66c>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80030a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80030aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e003      	b.n	80030bc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80030b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	2b09      	cmp	r3, #9
 80030c4:	bf94      	ite	ls
 80030c6:	2301      	movls	r3, #1
 80030c8:	2300      	movhi	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d079      	beq.n	80031c4 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d107      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x68c>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	0e9b      	lsrs	r3, r3, #26
 80030e2:	3301      	adds	r3, #1
 80030e4:	069b      	lsls	r3, r3, #26
 80030e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030ea:	e015      	b.n	8003118 <HAL_ADC_ConfigChannel+0x6b8>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f4:	fa93 f3a3 	rbit	r3, r3
 80030f8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80030fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030fc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80030fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8003104:	2320      	movs	r3, #32
 8003106:	e003      	b.n	8003110 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8003108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800310a:	fab3 f383 	clz	r3, r3
 800310e:	b2db      	uxtb	r3, r3
 8003110:	3301      	adds	r3, #1
 8003112:	069b      	lsls	r3, r3, #26
 8003114:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003120:	2b00      	cmp	r3, #0
 8003122:	d109      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x6d8>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	0e9b      	lsrs	r3, r3, #26
 800312a:	3301      	adds	r3, #1
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	2101      	movs	r1, #1
 8003132:	fa01 f303 	lsl.w	r3, r1, r3
 8003136:	e017      	b.n	8003168 <HAL_ADC_ConfigChannel+0x708>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003148:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800314a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003150:	2320      	movs	r3, #32
 8003152:	e003      	b.n	800315c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8003154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003156:	fab3 f383 	clz	r3, r3
 800315a:	b2db      	uxtb	r3, r3
 800315c:	3301      	adds	r3, #1
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	2101      	movs	r1, #1
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	ea42 0103 	orr.w	r1, r2, r3
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10a      	bne.n	800318e <HAL_ADC_ConfigChannel+0x72e>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0e9b      	lsrs	r3, r3, #26
 800317e:	3301      	adds	r3, #1
 8003180:	f003 021f 	and.w	r2, r3, #31
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	051b      	lsls	r3, r3, #20
 800318c:	e018      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x760>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003196:	fa93 f3a3 	rbit	r3, r3
 800319a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80031a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80031a6:	2320      	movs	r3, #32
 80031a8:	e003      	b.n	80031b2 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80031aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ac:	fab3 f383 	clz	r3, r3
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	3301      	adds	r3, #1
 80031b4:	f003 021f 	and.w	r2, r3, #31
 80031b8:	4613      	mov	r3, r2
 80031ba:	005b      	lsls	r3, r3, #1
 80031bc:	4413      	add	r3, r2
 80031be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031c0:	430b      	orrs	r3, r1
 80031c2:	e07e      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d107      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x780>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	0e9b      	lsrs	r3, r3, #26
 80031d6:	3301      	adds	r3, #1
 80031d8:	069b      	lsls	r3, r3, #26
 80031da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031de:	e015      	b.n	800320c <HAL_ADC_ConfigChannel+0x7ac>
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031e8:	fa93 f3a3 	rbit	r3, r3
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80031f8:	2320      	movs	r3, #32
 80031fa:	e003      	b.n	8003204 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80031fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	3301      	adds	r3, #1
 8003206:	069b      	lsls	r3, r3, #26
 8003208:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003214:	2b00      	cmp	r3, #0
 8003216:	d109      	bne.n	800322c <HAL_ADC_ConfigChannel+0x7cc>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0e9b      	lsrs	r3, r3, #26
 800321e:	3301      	adds	r3, #1
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2101      	movs	r1, #1
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	e017      	b.n	800325c <HAL_ADC_ConfigChannel+0x7fc>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	61bb      	str	r3, [r7, #24]
  return result;
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800323e:	6a3b      	ldr	r3, [r7, #32]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8003244:	2320      	movs	r3, #32
 8003246:	e003      	b.n	8003250 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	3301      	adds	r3, #1
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2101      	movs	r1, #1
 8003258:	fa01 f303 	lsl.w	r3, r1, r3
 800325c:	ea42 0103 	orr.w	r1, r2, r3
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10d      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x828>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0e9b      	lsrs	r3, r3, #26
 8003272:	3301      	adds	r3, #1
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	3b1e      	subs	r3, #30
 8003280:	051b      	lsls	r3, r3, #20
 8003282:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003286:	e01b      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x860>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	60fb      	str	r3, [r7, #12]
  return result;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80032a0:	2320      	movs	r3, #32
 80032a2:	e003      	b.n	80032ac <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	fab3 f383 	clz	r3, r3
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	f003 021f 	and.w	r2, r3, #31
 80032b2:	4613      	mov	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	3b1e      	subs	r3, #30
 80032ba:	051b      	lsls	r3, r3, #20
 80032bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032c0:	430b      	orrs	r3, r1
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	6892      	ldr	r2, [r2, #8]
 80032c6:	4619      	mov	r1, r3
 80032c8:	f7fe fcf0 	bl	8001cac <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f280 80d7 	bge.w	8003484 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a06      	ldr	r2, [pc, #24]	; (80032f4 <HAL_ADC_ConfigChannel+0x894>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d004      	beq.n	80032ea <HAL_ADC_ConfigChannel+0x88a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a04      	ldr	r2, [pc, #16]	; (80032f8 <HAL_ADC_ConfigChannel+0x898>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10a      	bne.n	8003300 <HAL_ADC_ConfigChannel+0x8a0>
 80032ea:	4b04      	ldr	r3, [pc, #16]	; (80032fc <HAL_ADC_ConfigChannel+0x89c>)
 80032ec:	e009      	b.n	8003302 <HAL_ADC_ConfigChannel+0x8a2>
 80032ee:	bf00      	nop
 80032f0:	47ff0000 	.word	0x47ff0000
 80032f4:	40022000 	.word	0x40022000
 80032f8:	40022100 	.word	0x40022100
 80032fc:	40022300 	.word	0x40022300
 8003300:	4b65      	ldr	r3, [pc, #404]	; (8003498 <HAL_ADC_ConfigChannel+0xa38>)
 8003302:	4618      	mov	r0, r3
 8003304:	f7fe fb80 	bl	8001a08 <LL_ADC_GetCommonPathInternalCh>
 8003308:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a62      	ldr	r2, [pc, #392]	; (800349c <HAL_ADC_ConfigChannel+0xa3c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d004      	beq.n	8003320 <HAL_ADC_ConfigChannel+0x8c0>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a61      	ldr	r2, [pc, #388]	; (80034a0 <HAL_ADC_ConfigChannel+0xa40>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d10e      	bne.n	800333e <HAL_ADC_ConfigChannel+0x8de>
 8003320:	485e      	ldr	r0, [pc, #376]	; (800349c <HAL_ADC_ConfigChannel+0xa3c>)
 8003322:	f7fe fdad 	bl	8001e80 <LL_ADC_IsEnabled>
 8003326:	4604      	mov	r4, r0
 8003328:	485d      	ldr	r0, [pc, #372]	; (80034a0 <HAL_ADC_ConfigChannel+0xa40>)
 800332a:	f7fe fda9 	bl	8001e80 <LL_ADC_IsEnabled>
 800332e:	4603      	mov	r3, r0
 8003330:	4323      	orrs	r3, r4
 8003332:	2b00      	cmp	r3, #0
 8003334:	bf0c      	ite	eq
 8003336:	2301      	moveq	r3, #1
 8003338:	2300      	movne	r3, #0
 800333a:	b2db      	uxtb	r3, r3
 800333c:	e008      	b.n	8003350 <HAL_ADC_ConfigChannel+0x8f0>
 800333e:	4859      	ldr	r0, [pc, #356]	; (80034a4 <HAL_ADC_ConfigChannel+0xa44>)
 8003340:	f7fe fd9e 	bl	8001e80 <LL_ADC_IsEnabled>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	bf0c      	ite	eq
 800334a:	2301      	moveq	r3, #1
 800334c:	2300      	movne	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8084 	beq.w	800345e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a53      	ldr	r2, [pc, #332]	; (80034a8 <HAL_ADC_ConfigChannel+0xa48>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d132      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x966>
 8003360:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d12c      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a4c      	ldr	r2, [pc, #304]	; (80034a4 <HAL_ADC_ConfigChannel+0xa44>)
 8003372:	4293      	cmp	r3, r2
 8003374:	f040 8086 	bne.w	8003484 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a47      	ldr	r2, [pc, #284]	; (800349c <HAL_ADC_ConfigChannel+0xa3c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <HAL_ADC_ConfigChannel+0x92c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a46      	ldr	r2, [pc, #280]	; (80034a0 <HAL_ADC_ConfigChannel+0xa40>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d101      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x930>
 800338c:	4a47      	ldr	r2, [pc, #284]	; (80034ac <HAL_ADC_ConfigChannel+0xa4c>)
 800338e:	e000      	b.n	8003392 <HAL_ADC_ConfigChannel+0x932>
 8003390:	4a41      	ldr	r2, [pc, #260]	; (8003498 <HAL_ADC_ConfigChannel+0xa38>)
 8003392:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003396:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800339a:	4619      	mov	r1, r3
 800339c:	4610      	mov	r0, r2
 800339e:	f7fe fb20 	bl	80019e2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033a2:	4b43      	ldr	r3, [pc, #268]	; (80034b0 <HAL_ADC_ConfigChannel+0xa50>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	099b      	lsrs	r3, r3, #6
 80033a8:	4a42      	ldr	r2, [pc, #264]	; (80034b4 <HAL_ADC_ConfigChannel+0xa54>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	3301      	adds	r3, #1
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80033b6:	e002      	b.n	80033be <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1f9      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033c4:	e05e      	b.n	8003484 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a3b      	ldr	r2, [pc, #236]	; (80034b8 <HAL_ADC_ConfigChannel+0xa58>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d120      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x9b2>
 80033d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d11a      	bne.n	8003412 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a30      	ldr	r2, [pc, #192]	; (80034a4 <HAL_ADC_ConfigChannel+0xa44>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d14e      	bne.n	8003484 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a2c      	ldr	r2, [pc, #176]	; (800349c <HAL_ADC_ConfigChannel+0xa3c>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d004      	beq.n	80033fa <HAL_ADC_ConfigChannel+0x99a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a2a      	ldr	r2, [pc, #168]	; (80034a0 <HAL_ADC_ConfigChannel+0xa40>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d101      	bne.n	80033fe <HAL_ADC_ConfigChannel+0x99e>
 80033fa:	4a2c      	ldr	r2, [pc, #176]	; (80034ac <HAL_ADC_ConfigChannel+0xa4c>)
 80033fc:	e000      	b.n	8003400 <HAL_ADC_ConfigChannel+0x9a0>
 80033fe:	4a26      	ldr	r2, [pc, #152]	; (8003498 <HAL_ADC_ConfigChannel+0xa38>)
 8003400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003404:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003408:	4619      	mov	r1, r3
 800340a:	4610      	mov	r0, r2
 800340c:	f7fe fae9 	bl	80019e2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003410:	e038      	b.n	8003484 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a29      	ldr	r2, [pc, #164]	; (80034bc <HAL_ADC_ConfigChannel+0xa5c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d133      	bne.n	8003484 <HAL_ADC_ConfigChannel+0xa24>
 800341c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003420:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d12d      	bne.n	8003484 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <HAL_ADC_ConfigChannel+0xa44>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d128      	bne.n	8003484 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a19      	ldr	r2, [pc, #100]	; (800349c <HAL_ADC_ConfigChannel+0xa3c>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d004      	beq.n	8003446 <HAL_ADC_ConfigChannel+0x9e6>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a17      	ldr	r2, [pc, #92]	; (80034a0 <HAL_ADC_ConfigChannel+0xa40>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d101      	bne.n	800344a <HAL_ADC_ConfigChannel+0x9ea>
 8003446:	4a19      	ldr	r2, [pc, #100]	; (80034ac <HAL_ADC_ConfigChannel+0xa4c>)
 8003448:	e000      	b.n	800344c <HAL_ADC_ConfigChannel+0x9ec>
 800344a:	4a13      	ldr	r2, [pc, #76]	; (8003498 <HAL_ADC_ConfigChannel+0xa38>)
 800344c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003450:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003454:	4619      	mov	r1, r3
 8003456:	4610      	mov	r0, r2
 8003458:	f7fe fac3 	bl	80019e2 <LL_ADC_SetCommonPathInternalCh>
 800345c:	e012      	b.n	8003484 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003462:	f043 0220 	orr.w	r2, r3, #32
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003470:	e008      	b.n	8003484 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003476:	f043 0220 	orr.w	r2, r3, #32
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800348c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003490:	4618      	mov	r0, r3
 8003492:	37e4      	adds	r7, #228	; 0xe4
 8003494:	46bd      	mov	sp, r7
 8003496:	bd90      	pop	{r4, r7, pc}
 8003498:	58026300 	.word	0x58026300
 800349c:	40022000 	.word	0x40022000
 80034a0:	40022100 	.word	0x40022100
 80034a4:	58026000 	.word	0x58026000
 80034a8:	c7520000 	.word	0xc7520000
 80034ac:	40022300 	.word	0x40022300
 80034b0:	2400001c 	.word	0x2400001c
 80034b4:	053e2d63 	.word	0x053e2d63
 80034b8:	c3210000 	.word	0xc3210000
 80034bc:	cb840000 	.word	0xcb840000

080034c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe fcd7 	bl	8001e80 <LL_ADC_IsEnabled>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d16e      	bne.n	80035b6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	4b38      	ldr	r3, [pc, #224]	; (80035c0 <ADC_Enable+0x100>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00d      	beq.n	8003502 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ea:	f043 0210 	orr.w	r2, r3, #16
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f6:	f043 0201 	orr.w	r2, r3, #1
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e05a      	b.n	80035b8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe fca6 	bl	8001e58 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800350c:	f7fe fa36 	bl	800197c <HAL_GetTick>
 8003510:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a2b      	ldr	r2, [pc, #172]	; (80035c4 <ADC_Enable+0x104>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d004      	beq.n	8003526 <ADC_Enable+0x66>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a29      	ldr	r2, [pc, #164]	; (80035c8 <ADC_Enable+0x108>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d101      	bne.n	800352a <ADC_Enable+0x6a>
 8003526:	4b29      	ldr	r3, [pc, #164]	; (80035cc <ADC_Enable+0x10c>)
 8003528:	e000      	b.n	800352c <ADC_Enable+0x6c>
 800352a:	4b29      	ldr	r3, [pc, #164]	; (80035d0 <ADC_Enable+0x110>)
 800352c:	4618      	mov	r0, r3
 800352e:	f7fe fc29 	bl	8001d84 <LL_ADC_GetMultimode>
 8003532:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a23      	ldr	r2, [pc, #140]	; (80035c8 <ADC_Enable+0x108>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d002      	beq.n	8003544 <ADC_Enable+0x84>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	e000      	b.n	8003546 <ADC_Enable+0x86>
 8003544:	4b1f      	ldr	r3, [pc, #124]	; (80035c4 <ADC_Enable+0x104>)
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	4293      	cmp	r3, r2
 800354c:	d02c      	beq.n	80035a8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d130      	bne.n	80035b6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003554:	e028      	b.n	80035a8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe fc90 	bl	8001e80 <LL_ADC_IsEnabled>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d104      	bne.n	8003570 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe fc74 	bl	8001e58 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003570:	f7fe fa04 	bl	800197c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d914      	bls.n	80035a8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d00d      	beq.n	80035a8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003590:	f043 0210 	orr.w	r2, r3, #16
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800359c:	f043 0201 	orr.w	r2, r3, #1
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e007      	b.n	80035b8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d1cf      	bne.n	8003556 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	8000003f 	.word	0x8000003f
 80035c4:	40022000 	.word	0x40022000
 80035c8:	40022100 	.word	0x40022100
 80035cc:	40022300 	.word	0x40022300
 80035d0:	58026300 	.word	0x58026300

080035d4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a6c      	ldr	r2, [pc, #432]	; (8003794 <ADC_ConfigureBoostMode+0x1c0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d004      	beq.n	80035f0 <ADC_ConfigureBoostMode+0x1c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a6b      	ldr	r2, [pc, #428]	; (8003798 <ADC_ConfigureBoostMode+0x1c4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d109      	bne.n	8003604 <ADC_ConfigureBoostMode+0x30>
 80035f0:	4b6a      	ldr	r3, [pc, #424]	; (800379c <ADC_ConfigureBoostMode+0x1c8>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf14      	ite	ne
 80035fc:	2301      	movne	r3, #1
 80035fe:	2300      	moveq	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	e008      	b.n	8003616 <ADC_ConfigureBoostMode+0x42>
 8003604:	4b66      	ldr	r3, [pc, #408]	; (80037a0 <ADC_ConfigureBoostMode+0x1cc>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf14      	ite	ne
 8003610:	2301      	movne	r3, #1
 8003612:	2300      	moveq	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d01c      	beq.n	8003654 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800361a:	f004 fb2f 	bl	8007c7c <HAL_RCC_GetHCLKFreq>
 800361e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003628:	d010      	beq.n	800364c <ADC_ConfigureBoostMode+0x78>
 800362a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800362e:	d873      	bhi.n	8003718 <ADC_ConfigureBoostMode+0x144>
 8003630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003634:	d002      	beq.n	800363c <ADC_ConfigureBoostMode+0x68>
 8003636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800363a:	d16d      	bne.n	8003718 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	60fb      	str	r3, [r7, #12]
        break;
 800364a:	e068      	b.n	800371e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	089b      	lsrs	r3, r3, #2
 8003650:	60fb      	str	r3, [r7, #12]
        break;
 8003652:	e064      	b.n	800371e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003654:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003658:	f04f 0100 	mov.w	r1, #0
 800365c:	f005 fd0a 	bl	8009074 <HAL_RCCEx_GetPeriphCLKFreq>
 8003660:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800366a:	d051      	beq.n	8003710 <ADC_ConfigureBoostMode+0x13c>
 800366c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003670:	d854      	bhi.n	800371c <ADC_ConfigureBoostMode+0x148>
 8003672:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003676:	d047      	beq.n	8003708 <ADC_ConfigureBoostMode+0x134>
 8003678:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800367c:	d84e      	bhi.n	800371c <ADC_ConfigureBoostMode+0x148>
 800367e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003682:	d03d      	beq.n	8003700 <ADC_ConfigureBoostMode+0x12c>
 8003684:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003688:	d848      	bhi.n	800371c <ADC_ConfigureBoostMode+0x148>
 800368a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800368e:	d033      	beq.n	80036f8 <ADC_ConfigureBoostMode+0x124>
 8003690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003694:	d842      	bhi.n	800371c <ADC_ConfigureBoostMode+0x148>
 8003696:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800369a:	d029      	beq.n	80036f0 <ADC_ConfigureBoostMode+0x11c>
 800369c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80036a0:	d83c      	bhi.n	800371c <ADC_ConfigureBoostMode+0x148>
 80036a2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80036a6:	d01a      	beq.n	80036de <ADC_ConfigureBoostMode+0x10a>
 80036a8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80036ac:	d836      	bhi.n	800371c <ADC_ConfigureBoostMode+0x148>
 80036ae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80036b2:	d014      	beq.n	80036de <ADC_ConfigureBoostMode+0x10a>
 80036b4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80036b8:	d830      	bhi.n	800371c <ADC_ConfigureBoostMode+0x148>
 80036ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036be:	d00e      	beq.n	80036de <ADC_ConfigureBoostMode+0x10a>
 80036c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036c4:	d82a      	bhi.n	800371c <ADC_ConfigureBoostMode+0x148>
 80036c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036ca:	d008      	beq.n	80036de <ADC_ConfigureBoostMode+0x10a>
 80036cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036d0:	d824      	bhi.n	800371c <ADC_ConfigureBoostMode+0x148>
 80036d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036d6:	d002      	beq.n	80036de <ADC_ConfigureBoostMode+0x10a>
 80036d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036dc:	d11e      	bne.n	800371c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	0c9b      	lsrs	r3, r3, #18
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ec:	60fb      	str	r3, [r7, #12]
        break;
 80036ee:	e016      	b.n	800371e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	60fb      	str	r3, [r7, #12]
        break;
 80036f6:	e012      	b.n	800371e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	60fb      	str	r3, [r7, #12]
        break;
 80036fe:	e00e      	b.n	800371e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	099b      	lsrs	r3, r3, #6
 8003704:	60fb      	str	r3, [r7, #12]
        break;
 8003706:	e00a      	b.n	800371e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	09db      	lsrs	r3, r3, #7
 800370c:	60fb      	str	r3, [r7, #12]
        break;
 800370e:	e006      	b.n	800371e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	60fb      	str	r3, [r7, #12]
        break;
 8003716:	e002      	b.n	800371e <ADC_ConfigureBoostMode+0x14a>
        break;
 8003718:	bf00      	nop
 800371a:	e000      	b.n	800371e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800371c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	085b      	lsrs	r3, r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a1f      	ldr	r2, [pc, #124]	; (80037a4 <ADC_ConfigureBoostMode+0x1d0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d808      	bhi.n	800373e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689a      	ldr	r2, [r3, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800373a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800373c:	e025      	b.n	800378a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4a19      	ldr	r2, [pc, #100]	; (80037a8 <ADC_ConfigureBoostMode+0x1d4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d80a      	bhi.n	800375c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003758:	609a      	str	r2, [r3, #8]
}
 800375a:	e016      	b.n	800378a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a13      	ldr	r2, [pc, #76]	; (80037ac <ADC_ConfigureBoostMode+0x1d8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d80a      	bhi.n	800377a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003776:	609a      	str	r2, [r3, #8]
}
 8003778:	e007      	b.n	800378a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003788:	609a      	str	r2, [r3, #8]
}
 800378a:	bf00      	nop
 800378c:	3710      	adds	r7, #16
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40022000 	.word	0x40022000
 8003798:	40022100 	.word	0x40022100
 800379c:	40022300 	.word	0x40022300
 80037a0:	58026300 	.word	0x58026300
 80037a4:	005f5e10 	.word	0x005f5e10
 80037a8:	00bebc20 	.word	0x00bebc20
 80037ac:	017d7840 	.word	0x017d7840

080037b0 <LL_ADC_IsEnabled>:
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <LL_ADC_IsEnabled+0x18>
 80037c4:	2301      	movs	r3, #1
 80037c6:	e000      	b.n	80037ca <LL_ADC_IsEnabled+0x1a>
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d101      	bne.n	80037ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003860:	b590      	push	{r4, r7, lr}
 8003862:	b0a3      	sub	sp, #140	; 0x8c
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003876:	2b01      	cmp	r3, #1
 8003878:	d101      	bne.n	800387e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800387a:	2302      	movs	r3, #2
 800387c:	e0c1      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800388a:	2300      	movs	r3, #0
 800388c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a5e      	ldr	r2, [pc, #376]	; (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d102      	bne.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003898:	4b5d      	ldr	r3, [pc, #372]	; (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e001      	b.n	80038a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ac:	f043 0220 	orr.w	r2, r3, #32
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0a0      	b.n	8003a02 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff ff87 	bl	80037d6 <LL_ADC_REG_IsConversionOngoing>
 80038c8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff80 	bl	80037d6 <LL_ADC_REG_IsConversionOngoing>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f040 8081 	bne.w	80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80038de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d17c      	bne.n	80039e0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a48      	ldr	r2, [pc, #288]	; (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d004      	beq.n	80038fa <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a46      	ldr	r2, [pc, #280]	; (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d101      	bne.n	80038fe <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80038fa:	4b46      	ldr	r3, [pc, #280]	; (8003a14 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80038fc:	e000      	b.n	8003900 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80038fe:	4b46      	ldr	r3, [pc, #280]	; (8003a18 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003900:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d039      	beq.n	800397e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800390a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	431a      	orrs	r2, r3
 8003918:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800391a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a3a      	ldr	r2, [pc, #232]	; (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d004      	beq.n	8003930 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a39      	ldr	r2, [pc, #228]	; (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d10e      	bne.n	800394e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003930:	4836      	ldr	r0, [pc, #216]	; (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003932:	f7ff ff3d 	bl	80037b0 <LL_ADC_IsEnabled>
 8003936:	4604      	mov	r4, r0
 8003938:	4835      	ldr	r0, [pc, #212]	; (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800393a:	f7ff ff39 	bl	80037b0 <LL_ADC_IsEnabled>
 800393e:	4603      	mov	r3, r0
 8003940:	4323      	orrs	r3, r4
 8003942:	2b00      	cmp	r3, #0
 8003944:	bf0c      	ite	eq
 8003946:	2301      	moveq	r3, #1
 8003948:	2300      	movne	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	e008      	b.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800394e:	4833      	ldr	r0, [pc, #204]	; (8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003950:	f7ff ff2e 	bl	80037b0 <LL_ADC_IsEnabled>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	bf0c      	ite	eq
 800395a:	2301      	moveq	r3, #1
 800395c:	2300      	movne	r3, #0
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	d047      	beq.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003964:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	4b2d      	ldr	r3, [pc, #180]	; (8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800396a:	4013      	ands	r3, r2
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	6811      	ldr	r1, [r2, #0]
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	6892      	ldr	r2, [r2, #8]
 8003974:	430a      	orrs	r2, r1
 8003976:	431a      	orrs	r2, r3
 8003978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800397a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800397c:	e03a      	b.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800397e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003986:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003988:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a1f      	ldr	r2, [pc, #124]	; (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d004      	beq.n	800399e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a1d      	ldr	r2, [pc, #116]	; (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d10e      	bne.n	80039bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800399e:	481b      	ldr	r0, [pc, #108]	; (8003a0c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80039a0:	f7ff ff06 	bl	80037b0 <LL_ADC_IsEnabled>
 80039a4:	4604      	mov	r4, r0
 80039a6:	481a      	ldr	r0, [pc, #104]	; (8003a10 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80039a8:	f7ff ff02 	bl	80037b0 <LL_ADC_IsEnabled>
 80039ac:	4603      	mov	r3, r0
 80039ae:	4323      	orrs	r3, r4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf0c      	ite	eq
 80039b4:	2301      	moveq	r3, #1
 80039b6:	2300      	movne	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	e008      	b.n	80039ce <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80039bc:	4817      	ldr	r0, [pc, #92]	; (8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80039be:	f7ff fef7 	bl	80037b0 <LL_ADC_IsEnabled>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	bf0c      	ite	eq
 80039c8:	2301      	moveq	r3, #1
 80039ca:	2300      	movne	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d010      	beq.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80039d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	4b12      	ldr	r3, [pc, #72]	; (8003a20 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80039d8:	4013      	ands	r3, r2
 80039da:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80039dc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039de:	e009      	b.n	80039f4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e4:	f043 0220 	orr.w	r2, r3, #32
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80039f2:	e000      	b.n	80039f6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80039fe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	378c      	adds	r7, #140	; 0x8c
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd90      	pop	{r4, r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40022000 	.word	0x40022000
 8003a10:	40022100 	.word	0x40022100
 8003a14:	40022300 	.word	0x40022300
 8003a18:	58026300 	.word	0x58026300
 8003a1c:	58026000 	.word	0x58026000
 8003a20:	fffff0e0 	.word	0xfffff0e0

08003a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <__NVIC_SetPriorityGrouping+0x40>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a40:	4013      	ands	r3, r2
 8003a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <__NVIC_SetPriorityGrouping+0x44>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a52:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <__NVIC_SetPriorityGrouping+0x40>)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	60d3      	str	r3, [r2, #12]
}
 8003a58:	bf00      	nop
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000ed00 	.word	0xe000ed00
 8003a68:	05fa0000 	.word	0x05fa0000

08003a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a70:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <__NVIC_GetPriorityGrouping+0x18>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	f003 0307 	and.w	r3, r3, #7
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	e000ed00 	.word	0xe000ed00

08003a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	db0b      	blt.n	8003ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	f003 021f 	and.w	r2, r3, #31
 8003aa0:	4907      	ldr	r1, [pc, #28]	; (8003ac0 <__NVIC_EnableIRQ+0x38>)
 8003aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003aa6:	095b      	lsrs	r3, r3, #5
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8003aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	e000e100 	.word	0xe000e100

08003ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	6039      	str	r1, [r7, #0]
 8003ace:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	db0a      	blt.n	8003aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	490c      	ldr	r1, [pc, #48]	; (8003b10 <__NVIC_SetPriority+0x4c>)
 8003ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ae2:	0112      	lsls	r2, r2, #4
 8003ae4:	b2d2      	uxtb	r2, r2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003aec:	e00a      	b.n	8003b04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	4908      	ldr	r1, [pc, #32]	; (8003b14 <__NVIC_SetPriority+0x50>)
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	3b04      	subs	r3, #4
 8003afc:	0112      	lsls	r2, r2, #4
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	440b      	add	r3, r1
 8003b02:	761a      	strb	r2, [r3, #24]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr
 8003b10:	e000e100 	.word	0xe000e100
 8003b14:	e000ed00 	.word	0xe000ed00

08003b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b089      	sub	sp, #36	; 0x24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	f1c3 0307 	rsb	r3, r3, #7
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	bf28      	it	cs
 8003b36:	2304      	movcs	r3, #4
 8003b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3304      	adds	r3, #4
 8003b3e:	2b06      	cmp	r3, #6
 8003b40:	d902      	bls.n	8003b48 <NVIC_EncodePriority+0x30>
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	3b03      	subs	r3, #3
 8003b46:	e000      	b.n	8003b4a <NVIC_EncodePriority+0x32>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43da      	mvns	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	401a      	ands	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	43d9      	mvns	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b70:	4313      	orrs	r3, r2
         );
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3724      	adds	r7, #36	; 0x24
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
	...

08003b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b90:	d301      	bcc.n	8003b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b92:	2301      	movs	r3, #1
 8003b94:	e00f      	b.n	8003bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b96:	4a0a      	ldr	r2, [pc, #40]	; (8003bc0 <SysTick_Config+0x40>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b9e:	210f      	movs	r1, #15
 8003ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ba4:	f7ff ff8e 	bl	8003ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <SysTick_Config+0x40>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bae:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <SysTick_Config+0x40>)
 8003bb0:	2207      	movs	r2, #7
 8003bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	e000e010 	.word	0xe000e010

08003bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff ff29 	bl	8003a24 <__NVIC_SetPriorityGrouping>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b086      	sub	sp, #24
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	4603      	mov	r3, r0
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003be8:	f7ff ff40 	bl	8003a6c <__NVIC_GetPriorityGrouping>
 8003bec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	6978      	ldr	r0, [r7, #20]
 8003bf4:	f7ff ff90 	bl	8003b18 <NVIC_EncodePriority>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003bfe:	4611      	mov	r1, r2
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff ff5f 	bl	8003ac4 <__NVIC_SetPriority>
}
 8003c06:	bf00      	nop
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}

08003c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b082      	sub	sp, #8
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	4603      	mov	r3, r0
 8003c16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff ff33 	bl	8003a88 <__NVIC_EnableIRQ>
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff ffa4 	bl	8003b80 <SysTick_Config>
 8003c38:	4603      	mov	r3, r0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d101      	bne.n	8003c56 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e237      	b.n	80040c6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d004      	beq.n	8003c6c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2280      	movs	r2, #128	; 0x80
 8003c66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e22c      	b.n	80040c6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a5c      	ldr	r2, [pc, #368]	; (8003de4 <HAL_DMA_Abort_IT+0x1a0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d04a      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xc8>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a5b      	ldr	r2, [pc, #364]	; (8003de8 <HAL_DMA_Abort_IT+0x1a4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d045      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xc8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a59      	ldr	r2, [pc, #356]	; (8003dec <HAL_DMA_Abort_IT+0x1a8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d040      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xc8>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a58      	ldr	r2, [pc, #352]	; (8003df0 <HAL_DMA_Abort_IT+0x1ac>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d03b      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xc8>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a56      	ldr	r2, [pc, #344]	; (8003df4 <HAL_DMA_Abort_IT+0x1b0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d036      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xc8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a55      	ldr	r2, [pc, #340]	; (8003df8 <HAL_DMA_Abort_IT+0x1b4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d031      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xc8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a53      	ldr	r2, [pc, #332]	; (8003dfc <HAL_DMA_Abort_IT+0x1b8>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d02c      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xc8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a52      	ldr	r2, [pc, #328]	; (8003e00 <HAL_DMA_Abort_IT+0x1bc>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d027      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xc8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a50      	ldr	r2, [pc, #320]	; (8003e04 <HAL_DMA_Abort_IT+0x1c0>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d022      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xc8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a4f      	ldr	r2, [pc, #316]	; (8003e08 <HAL_DMA_Abort_IT+0x1c4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d01d      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xc8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a4d      	ldr	r2, [pc, #308]	; (8003e0c <HAL_DMA_Abort_IT+0x1c8>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d018      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xc8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a4c      	ldr	r2, [pc, #304]	; (8003e10 <HAL_DMA_Abort_IT+0x1cc>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d013      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xc8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a4a      	ldr	r2, [pc, #296]	; (8003e14 <HAL_DMA_Abort_IT+0x1d0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00e      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xc8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a49      	ldr	r2, [pc, #292]	; (8003e18 <HAL_DMA_Abort_IT+0x1d4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d009      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xc8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a47      	ldr	r2, [pc, #284]	; (8003e1c <HAL_DMA_Abort_IT+0x1d8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <HAL_DMA_Abort_IT+0xc8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a46      	ldr	r2, [pc, #280]	; (8003e20 <HAL_DMA_Abort_IT+0x1dc>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d101      	bne.n	8003d10 <HAL_DMA_Abort_IT+0xcc>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <HAL_DMA_Abort_IT+0xce>
 8003d10:	2300      	movs	r3, #0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 8086 	beq.w	8003e24 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a2f      	ldr	r2, [pc, #188]	; (8003de4 <HAL_DMA_Abort_IT+0x1a0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d04a      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x17c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a2e      	ldr	r2, [pc, #184]	; (8003de8 <HAL_DMA_Abort_IT+0x1a4>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d045      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x17c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a2c      	ldr	r2, [pc, #176]	; (8003dec <HAL_DMA_Abort_IT+0x1a8>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d040      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x17c>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a2b      	ldr	r2, [pc, #172]	; (8003df0 <HAL_DMA_Abort_IT+0x1ac>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d03b      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x17c>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a29      	ldr	r2, [pc, #164]	; (8003df4 <HAL_DMA_Abort_IT+0x1b0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d036      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x17c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a28      	ldr	r2, [pc, #160]	; (8003df8 <HAL_DMA_Abort_IT+0x1b4>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d031      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x17c>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a26      	ldr	r2, [pc, #152]	; (8003dfc <HAL_DMA_Abort_IT+0x1b8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d02c      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x17c>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <HAL_DMA_Abort_IT+0x1bc>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d027      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x17c>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a23      	ldr	r2, [pc, #140]	; (8003e04 <HAL_DMA_Abort_IT+0x1c0>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d022      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x17c>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <HAL_DMA_Abort_IT+0x1c4>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d01d      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x17c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a20      	ldr	r2, [pc, #128]	; (8003e0c <HAL_DMA_Abort_IT+0x1c8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d018      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x17c>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <HAL_DMA_Abort_IT+0x1cc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d013      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x17c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <HAL_DMA_Abort_IT+0x1d0>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00e      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x17c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a1c      	ldr	r2, [pc, #112]	; (8003e18 <HAL_DMA_Abort_IT+0x1d4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d009      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x17c>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a1a      	ldr	r2, [pc, #104]	; (8003e1c <HAL_DMA_Abort_IT+0x1d8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d004      	beq.n	8003dc0 <HAL_DMA_Abort_IT+0x17c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a19      	ldr	r2, [pc, #100]	; (8003e20 <HAL_DMA_Abort_IT+0x1dc>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d108      	bne.n	8003dd2 <HAL_DMA_Abort_IT+0x18e>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f022 0201 	bic.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e178      	b.n	80040c4 <HAL_DMA_Abort_IT+0x480>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0201 	bic.w	r2, r2, #1
 8003de0:	601a      	str	r2, [r3, #0]
 8003de2:	e16f      	b.n	80040c4 <HAL_DMA_Abort_IT+0x480>
 8003de4:	40020010 	.word	0x40020010
 8003de8:	40020028 	.word	0x40020028
 8003dec:	40020040 	.word	0x40020040
 8003df0:	40020058 	.word	0x40020058
 8003df4:	40020070 	.word	0x40020070
 8003df8:	40020088 	.word	0x40020088
 8003dfc:	400200a0 	.word	0x400200a0
 8003e00:	400200b8 	.word	0x400200b8
 8003e04:	40020410 	.word	0x40020410
 8003e08:	40020428 	.word	0x40020428
 8003e0c:	40020440 	.word	0x40020440
 8003e10:	40020458 	.word	0x40020458
 8003e14:	40020470 	.word	0x40020470
 8003e18:	40020488 	.word	0x40020488
 8003e1c:	400204a0 	.word	0x400204a0
 8003e20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 020e 	bic.w	r2, r2, #14
 8003e32:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6c      	ldr	r2, [pc, #432]	; (8003fec <HAL_DMA_Abort_IT+0x3a8>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d04a      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x290>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6b      	ldr	r2, [pc, #428]	; (8003ff0 <HAL_DMA_Abort_IT+0x3ac>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d045      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x290>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a69      	ldr	r2, [pc, #420]	; (8003ff4 <HAL_DMA_Abort_IT+0x3b0>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d040      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x290>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a68      	ldr	r2, [pc, #416]	; (8003ff8 <HAL_DMA_Abort_IT+0x3b4>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d03b      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x290>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a66      	ldr	r2, [pc, #408]	; (8003ffc <HAL_DMA_Abort_IT+0x3b8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d036      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x290>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a65      	ldr	r2, [pc, #404]	; (8004000 <HAL_DMA_Abort_IT+0x3bc>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d031      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x290>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a63      	ldr	r2, [pc, #396]	; (8004004 <HAL_DMA_Abort_IT+0x3c0>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d02c      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x290>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a62      	ldr	r2, [pc, #392]	; (8004008 <HAL_DMA_Abort_IT+0x3c4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d027      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x290>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a60      	ldr	r2, [pc, #384]	; (800400c <HAL_DMA_Abort_IT+0x3c8>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d022      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x290>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a5f      	ldr	r2, [pc, #380]	; (8004010 <HAL_DMA_Abort_IT+0x3cc>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d01d      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x290>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a5d      	ldr	r2, [pc, #372]	; (8004014 <HAL_DMA_Abort_IT+0x3d0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d018      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x290>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a5c      	ldr	r2, [pc, #368]	; (8004018 <HAL_DMA_Abort_IT+0x3d4>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d013      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x290>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a5a      	ldr	r2, [pc, #360]	; (800401c <HAL_DMA_Abort_IT+0x3d8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d00e      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x290>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a59      	ldr	r2, [pc, #356]	; (8004020 <HAL_DMA_Abort_IT+0x3dc>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d009      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x290>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a57      	ldr	r2, [pc, #348]	; (8004024 <HAL_DMA_Abort_IT+0x3e0>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_DMA_Abort_IT+0x290>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a56      	ldr	r2, [pc, #344]	; (8004028 <HAL_DMA_Abort_IT+0x3e4>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d108      	bne.n	8003ee6 <HAL_DMA_Abort_IT+0x2a2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0201 	bic.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	e007      	b.n	8003ef6 <HAL_DMA_Abort_IT+0x2b2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a3c      	ldr	r2, [pc, #240]	; (8003fec <HAL_DMA_Abort_IT+0x3a8>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d072      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a3a      	ldr	r2, [pc, #232]	; (8003ff0 <HAL_DMA_Abort_IT+0x3ac>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d06d      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a39      	ldr	r2, [pc, #228]	; (8003ff4 <HAL_DMA_Abort_IT+0x3b0>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d068      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a37      	ldr	r2, [pc, #220]	; (8003ff8 <HAL_DMA_Abort_IT+0x3b4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d063      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a36      	ldr	r2, [pc, #216]	; (8003ffc <HAL_DMA_Abort_IT+0x3b8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d05e      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a34      	ldr	r2, [pc, #208]	; (8004000 <HAL_DMA_Abort_IT+0x3bc>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d059      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a33      	ldr	r2, [pc, #204]	; (8004004 <HAL_DMA_Abort_IT+0x3c0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d054      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a31      	ldr	r2, [pc, #196]	; (8004008 <HAL_DMA_Abort_IT+0x3c4>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d04f      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a30      	ldr	r2, [pc, #192]	; (800400c <HAL_DMA_Abort_IT+0x3c8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d04a      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2e      	ldr	r2, [pc, #184]	; (8004010 <HAL_DMA_Abort_IT+0x3cc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d045      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a2d      	ldr	r2, [pc, #180]	; (8004014 <HAL_DMA_Abort_IT+0x3d0>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d040      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a2b      	ldr	r2, [pc, #172]	; (8004018 <HAL_DMA_Abort_IT+0x3d4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d03b      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a2a      	ldr	r2, [pc, #168]	; (800401c <HAL_DMA_Abort_IT+0x3d8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d036      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a28      	ldr	r2, [pc, #160]	; (8004020 <HAL_DMA_Abort_IT+0x3dc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d031      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a27      	ldr	r2, [pc, #156]	; (8004024 <HAL_DMA_Abort_IT+0x3e0>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d02c      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a25      	ldr	r2, [pc, #148]	; (8004028 <HAL_DMA_Abort_IT+0x3e4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d027      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a24      	ldr	r2, [pc, #144]	; (800402c <HAL_DMA_Abort_IT+0x3e8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d022      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a22      	ldr	r2, [pc, #136]	; (8004030 <HAL_DMA_Abort_IT+0x3ec>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01d      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a21      	ldr	r2, [pc, #132]	; (8004034 <HAL_DMA_Abort_IT+0x3f0>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d018      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <HAL_DMA_Abort_IT+0x3f4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d013      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1e      	ldr	r2, [pc, #120]	; (800403c <HAL_DMA_Abort_IT+0x3f8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00e      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <HAL_DMA_Abort_IT+0x3fc>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d009      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1b      	ldr	r2, [pc, #108]	; (8004044 <HAL_DMA_Abort_IT+0x400>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d004      	beq.n	8003fe6 <HAL_DMA_Abort_IT+0x3a2>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_DMA_Abort_IT+0x404>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d132      	bne.n	800404c <HAL_DMA_Abort_IT+0x408>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e031      	b.n	800404e <HAL_DMA_Abort_IT+0x40a>
 8003fea:	bf00      	nop
 8003fec:	40020010 	.word	0x40020010
 8003ff0:	40020028 	.word	0x40020028
 8003ff4:	40020040 	.word	0x40020040
 8003ff8:	40020058 	.word	0x40020058
 8003ffc:	40020070 	.word	0x40020070
 8004000:	40020088 	.word	0x40020088
 8004004:	400200a0 	.word	0x400200a0
 8004008:	400200b8 	.word	0x400200b8
 800400c:	40020410 	.word	0x40020410
 8004010:	40020428 	.word	0x40020428
 8004014:	40020440 	.word	0x40020440
 8004018:	40020458 	.word	0x40020458
 800401c:	40020470 	.word	0x40020470
 8004020:	40020488 	.word	0x40020488
 8004024:	400204a0 	.word	0x400204a0
 8004028:	400204b8 	.word	0x400204b8
 800402c:	58025408 	.word	0x58025408
 8004030:	5802541c 	.word	0x5802541c
 8004034:	58025430 	.word	0x58025430
 8004038:	58025444 	.word	0x58025444
 800403c:	58025458 	.word	0x58025458
 8004040:	5802546c 	.word	0x5802546c
 8004044:	58025480 	.word	0x58025480
 8004048:	58025494 	.word	0x58025494
 800404c:	2300      	movs	r3, #0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d028      	beq.n	80040a4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004060:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004066:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	2201      	movs	r2, #1
 8004072:	409a      	lsls	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004080:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00c      	beq.n	80040a4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004098:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop

080040d0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040de:	b2db      	uxtb	r3, r3
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e0e3      	b.n	80042c6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004104:	2b00      	cmp	r3, #0
 8004106:	d106      	bne.n	8004116 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2223      	movs	r2, #35	; 0x23
 800410c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7fd f891 	bl	8001238 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004116:	4b6e      	ldr	r3, [pc, #440]	; (80042d0 <HAL_ETH_Init+0x1e4>)
 8004118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800411c:	4a6c      	ldr	r2, [pc, #432]	; (80042d0 <HAL_ETH_Init+0x1e4>)
 800411e:	f043 0302 	orr.w	r3, r3, #2
 8004122:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004126:	4b6a      	ldr	r3, [pc, #424]	; (80042d0 <HAL_ETH_Init+0x1e4>)
 8004128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	60bb      	str	r3, [r7, #8]
 8004132:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	7a1b      	ldrb	r3, [r3, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d103      	bne.n	8004144 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800413c:	2000      	movs	r0, #0
 800413e:	f7fd fc29 	bl	8001994 <HAL_SYSCFG_ETHInterfaceSelect>
 8004142:	e003      	b.n	800414c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004144:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004148:	f7fd fc24 	bl	8001994 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800414c:	4b61      	ldr	r3, [pc, #388]	; (80042d4 <HAL_ETH_Init+0x1e8>)
 800414e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	f043 0301 	orr.w	r3, r3, #1
 8004162:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004166:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004168:	f7fd fc08 	bl	800197c <HAL_GetTick>
 800416c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800416e:	e011      	b.n	8004194 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004170:	f7fd fc04 	bl	800197c <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800417e:	d909      	bls.n	8004194 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2204      	movs	r2, #4
 8004184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	22e0      	movs	r2, #224	; 0xe0
 800418c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e098      	b.n	80042c6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e4      	bne.n	8004170 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f89e 	bl	80042e8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80041ac:	f003 fd66 	bl	8007c7c <HAL_RCC_GetHCLKFreq>
 80041b0:	4603      	mov	r3, r0
 80041b2:	4a49      	ldr	r2, [pc, #292]	; (80042d8 <HAL_ETH_Init+0x1ec>)
 80041b4:	fba2 2303 	umull	r2, r3, r2, r3
 80041b8:	0c9a      	lsrs	r2, r3, #18
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3a01      	subs	r2, #1
 80041c0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fa81 	bl	80046cc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80041d6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041e6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d009      	beq.n	800420a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	22e0      	movs	r2, #224	; 0xe0
 8004202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e05d      	b.n	80042c6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004212:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004216:	4b31      	ldr	r3, [pc, #196]	; (80042dc <HAL_ETH_Init+0x1f0>)
 8004218:	4013      	ands	r3, r2
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6952      	ldr	r2, [r2, #20]
 800421e:	0051      	lsls	r1, r2, #1
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	430b      	orrs	r3, r1
 8004226:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800422a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fae9 	bl	8004806 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fb2f 	bl	8004898 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	3305      	adds	r3, #5
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	021a      	lsls	r2, r3, #8
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	4619      	mov	r1, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	3303      	adds	r3, #3
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	061a      	lsls	r2, r3, #24
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	3302      	adds	r3, #2
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	041b      	lsls	r3, r3, #16
 800426c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	3301      	adds	r3, #1
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004278:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004286:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004288:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	4b11      	ldr	r3, [pc, #68]	; (80042e0 <HAL_ETH_Init+0x1f4>)
 800429a:	430b      	orrs	r3, r1
 800429c:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <HAL_ETH_Init+0x1f8>)
 80042ae:	430b      	orrs	r3, r1
 80042b0:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2210      	movs	r2, #16
 80042c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	58024400 	.word	0x58024400
 80042d4:	58000400 	.word	0x58000400
 80042d8:	431bde83 	.word	0x431bde83
 80042dc:	ffff8001 	.word	0xffff8001
 80042e0:	0c020060 	.word	0x0c020060
 80042e4:	0c20c000 	.word	0x0c20c000

080042e8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80042f8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004300:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004302:	f003 fcbb 	bl	8007c7c <HAL_RCC_GetHCLKFreq>
 8004306:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	4a1a      	ldr	r2, [pc, #104]	; (8004374 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d804      	bhi.n	800431a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	e022      	b.n	8004360 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	4a16      	ldr	r2, [pc, #88]	; (8004378 <HAL_ETH_SetMDIOClockRange+0x90>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d204      	bcs.n	800432c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	e019      	b.n	8004360 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4a13      	ldr	r2, [pc, #76]	; (800437c <HAL_ETH_SetMDIOClockRange+0x94>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d915      	bls.n	8004360 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4a12      	ldr	r2, [pc, #72]	; (8004380 <HAL_ETH_SetMDIOClockRange+0x98>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d804      	bhi.n	8004346 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e00c      	b.n	8004360 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	4a0e      	ldr	r2, [pc, #56]	; (8004384 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d804      	bhi.n	8004358 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	e003      	b.n	8004360 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800435e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800436a:	bf00      	nop
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	02160ebf 	.word	0x02160ebf
 8004378:	03938700 	.word	0x03938700
 800437c:	05f5e0ff 	.word	0x05f5e0ff
 8004380:	08f0d17f 	.word	0x08f0d17f
 8004384:	0ee6b27f 	.word	0x0ee6b27f

08004388 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800439a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	791b      	ldrb	r3, [r3, #4]
 80043a0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80043a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	7b1b      	ldrb	r3, [r3, #12]
 80043a8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80043aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	7b5b      	ldrb	r3, [r3, #13]
 80043b0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80043b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	7b9b      	ldrb	r3, [r3, #14]
 80043b8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80043ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	7bdb      	ldrb	r3, [r3, #15]
 80043c0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80043c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	7c12      	ldrb	r2, [r2, #16]
 80043c8:	2a00      	cmp	r2, #0
 80043ca:	d102      	bne.n	80043d2 <ETH_SetMACConfig+0x4a>
 80043cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80043d0:	e000      	b.n	80043d4 <ETH_SetMACConfig+0x4c>
 80043d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80043d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	7c52      	ldrb	r2, [r2, #17]
 80043da:	2a00      	cmp	r2, #0
 80043dc:	d102      	bne.n	80043e4 <ETH_SetMACConfig+0x5c>
 80043de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80043e2:	e000      	b.n	80043e6 <ETH_SetMACConfig+0x5e>
 80043e4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80043e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	7c9b      	ldrb	r3, [r3, #18]
 80043ec:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80043ee:	431a      	orrs	r2, r3
               macconf->Speed |
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80043f4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80043fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	7f1b      	ldrb	r3, [r3, #28]
 8004400:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004402:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	7f5b      	ldrb	r3, [r3, #29]
 8004408:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800440a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	7f92      	ldrb	r2, [r2, #30]
 8004410:	2a00      	cmp	r2, #0
 8004412:	d102      	bne.n	800441a <ETH_SetMACConfig+0x92>
 8004414:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004418:	e000      	b.n	800441c <ETH_SetMACConfig+0x94>
 800441a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800441c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	7fdb      	ldrb	r3, [r3, #31]
 8004422:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004424:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	f892 2020 	ldrb.w	r2, [r2, #32]
 800442c:	2a00      	cmp	r2, #0
 800442e:	d102      	bne.n	8004436 <ETH_SetMACConfig+0xae>
 8004430:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004434:	e000      	b.n	8004438 <ETH_SetMACConfig+0xb0>
 8004436:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004438:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800443e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004446:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004448:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	4b56      	ldr	r3, [pc, #344]	; (80045b4 <ETH_SetMACConfig+0x22c>)
 800445a:	4013      	ands	r3, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6812      	ldr	r2, [r2, #0]
 8004460:	68f9      	ldr	r1, [r7, #12]
 8004462:	430b      	orrs	r3, r1
 8004464:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004472:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004474:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800447c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800447e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004486:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004488:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004490:	2a00      	cmp	r2, #0
 8004492:	d102      	bne.n	800449a <ETH_SetMACConfig+0x112>
 8004494:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004498:	e000      	b.n	800449c <ETH_SetMACConfig+0x114>
 800449a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800449c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	4b42      	ldr	r3, [pc, #264]	; (80045b8 <ETH_SetMACConfig+0x230>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	68f9      	ldr	r1, [r7, #12]
 80044b6:	430b      	orrs	r3, r1
 80044b8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044c0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	4b3a      	ldr	r3, [pc, #232]	; (80045bc <ETH_SetMACConfig+0x234>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	68f9      	ldr	r1, [r7, #12]
 80044da:	430b      	orrs	r3, r1
 80044dc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80044e4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80044ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80044f2:	2a00      	cmp	r2, #0
 80044f4:	d101      	bne.n	80044fa <ETH_SetMACConfig+0x172>
 80044f6:	2280      	movs	r2, #128	; 0x80
 80044f8:	e000      	b.n	80044fc <ETH_SetMACConfig+0x174>
 80044fa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80044fc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004502:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004504:	4313      	orrs	r3, r2
 8004506:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800450e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004512:	4013      	ands	r3, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	68f9      	ldr	r1, [r7, #12]
 800451a:	430b      	orrs	r3, r1
 800451c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004524:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800452c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800452e:	4313      	orrs	r3, r2
 8004530:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800453a:	f023 0103 	bic.w	r1, r3, #3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	430a      	orrs	r2, r1
 8004546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004552:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800456e:	2a00      	cmp	r2, #0
 8004570:	d101      	bne.n	8004576 <ETH_SetMACConfig+0x1ee>
 8004572:	2240      	movs	r2, #64	; 0x40
 8004574:	e000      	b.n	8004578 <ETH_SetMACConfig+0x1f0>
 8004576:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004578:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004580:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004582:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800458a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004598:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80045a8:	bf00      	nop
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	00048083 	.word	0x00048083
 80045b8:	c0f88000 	.word	0xc0f88000
 80045bc:	fffffef0 	.word	0xfffffef0

080045c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	4b38      	ldr	r3, [pc, #224]	; (80046b8 <ETH_SetDMAConfig+0xf8>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	6811      	ldr	r1, [r2, #0]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6812      	ldr	r2, [r2, #0]
 80045e0:	430b      	orrs	r3, r1
 80045e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045e6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	791b      	ldrb	r3, [r3, #4]
 80045ec:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80045f2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	7b1b      	ldrb	r3, [r3, #12]
 80045f8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80045fa:	4313      	orrs	r3, r2
 80045fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004606:	685a      	ldr	r2, [r3, #4]
 8004608:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <ETH_SetDMAConfig+0xfc>)
 800460a:	4013      	ands	r3, r2
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	68f9      	ldr	r1, [r7, #12]
 8004612:	430b      	orrs	r3, r1
 8004614:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004618:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	7b5b      	ldrb	r3, [r3, #13]
 800461e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004630:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004634:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <ETH_SetDMAConfig+0x100>)
 8004636:	4013      	ands	r3, r2
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	68f9      	ldr	r1, [r7, #12]
 800463e:	430b      	orrs	r3, r1
 8004640:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004644:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	7d1b      	ldrb	r3, [r3, #20]
 8004650:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004652:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	7f5b      	ldrb	r3, [r3, #29]
 8004658:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004666:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800466a:	4b16      	ldr	r3, [pc, #88]	; (80046c4 <ETH_SetDMAConfig+0x104>)
 800466c:	4013      	ands	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	68f9      	ldr	r1, [r7, #12]
 8004674:	430b      	orrs	r3, r1
 8004676:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800467a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	7f1b      	ldrb	r3, [r3, #28]
 8004682:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004694:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <ETH_SetDMAConfig+0x108>)
 800469a:	4013      	ands	r3, r2
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	68f9      	ldr	r1, [r7, #12]
 80046a2:	430b      	orrs	r3, r1
 80046a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046a8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	ffff87fd 	.word	0xffff87fd
 80046bc:	ffff2ffe 	.word	0xffff2ffe
 80046c0:	fffec000 	.word	0xfffec000
 80046c4:	ffc0efef 	.word	0xffc0efef
 80046c8:	7fc0ffff 	.word	0x7fc0ffff

080046cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b0a4      	sub	sp, #144	; 0x90
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80046d4:	2301      	movs	r3, #1
 80046d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80046da:	2300      	movs	r3, #0
 80046dc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80046de:	2300      	movs	r3, #0
 80046e0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80046e4:	2300      	movs	r3, #0
 80046e6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004702:	2301      	movs	r3, #1
 8004704:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004708:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800470c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800470e:	2300      	movs	r3, #0
 8004710:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004714:	2300      	movs	r3, #0
 8004716:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004718:	2300      	movs	r3, #0
 800471a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800471e:	2300      	movs	r3, #0
 8004720:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004724:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004728:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800472a:	2300      	movs	r3, #0
 800472c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004730:	2300      	movs	r3, #0
 8004732:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004734:	2301      	movs	r3, #1
 8004736:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800473a:	2300      	movs	r3, #0
 800473c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004740:	2300      	movs	r3, #0
 8004742:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004746:	2300      	movs	r3, #0
 8004748:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800474a:	2300      	movs	r3, #0
 800474c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800474e:	2300      	movs	r3, #0
 8004750:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004752:	2300      	movs	r3, #0
 8004754:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800475e:	2301      	movs	r3, #1
 8004760:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004764:	2320      	movs	r3, #32
 8004766:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800476a:	2301      	movs	r3, #1
 800476c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004770:	2300      	movs	r3, #0
 8004772:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004776:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800477c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004780:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004782:	2300      	movs	r3, #0
 8004784:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004788:	2302      	movs	r3, #2
 800478a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800478e:	2300      	movs	r3, #0
 8004790:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004794:	2300      	movs	r3, #0
 8004796:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800479a:	2300      	movs	r3, #0
 800479c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80047a0:	2301      	movs	r3, #1
 80047a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80047a6:	2300      	movs	r3, #0
 80047a8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80047aa:	2301      	movs	r3, #1
 80047ac:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80047b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047b4:	4619      	mov	r1, r3
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff fde6 	bl	8004388 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80047bc:	2301      	movs	r3, #1
 80047be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80047c0:	2301      	movs	r3, #1
 80047c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80047c4:	2300      	movs	r3, #0
 80047c6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80047d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80047dc:	2300      	movs	r3, #0
 80047de:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80047e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80047e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80047ec:	f44f 7306 	mov.w	r3, #536	; 0x218
 80047f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80047f2:	f107 0308 	add.w	r3, r7, #8
 80047f6:	4619      	mov	r1, r3
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fee1 	bl	80045c0 <ETH_SetDMAConfig>
}
 80047fe:	bf00      	nop
 8004800:	3790      	adds	r7, #144	; 0x90
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004806:	b480      	push	{r7}
 8004808:	b085      	sub	sp, #20
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	e01d      	b.n	8004850 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68d9      	ldr	r1, [r3, #12]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4613      	mov	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	4413      	add	r3, r2
 8004820:	00db      	lsls	r3, r3, #3
 8004822:	440b      	add	r3, r1
 8004824:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2200      	movs	r2, #0
 8004830:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2200      	movs	r2, #0
 8004836:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2200      	movs	r2, #0
 800483c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	3206      	adds	r2, #6
 8004846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3301      	adds	r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b03      	cmp	r3, #3
 8004854:	d9de      	bls.n	8004814 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004864:	461a      	mov	r2, r3
 8004866:	2303      	movs	r3, #3
 8004868:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004878:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004888:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800488c:	bf00      	nop
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80048a0:	2300      	movs	r3, #0
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	e023      	b.n	80048ee <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6919      	ldr	r1, [r3, #16]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4613      	mov	r3, r2
 80048ae:	005b      	lsls	r3, r3, #1
 80048b0:	4413      	add	r3, r2
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	440b      	add	r3, r1
 80048b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2200      	movs	r2, #0
 80048c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2200      	movs	r2, #0
 80048c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2200      	movs	r2, #0
 80048ce:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2200      	movs	r2, #0
 80048d4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2200      	movs	r2, #0
 80048da:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80048dc:	68b9      	ldr	r1, [r7, #8]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	3212      	adds	r2, #18
 80048e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	3301      	adds	r3, #1
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b03      	cmp	r3, #3
 80048f2:	d9d8      	bls.n	80048a6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491a:	461a      	mov	r2, r3
 800491c:	2303      	movs	r3, #3
 800491e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691a      	ldr	r2, [r3, #16]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800492e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004942:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004946:	bf00      	nop
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004954:	b480      	push	{r7}
 8004956:	b089      	sub	sp, #36	; 0x24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800495e:	2300      	movs	r3, #0
 8004960:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004962:	4b86      	ldr	r3, [pc, #536]	; (8004b7c <HAL_GPIO_Init+0x228>)
 8004964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004966:	e18c      	b.n	8004c82 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	2101      	movs	r1, #1
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	fa01 f303 	lsl.w	r3, r1, r3
 8004974:	4013      	ands	r3, r2
 8004976:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 817e 	beq.w	8004c7c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f003 0303 	and.w	r3, r3, #3
 8004988:	2b01      	cmp	r3, #1
 800498a:	d005      	beq.n	8004998 <HAL_GPIO_Init+0x44>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d130      	bne.n	80049fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	2203      	movs	r2, #3
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	43db      	mvns	r3, r3
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4013      	ands	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4313      	orrs	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049ce:	2201      	movs	r2, #1
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	43db      	mvns	r3, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4013      	ands	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	091b      	lsrs	r3, r3, #4
 80049e4:	f003 0201 	and.w	r2, r3, #1
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	2b03      	cmp	r3, #3
 8004a04:	d017      	beq.n	8004a36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	2203      	movs	r2, #3
 8004a12:	fa02 f303 	lsl.w	r3, r2, r3
 8004a16:	43db      	mvns	r3, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	689a      	ldr	r2, [r3, #8]
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d123      	bne.n	8004a8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	08da      	lsrs	r2, r3, #3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3208      	adds	r2, #8
 8004a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	220f      	movs	r2, #15
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	4013      	ands	r3, r2
 8004a64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	691a      	ldr	r2, [r3, #16]
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	08da      	lsrs	r2, r3, #3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3208      	adds	r2, #8
 8004a84:	69b9      	ldr	r1, [r7, #24]
 8004a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	2203      	movs	r2, #3
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	43db      	mvns	r3, r3
 8004a9c:	69ba      	ldr	r2, [r7, #24]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f003 0203 	and.w	r2, r3, #3
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 80d8 	beq.w	8004c7c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004acc:	4b2c      	ldr	r3, [pc, #176]	; (8004b80 <HAL_GPIO_Init+0x22c>)
 8004ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ad2:	4a2b      	ldr	r2, [pc, #172]	; (8004b80 <HAL_GPIO_Init+0x22c>)
 8004ad4:	f043 0302 	orr.w	r3, r3, #2
 8004ad8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004adc:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <HAL_GPIO_Init+0x22c>)
 8004ade:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004aea:	4a26      	ldr	r2, [pc, #152]	; (8004b84 <HAL_GPIO_Init+0x230>)
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	3302      	adds	r3, #2
 8004af2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	220f      	movs	r2, #15
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	43db      	mvns	r3, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a1d      	ldr	r2, [pc, #116]	; (8004b88 <HAL_GPIO_Init+0x234>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d04a      	beq.n	8004bac <HAL_GPIO_Init+0x258>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a1c      	ldr	r2, [pc, #112]	; (8004b8c <HAL_GPIO_Init+0x238>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d02b      	beq.n	8004b76 <HAL_GPIO_Init+0x222>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a1b      	ldr	r2, [pc, #108]	; (8004b90 <HAL_GPIO_Init+0x23c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d025      	beq.n	8004b72 <HAL_GPIO_Init+0x21e>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a1a      	ldr	r2, [pc, #104]	; (8004b94 <HAL_GPIO_Init+0x240>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d01f      	beq.n	8004b6e <HAL_GPIO_Init+0x21a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a19      	ldr	r2, [pc, #100]	; (8004b98 <HAL_GPIO_Init+0x244>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d019      	beq.n	8004b6a <HAL_GPIO_Init+0x216>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a18      	ldr	r2, [pc, #96]	; (8004b9c <HAL_GPIO_Init+0x248>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d013      	beq.n	8004b66 <HAL_GPIO_Init+0x212>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <HAL_GPIO_Init+0x24c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00d      	beq.n	8004b62 <HAL_GPIO_Init+0x20e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a16      	ldr	r2, [pc, #88]	; (8004ba4 <HAL_GPIO_Init+0x250>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d007      	beq.n	8004b5e <HAL_GPIO_Init+0x20a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a15      	ldr	r2, [pc, #84]	; (8004ba8 <HAL_GPIO_Init+0x254>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d101      	bne.n	8004b5a <HAL_GPIO_Init+0x206>
 8004b56:	2309      	movs	r3, #9
 8004b58:	e029      	b.n	8004bae <HAL_GPIO_Init+0x25a>
 8004b5a:	230a      	movs	r3, #10
 8004b5c:	e027      	b.n	8004bae <HAL_GPIO_Init+0x25a>
 8004b5e:	2307      	movs	r3, #7
 8004b60:	e025      	b.n	8004bae <HAL_GPIO_Init+0x25a>
 8004b62:	2306      	movs	r3, #6
 8004b64:	e023      	b.n	8004bae <HAL_GPIO_Init+0x25a>
 8004b66:	2305      	movs	r3, #5
 8004b68:	e021      	b.n	8004bae <HAL_GPIO_Init+0x25a>
 8004b6a:	2304      	movs	r3, #4
 8004b6c:	e01f      	b.n	8004bae <HAL_GPIO_Init+0x25a>
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e01d      	b.n	8004bae <HAL_GPIO_Init+0x25a>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e01b      	b.n	8004bae <HAL_GPIO_Init+0x25a>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e019      	b.n	8004bae <HAL_GPIO_Init+0x25a>
 8004b7a:	bf00      	nop
 8004b7c:	58000080 	.word	0x58000080
 8004b80:	58024400 	.word	0x58024400
 8004b84:	58000400 	.word	0x58000400
 8004b88:	58020000 	.word	0x58020000
 8004b8c:	58020400 	.word	0x58020400
 8004b90:	58020800 	.word	0x58020800
 8004b94:	58020c00 	.word	0x58020c00
 8004b98:	58021000 	.word	0x58021000
 8004b9c:	58021400 	.word	0x58021400
 8004ba0:	58021800 	.word	0x58021800
 8004ba4:	58021c00 	.word	0x58021c00
 8004ba8:	58022400 	.word	0x58022400
 8004bac:	2300      	movs	r3, #0
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	f002 0203 	and.w	r2, r2, #3
 8004bb4:	0092      	lsls	r2, r2, #2
 8004bb6:	4093      	lsls	r3, r2
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bbe:	4938      	ldr	r1, [pc, #224]	; (8004ca0 <HAL_GPIO_Init+0x34c>)
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	089b      	lsrs	r3, r3, #2
 8004bc4:	3302      	adds	r3, #2
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004bfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	43db      	mvns	r3, r3
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004c20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c24:	69bb      	ldr	r3, [r7, #24]
 8004c26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	43db      	mvns	r3, r3
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	4013      	ands	r3, r2
 8004c36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	43db      	mvns	r3, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d003      	beq.n	8004c76 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f47f ae6b 	bne.w	8004968 <HAL_GPIO_Init+0x14>
  }
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	3724      	adds	r7, #36	; 0x24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	58000400 	.word	0x58000400

08004ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cb4:	787b      	ldrb	r3, [r7, #1]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cba:	887a      	ldrh	r2, [r7, #2]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004cc0:	e003      	b.n	8004cca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004cc2:	887b      	ldrh	r3, [r7, #2]
 8004cc4:	041a      	lsls	r2, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	619a      	str	r2, [r3, #24]
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e08b      	b.n	8004e02 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7fc fb68 	bl	80013d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2224      	movs	r2, #36	; 0x24
 8004d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f022 0201 	bic.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004d28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689a      	ldr	r2, [r3, #8]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d107      	bne.n	8004d52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689a      	ldr	r2, [r3, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d4e:	609a      	str	r2, [r3, #8]
 8004d50:	e006      	b.n	8004d60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689a      	ldr	r2, [r3, #8]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004d5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d108      	bne.n	8004d7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d76:	605a      	str	r2, [r3, #4]
 8004d78:	e007      	b.n	8004d8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6859      	ldr	r1, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	4b1d      	ldr	r3, [pc, #116]	; (8004e0c <HAL_I2C_Init+0x134>)
 8004d96:	430b      	orrs	r3, r1
 8004d98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004da8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69d9      	ldr	r1, [r3, #28]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1a      	ldr	r2, [r3, #32]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	02008000 	.word	0x02008000

08004e10 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	607a      	str	r2, [r7, #4]
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	817b      	strh	r3, [r7, #10]
 8004e20:	4613      	mov	r3, r2
 8004e22:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d17c      	bne.n	8004f2a <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e3e:	d101      	bne.n	8004e44 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8004e40:	2302      	movs	r3, #2
 8004e42:	e073      	b.n	8004f2c <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d101      	bne.n	8004e52 <HAL_I2C_Master_Transmit_IT+0x42>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e06c      	b.n	8004f2c <HAL_I2C_Master_Transmit_IT+0x11c>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2221      	movs	r2, #33	; 0x21
 8004e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2210      	movs	r2, #16
 8004e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	893a      	ldrh	r2, [r7, #8]
 8004e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4a2d      	ldr	r2, [pc, #180]	; (8004f34 <HAL_I2C_Master_Transmit_IT+0x124>)
 8004e80:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4a2c      	ldr	r2, [pc, #176]	; (8004f38 <HAL_I2C_Master_Transmit_IT+0x128>)
 8004e86:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2bff      	cmp	r3, #255	; 0xff
 8004e90:	d906      	bls.n	8004ea0 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	22ff      	movs	r2, #255	; 0xff
 8004e96:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004e98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	e007      	b.n	8004eb0 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004eae:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d024      	beq.n	8004f02 <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	781a      	ldrb	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	851a      	strh	r2, [r3, #40]	; 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	3301      	adds	r3, #1
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	8979      	ldrh	r1, [r7, #10]
 8004ef4:	4b11      	ldr	r3, [pc, #68]	; (8004f3c <HAL_I2C_Master_Transmit_IT+0x12c>)
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f001 fdce 	bl	8006a9c <I2C_TransferConfig>
 8004f00:	e009      	b.n	8004f16 <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	8979      	ldrh	r1, [r7, #10]
 8004f0a:	4b0c      	ldr	r3, [pc, #48]	; (8004f3c <HAL_I2C_Master_Transmit_IT+0x12c>)
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f001 fdc3 	bl	8006a9c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f1e:	2101      	movs	r1, #1
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f001 fded 	bl	8006b00 <I2C_Enable_IRQ>

    return HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	e000      	b.n	8004f2c <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f2a:	2302      	movs	r3, #2
  }
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	ffff0000 	.word	0xffff0000
 8004f38:	080052b7 	.word	0x080052b7
 8004f3c:	80002000 	.word	0x80002000

08004f40 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	607a      	str	r2, [r7, #4]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	817b      	strh	r3, [r7, #10]
 8004f50:	4613      	mov	r3, r2
 8004f52:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	2b20      	cmp	r3, #32
 8004f5e:	d153      	bne.n	8005008 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f6e:	d101      	bne.n	8004f74 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8004f70:	2302      	movs	r3, #2
 8004f72:	e04a      	b.n	800500a <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d101      	bne.n	8004f82 <HAL_I2C_Master_Receive_IT+0x42>
 8004f7e:	2302      	movs	r3, #2
 8004f80:	e043      	b.n	800500a <HAL_I2C_Master_Receive_IT+0xca>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2222      	movs	r2, #34	; 0x22
 8004f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2210      	movs	r2, #16
 8004f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	893a      	ldrh	r2, [r7, #8]
 8004faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4a19      	ldr	r2, [pc, #100]	; (8005014 <HAL_I2C_Master_Receive_IT+0xd4>)
 8004fb0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	4a18      	ldr	r2, [pc, #96]	; (8005018 <HAL_I2C_Master_Receive_IT+0xd8>)
 8004fb6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2bff      	cmp	r3, #255	; 0xff
 8004fc0:	d906      	bls.n	8004fd0 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	22ff      	movs	r2, #255	; 0xff
 8004fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8004fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	e007      	b.n	8004fe0 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004fda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fde:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	8979      	ldrh	r1, [r7, #10]
 8004fe8:	4b0c      	ldr	r3, [pc, #48]	; (800501c <HAL_I2C_Master_Receive_IT+0xdc>)
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f001 fd54 	bl	8006a9c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004ffc:	2102      	movs	r1, #2
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f001 fd7e 	bl	8006b00 <I2C_Enable_IRQ>

    return HAL_OK;
 8005004:	2300      	movs	r3, #0
 8005006:	e000      	b.n	800500a <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005008:	2302      	movs	r3, #2
  }
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	ffff0000 	.word	0xffff0000
 8005018:	080052b7 	.word	0x080052b7
 800501c:	80002400 	.word	0x80002400

08005020 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	4613      	mov	r3, r2
 800502c:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b20      	cmp	r3, #32
 8005038:	d156      	bne.n	80050e8 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_I2C_Slave_Transmit_IT+0x28>
 8005044:	2302      	movs	r3, #2
 8005046:	e050      	b.n	80050ea <HAL_I2C_Slave_Transmit_IT+0xca>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2221      	movs	r2, #33	; 0x21
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005074:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	88fa      	ldrh	r2, [r7, #6]
 8005080:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005086:	b29a      	uxth	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <HAL_I2C_Slave_Transmit_IT+0xd4>)
 8005090:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 8005096:	635a      	str	r2, [r3, #52]	; 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050a0:	d117      	bne.n	80050d2 <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	781a      	ldrb	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050bc:	b29b      	uxth	r3, r3
 80050be:	3b01      	subs	r3, #1
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 80050da:	f248 0101 	movw	r1, #32769	; 0x8001
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f001 fd0e 	bl	8006b00 <I2C_Enable_IRQ>

    return HAL_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	e000      	b.n	80050ea <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80050e8:	2302      	movs	r3, #2
  }
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	ffff0000 	.word	0xffff0000
 80050f8:	08005505 	.word	0x08005505

080050fc <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	4613      	mov	r3, r2
 8005108:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b20      	cmp	r3, #32
 8005114:	d139      	bne.n	800518a <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_I2C_Slave_Receive_IT+0x28>
 8005120:	2302      	movs	r3, #2
 8005122:	e033      	b.n	800518c <HAL_I2C_Slave_Receive_IT+0x90>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2222      	movs	r2, #34	; 0x22
 8005130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005150:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	88fa      	ldrh	r2, [r7, #6]
 800515c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	4a0a      	ldr	r2, [pc, #40]	; (8005194 <HAL_I2C_Slave_Receive_IT+0x98>)
 800516c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4a09      	ldr	r2, [pc, #36]	; (8005198 <HAL_I2C_Slave_Receive_IT+0x9c>)
 8005172:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 800517c:	f248 0102 	movw	r1, #32770	; 0x8002
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f001 fcbd 	bl	8006b00 <I2C_Enable_IRQ>

    return HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	e000      	b.n	800518c <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 800518a:	2302      	movs	r3, #2
  }
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	ffff0000 	.word	0xffff0000
 8005198:	08005505 	.word	0x08005505

0800519c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	68f9      	ldr	r1, [r7, #12]
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	4798      	blx	r3
  }
}
 80051c8:	bf00      	nop
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00f      	beq.n	8005212 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005200:	f043 0201 	orr.w	r2, r3, #1
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005210:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00f      	beq.n	800523c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800522a:	f043 0208 	orr.w	r2, r3, #8
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800523a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00f      	beq.n	8005266 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00a      	beq.n	8005266 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005254:	f043 0202 	orr.w	r2, r3, #2
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005264:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f003 030b 	and.w	r3, r3, #11
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f001 fab5 	bl	80067e8 <I2C_ITError>
  }
}
 800527e:	bf00      	nop
 8005280:	3718      	adds	r7, #24
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
 800528e:	460b      	mov	r3, r1
 8005290:	70fb      	strb	r3, [r7, #3]
 8005292:	4613      	mov	r3, r2
 8005294:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005296:	bf00      	nop
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b088      	sub	sp, #32
 80052ba:	af02      	add	r7, sp, #8
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d101      	bne.n	80052d4 <I2C_Master_ISR_IT+0x1e>
 80052d0:	2302      	movs	r3, #2
 80052d2:	e113      	b.n	80054fc <I2C_Master_ISR_IT+0x246>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d012      	beq.n	800530c <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00d      	beq.n	800530c <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2210      	movs	r2, #16
 80052f6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052fc:	f043 0204 	orr.w	r2, r3, #4
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f001 fb86 	bl	8006a16 <I2C_Flush_TXDR>
 800530a:	e0e4      	b.n	80054d6 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d022      	beq.n	800535c <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01d      	beq.n	800535c <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f023 0304 	bic.w	r3, r3, #4
 8005326:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29b      	uxth	r3, r3
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	855a      	strh	r2, [r3, #42]	; 0x2a
 800535a:	e0bc      	b.n	80054d6 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005362:	2b00      	cmp	r3, #0
 8005364:	d128      	bne.n	80053b8 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800536c:	2b00      	cmp	r3, #0
 800536e:	d023      	beq.n	80053b8 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005376:	2b00      	cmp	r3, #0
 8005378:	d01e      	beq.n	80053b8 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80a8 	beq.w	80054d6 <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	781a      	ldrb	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 80053b6:	e08e      	b.n	80054d6 <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d05c      	beq.n	800547c <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d057      	beq.n	800547c <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d040      	beq.n	8005458 <I2C_Master_ISR_IT+0x1a2>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d13c      	bne.n	8005458 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ea:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2bff      	cmp	r3, #255	; 0xff
 80053f4:	d90e      	bls.n	8005414 <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	22ff      	movs	r2, #255	; 0xff
 80053fa:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005400:	b2da      	uxtb	r2, r3
 8005402:	8a79      	ldrh	r1, [r7, #18]
 8005404:	2300      	movs	r3, #0
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f001 fb45 	bl	8006a9c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005412:	e032      	b.n	800547a <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005422:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005426:	d00b      	beq.n	8005440 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800542c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005432:	8a79      	ldrh	r1, [r7, #18]
 8005434:	2000      	movs	r0, #0
 8005436:	9000      	str	r0, [sp, #0]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f001 fb2f 	bl	8006a9c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800543e:	e01c      	b.n	800547a <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005444:	b2da      	uxtb	r2, r3
 8005446:	8a79      	ldrh	r1, [r7, #18]
 8005448:	2300      	movs	r3, #0
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f001 fb23 	bl	8006a9c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005456:	e010      	b.n	800547a <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005462:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005466:	d003      	beq.n	8005470 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 fdb3 	bl	8005fd4 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800546e:	e032      	b.n	80054d6 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005470:	2140      	movs	r1, #64	; 0x40
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f001 f9b8 	bl	80067e8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005478:	e02d      	b.n	80054d6 <I2C_Master_ISR_IT+0x220>
 800547a:	e02c      	b.n	80054d6 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d027      	beq.n	80054d6 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800548c:	2b00      	cmp	r3, #0
 800548e:	d022      	beq.n	80054d6 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d119      	bne.n	80054ce <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054a8:	d015      	beq.n	80054d6 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054b2:	d108      	bne.n	80054c6 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c2:	605a      	str	r2, [r3, #4]
 80054c4:	e007      	b.n	80054d6 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f000 fd84 	bl	8005fd4 <I2C_ITMasterSeqCplt>
 80054cc:	e003      	b.n	80054d6 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80054ce:	2140      	movs	r1, #64	; 0x40
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f001 f989 	bl	80067e8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d008      	beq.n	80054f2 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80054ea:	6979      	ldr	r1, [r7, #20]
 80054ec:	68f8      	ldr	r0, [r7, #12]
 80054ee:	f000 fe0b 	bl	8006108 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <I2C_Slave_ISR_IT+0x24>
 8005524:	2302      	movs	r3, #2
 8005526:	e0e2      	b.n	80056ee <I2C_Slave_ISR_IT+0x1ea>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005540:	2b00      	cmp	r3, #0
 8005542:	d004      	beq.n	800554e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005544:	6939      	ldr	r1, [r7, #16]
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 fea6 	bl	8006298 <I2C_ITSlaveCplt>
 800554c:	e0ca      	b.n	80056e4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b00      	cmp	r3, #0
 8005556:	d04b      	beq.n	80055f0 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800555e:	2b00      	cmp	r3, #0
 8005560:	d046      	beq.n	80055f0 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005566:	b29b      	uxth	r3, r3
 8005568:	2b00      	cmp	r3, #0
 800556a:	d128      	bne.n	80055be <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b28      	cmp	r3, #40	; 0x28
 8005576:	d108      	bne.n	800558a <I2C_Slave_ISR_IT+0x86>
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800557e:	d104      	bne.n	800558a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005580:	6939      	ldr	r1, [r7, #16]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f001 f8dc 	bl	8006740 <I2C_ITListenCplt>
 8005588:	e031      	b.n	80055ee <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b29      	cmp	r3, #41	; 0x29
 8005594:	d10e      	bne.n	80055b4 <I2C_Slave_ISR_IT+0xb0>
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800559c:	d00a      	beq.n	80055b4 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2210      	movs	r2, #16
 80055a4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f001 fa35 	bl	8006a16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f000 fd4e 	bl	800604e <I2C_ITSlaveSeqCplt>
 80055b2:	e01c      	b.n	80055ee <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2210      	movs	r2, #16
 80055ba:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80055bc:	e08f      	b.n	80056de <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2210      	movs	r2, #16
 80055c4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	f043 0204 	orr.w	r2, r3, #4
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <I2C_Slave_ISR_IT+0xdc>
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055de:	d17e      	bne.n	80056de <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055e4:	4619      	mov	r1, r3
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f001 f8fe 	bl	80067e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80055ec:	e077      	b.n	80056de <I2C_Slave_ISR_IT+0x1da>
 80055ee:	e076      	b.n	80056de <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d02f      	beq.n	800565a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005600:	2b00      	cmp	r3, #0
 8005602:	d02a      	beq.n	800565a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d018      	beq.n	8005640 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	1c5a      	adds	r2, r3, #1
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562a:	3b01      	subs	r3, #1
 800562c:	b29a      	uxth	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005644:	b29b      	uxth	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d14b      	bne.n	80056e2 <I2C_Slave_ISR_IT+0x1de>
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005650:	d047      	beq.n	80056e2 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 fcfb 	bl	800604e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005658:	e043      	b.n	80056e2 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f003 0308 	and.w	r3, r3, #8
 8005660:	2b00      	cmp	r3, #0
 8005662:	d009      	beq.n	8005678 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800566a:	2b00      	cmp	r3, #0
 800566c:	d004      	beq.n	8005678 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800566e:	6939      	ldr	r1, [r7, #16]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 fc2b 	bl	8005ecc <I2C_ITAddrCplt>
 8005676:	e035      	b.n	80056e4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d030      	beq.n	80056e4 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005688:	2b00      	cmp	r3, #0
 800568a:	d02b      	beq.n	80056e4 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d018      	beq.n	80056c8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569a:	781a      	ldrb	r2, [r3, #0]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	851a      	strh	r2, [r3, #40]	; 0x28
 80056c6:	e00d      	b.n	80056e4 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056ce:	d002      	beq.n	80056d6 <I2C_Slave_ISR_IT+0x1d2>
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f000 fcb9 	bl	800604e <I2C_ITSlaveSeqCplt>
 80056dc:	e002      	b.n	80056e4 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80056de:	bf00      	nop
 80056e0:	e000      	b.n	80056e4 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80056e2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b088      	sub	sp, #32
 80056fa:	af02      	add	r7, sp, #8
 80056fc:	60f8      	str	r0, [r7, #12]
 80056fe:	60b9      	str	r1, [r7, #8]
 8005700:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <I2C_Master_ISR_DMA+0x1a>
 800570c:	2302      	movs	r3, #2
 800570e:	e0d9      	b.n	80058c4 <I2C_Master_ISR_DMA+0x1ce>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	2b00      	cmp	r3, #0
 8005720:	d016      	beq.n	8005750 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005728:	2b00      	cmp	r3, #0
 800572a:	d011      	beq.n	8005750 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2210      	movs	r2, #16
 8005732:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005738:	f043 0204 	orr.w	r2, r3, #4
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005740:	2120      	movs	r1, #32
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f001 f9dc 	bl	8006b00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f001 f964 	bl	8006a16 <I2C_Flush_TXDR>
 800574e:	e0b4      	b.n	80058ba <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005756:	2b00      	cmp	r3, #0
 8005758:	d071      	beq.n	800583e <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005760:	2b00      	cmp	r3, #0
 8005762:	d06c      	beq.n	800583e <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005772:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d04e      	beq.n	800581c <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	b29b      	uxth	r3, r3
 8005786:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800578a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	2bff      	cmp	r3, #255	; 0xff
 8005794:	d906      	bls.n	80057a4 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	22ff      	movs	r2, #255	; 0xff
 800579a:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800579c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	e010      	b.n	80057c6 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057b6:	d003      	beq.n	80057c0 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	e002      	b.n	80057c6 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80057c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057c4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	8a79      	ldrh	r1, [r7, #18]
 80057ce:	2300      	movs	r3, #0
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f001 f961 	bl	8006a9c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b22      	cmp	r3, #34	; 0x22
 80057f6:	d108      	bne.n	800580a <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005806:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005808:	e057      	b.n	80058ba <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005818:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800581a:	e04e      	b.n	80058ba <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800582a:	d003      	beq.n	8005834 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 fbd1 	bl	8005fd4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8005832:	e042      	b.n	80058ba <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005834:	2140      	movs	r1, #64	; 0x40
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 ffd6 	bl	80067e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800583c:	e03d      	b.n	80058ba <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005844:	2b00      	cmp	r3, #0
 8005846:	d028      	beq.n	800589a <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800584e:	2b00      	cmp	r3, #0
 8005850:	d023      	beq.n	800589a <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d119      	bne.n	8005890 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005866:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800586a:	d025      	beq.n	80058b8 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005874:	d108      	bne.n	8005888 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005884:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8005886:	e017      	b.n	80058b8 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f000 fba3 	bl	8005fd4 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800588e:	e013      	b.n	80058b8 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005890:	2140      	movs	r1, #64	; 0x40
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 ffa8 	bl	80067e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005898:	e00e      	b.n	80058b8 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f003 0320 	and.w	r3, r3, #32
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80058ae:	68b9      	ldr	r1, [r7, #8]
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 fc29 	bl	8006108 <I2C_ITMasterCplt>
 80058b6:	e000      	b.n	80058ba <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80058b8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b088      	sub	sp, #32
 80058d0:	af02      	add	r7, sp, #8
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80058d8:	4b8d      	ldr	r3, [pc, #564]	; (8005b10 <I2C_Mem_ISR_DMA+0x244>)
 80058da:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d101      	bne.n	80058ea <I2C_Mem_ISR_DMA+0x1e>
 80058e6:	2302      	movs	r3, #2
 80058e8:	e10e      	b.n	8005b08 <I2C_Mem_ISR_DMA+0x23c>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f003 0310 	and.w	r3, r3, #16
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d016      	beq.n	800592a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005902:	2b00      	cmp	r3, #0
 8005904:	d011      	beq.n	800592a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2210      	movs	r2, #16
 800590c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	f043 0204 	orr.w	r2, r3, #4
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800591a:	2120      	movs	r1, #32
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f001 f8ef 	bl	8006b00 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f001 f877 	bl	8006a16 <I2C_Flush_TXDR>
 8005928:	e0e9      	b.n	8005afe <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00e      	beq.n	8005952 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800593a:	2b00      	cmp	r3, #0
 800593c:	d009      	beq.n	8005952 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005946:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800594e:	651a      	str	r2, [r3, #80]	; 0x50
 8005950:	e0d5      	b.n	8005afe <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005958:	2b00      	cmp	r3, #0
 800595a:	d05f      	beq.n	8005a1c <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8005962:	2b00      	cmp	r3, #0
 8005964:	d05a      	beq.n	8005a1c <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005966:	2101      	movs	r1, #1
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f001 f94d 	bl	8006c08 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800596e:	2110      	movs	r1, #16
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f001 f8c5 	bl	8006b00 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d048      	beq.n	8005a12 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005984:	b29b      	uxth	r3, r3
 8005986:	2bff      	cmp	r3, #255	; 0xff
 8005988:	d910      	bls.n	80059ac <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	22ff      	movs	r2, #255	; 0xff
 800598e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005994:	b299      	uxth	r1, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800599a:	b2da      	uxtb	r2, r3
 800599c:	2300      	movs	r3, #0
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f001 f879 	bl	8006a9c <I2C_TransferConfig>
 80059aa:	e011      	b.n	80059d0 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ba:	b299      	uxth	r1, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	2300      	movs	r3, #0
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f001 f866 	bl	8006a9c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b22      	cmp	r3, #34	; 0x22
 80059ec:	d108      	bne.n	8005a00 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80059fe:	e07e      	b.n	8005afe <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a0e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005a10:	e075      	b.n	8005afe <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005a12:	2140      	movs	r1, #64	; 0x40
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 fee7 	bl	80067e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005a1a:	e070      	b.n	8005afe <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d05d      	beq.n	8005ae2 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d058      	beq.n	8005ae2 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005a30:	2101      	movs	r1, #1
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f001 f8e8 	bl	8006c08 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005a38:	2110      	movs	r1, #16
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f001 f860 	bl	8006b00 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b22      	cmp	r3, #34	; 0x22
 8005a4a:	d101      	bne.n	8005a50 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8005a4c:	4b31      	ldr	r3, [pc, #196]	; (8005b14 <I2C_Mem_ISR_DMA+0x248>)
 8005a4e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	2bff      	cmp	r3, #255	; 0xff
 8005a58:	d910      	bls.n	8005a7c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	22ff      	movs	r2, #255	; 0xff
 8005a5e:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a64:	b299      	uxth	r1, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f001 f811 	bl	8006a9c <I2C_TransferConfig>
 8005a7a:	e011      	b.n	8005aa0 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a80:	b29a      	uxth	r2, r3
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8a:	b299      	uxth	r1, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a90:	b2da      	uxtb	r2, r3
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 fffe 	bl	8006a9c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b22      	cmp	r3, #34	; 0x22
 8005abc:	d108      	bne.n	8005ad0 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005acc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ace:	e016      	b.n	8005afe <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ade:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ae0:	e00d      	b.n	8005afe <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d008      	beq.n	8005afe <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 fb05 	bl	8006108 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	80002000 	.word	0x80002000
 8005b14:	80002400 	.word	0x80002400

08005b18 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b088      	sub	sp, #32
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b28:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <I2C_Slave_ISR_DMA+0x24>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e1c2      	b.n	8005ec2 <I2C_Slave_ISR_DMA+0x3aa>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d004      	beq.n	8005b62 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 fb9c 	bl	8006298 <I2C_ITSlaveCplt>
 8005b60:	e1aa      	b.n	8005eb8 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f003 0310 	and.w	r3, r3, #16
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 8197 	beq.w	8005e9c <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f000 8191 	beq.w	8005e9c <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d105      	bne.n	8005b90 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 817f 	beq.w	8005e8e <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d07b      	beq.n	8005c90 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d076      	beq.n	8005c90 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a74      	ldr	r2, [pc, #464]	; (8005d7c <I2C_Slave_ISR_DMA+0x264>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d059      	beq.n	8005c62 <I2C_Slave_ISR_DMA+0x14a>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a72      	ldr	r2, [pc, #456]	; (8005d80 <I2C_Slave_ISR_DMA+0x268>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d053      	beq.n	8005c62 <I2C_Slave_ISR_DMA+0x14a>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a70      	ldr	r2, [pc, #448]	; (8005d84 <I2C_Slave_ISR_DMA+0x26c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d04d      	beq.n	8005c62 <I2C_Slave_ISR_DMA+0x14a>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a6e      	ldr	r2, [pc, #440]	; (8005d88 <I2C_Slave_ISR_DMA+0x270>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d047      	beq.n	8005c62 <I2C_Slave_ISR_DMA+0x14a>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a6c      	ldr	r2, [pc, #432]	; (8005d8c <I2C_Slave_ISR_DMA+0x274>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d041      	beq.n	8005c62 <I2C_Slave_ISR_DMA+0x14a>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a6a      	ldr	r2, [pc, #424]	; (8005d90 <I2C_Slave_ISR_DMA+0x278>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d03b      	beq.n	8005c62 <I2C_Slave_ISR_DMA+0x14a>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a68      	ldr	r2, [pc, #416]	; (8005d94 <I2C_Slave_ISR_DMA+0x27c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d035      	beq.n	8005c62 <I2C_Slave_ISR_DMA+0x14a>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a66      	ldr	r2, [pc, #408]	; (8005d98 <I2C_Slave_ISR_DMA+0x280>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d02f      	beq.n	8005c62 <I2C_Slave_ISR_DMA+0x14a>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a64      	ldr	r2, [pc, #400]	; (8005d9c <I2C_Slave_ISR_DMA+0x284>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d029      	beq.n	8005c62 <I2C_Slave_ISR_DMA+0x14a>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a62      	ldr	r2, [pc, #392]	; (8005da0 <I2C_Slave_ISR_DMA+0x288>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d023      	beq.n	8005c62 <I2C_Slave_ISR_DMA+0x14a>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a60      	ldr	r2, [pc, #384]	; (8005da4 <I2C_Slave_ISR_DMA+0x28c>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d01d      	beq.n	8005c62 <I2C_Slave_ISR_DMA+0x14a>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a5e      	ldr	r2, [pc, #376]	; (8005da8 <I2C_Slave_ISR_DMA+0x290>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d017      	beq.n	8005c62 <I2C_Slave_ISR_DMA+0x14a>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a5c      	ldr	r2, [pc, #368]	; (8005dac <I2C_Slave_ISR_DMA+0x294>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d011      	beq.n	8005c62 <I2C_Slave_ISR_DMA+0x14a>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a5a      	ldr	r2, [pc, #360]	; (8005db0 <I2C_Slave_ISR_DMA+0x298>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00b      	beq.n	8005c62 <I2C_Slave_ISR_DMA+0x14a>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a58      	ldr	r2, [pc, #352]	; (8005db4 <I2C_Slave_ISR_DMA+0x29c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d005      	beq.n	8005c62 <I2C_Slave_ISR_DMA+0x14a>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a56      	ldr	r2, [pc, #344]	; (8005db8 <I2C_Slave_ISR_DMA+0x2a0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d109      	bne.n	8005c76 <I2C_Slave_ISR_DMA+0x15e>
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	bf0c      	ite	eq
 8005c6e:	2301      	moveq	r3, #1
 8005c70:	2300      	movne	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	e008      	b.n	8005c88 <I2C_Slave_ISR_DMA+0x170>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bf0c      	ite	eq
 8005c82:	2301      	moveq	r3, #1
 8005c84:	2300      	movne	r3, #0
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d001      	beq.n	8005c90 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 809e 	beq.w	8005dd6 <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8098 	beq.w	8005dd6 <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a33      	ldr	r2, [pc, #204]	; (8005d7c <I2C_Slave_ISR_DMA+0x264>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d059      	beq.n	8005d66 <I2C_Slave_ISR_DMA+0x24e>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a31      	ldr	r2, [pc, #196]	; (8005d80 <I2C_Slave_ISR_DMA+0x268>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d053      	beq.n	8005d66 <I2C_Slave_ISR_DMA+0x24e>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a2f      	ldr	r2, [pc, #188]	; (8005d84 <I2C_Slave_ISR_DMA+0x26c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d04d      	beq.n	8005d66 <I2C_Slave_ISR_DMA+0x24e>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a2d      	ldr	r2, [pc, #180]	; (8005d88 <I2C_Slave_ISR_DMA+0x270>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d047      	beq.n	8005d66 <I2C_Slave_ISR_DMA+0x24e>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a2b      	ldr	r2, [pc, #172]	; (8005d8c <I2C_Slave_ISR_DMA+0x274>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d041      	beq.n	8005d66 <I2C_Slave_ISR_DMA+0x24e>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a29      	ldr	r2, [pc, #164]	; (8005d90 <I2C_Slave_ISR_DMA+0x278>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d03b      	beq.n	8005d66 <I2C_Slave_ISR_DMA+0x24e>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a27      	ldr	r2, [pc, #156]	; (8005d94 <I2C_Slave_ISR_DMA+0x27c>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d035      	beq.n	8005d66 <I2C_Slave_ISR_DMA+0x24e>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a25      	ldr	r2, [pc, #148]	; (8005d98 <I2C_Slave_ISR_DMA+0x280>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d02f      	beq.n	8005d66 <I2C_Slave_ISR_DMA+0x24e>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a23      	ldr	r2, [pc, #140]	; (8005d9c <I2C_Slave_ISR_DMA+0x284>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d029      	beq.n	8005d66 <I2C_Slave_ISR_DMA+0x24e>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a21      	ldr	r2, [pc, #132]	; (8005da0 <I2C_Slave_ISR_DMA+0x288>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d023      	beq.n	8005d66 <I2C_Slave_ISR_DMA+0x24e>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a1f      	ldr	r2, [pc, #124]	; (8005da4 <I2C_Slave_ISR_DMA+0x28c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d01d      	beq.n	8005d66 <I2C_Slave_ISR_DMA+0x24e>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1d      	ldr	r2, [pc, #116]	; (8005da8 <I2C_Slave_ISR_DMA+0x290>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d017      	beq.n	8005d66 <I2C_Slave_ISR_DMA+0x24e>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a1b      	ldr	r2, [pc, #108]	; (8005dac <I2C_Slave_ISR_DMA+0x294>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d011      	beq.n	8005d66 <I2C_Slave_ISR_DMA+0x24e>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a19      	ldr	r2, [pc, #100]	; (8005db0 <I2C_Slave_ISR_DMA+0x298>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00b      	beq.n	8005d66 <I2C_Slave_ISR_DMA+0x24e>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a17      	ldr	r2, [pc, #92]	; (8005db4 <I2C_Slave_ISR_DMA+0x29c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d005      	beq.n	8005d66 <I2C_Slave_ISR_DMA+0x24e>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a15      	ldr	r2, [pc, #84]	; (8005db8 <I2C_Slave_ISR_DMA+0x2a0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d12a      	bne.n	8005dbc <I2C_Slave_ISR_DMA+0x2a4>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	bf0c      	ite	eq
 8005d72:	2301      	moveq	r3, #1
 8005d74:	2300      	movne	r3, #0
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	e029      	b.n	8005dce <I2C_Slave_ISR_DMA+0x2b6>
 8005d7a:	bf00      	nop
 8005d7c:	40020010 	.word	0x40020010
 8005d80:	40020028 	.word	0x40020028
 8005d84:	40020040 	.word	0x40020040
 8005d88:	40020058 	.word	0x40020058
 8005d8c:	40020070 	.word	0x40020070
 8005d90:	40020088 	.word	0x40020088
 8005d94:	400200a0 	.word	0x400200a0
 8005d98:	400200b8 	.word	0x400200b8
 8005d9c:	40020410 	.word	0x40020410
 8005da0:	40020428 	.word	0x40020428
 8005da4:	40020440 	.word	0x40020440
 8005da8:	40020458 	.word	0x40020458
 8005dac:	40020470 	.word	0x40020470
 8005db0:	40020488 	.word	0x40020488
 8005db4:	400204a0 	.word	0x400204a0
 8005db8:	400204b8 	.word	0x400204b8
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	bf0c      	ite	eq
 8005dc8:	2301      	moveq	r3, #1
 8005dca:	2300      	movne	r3, #0
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d128      	bne.n	8005e2e <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b28      	cmp	r3, #40	; 0x28
 8005de6:	d108      	bne.n	8005dfa <I2C_Slave_ISR_DMA+0x2e2>
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dee:	d104      	bne.n	8005dfa <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005df0:	68b9      	ldr	r1, [r7, #8]
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 fca4 	bl	8006740 <I2C_ITListenCplt>
 8005df8:	e048      	b.n	8005e8c <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b29      	cmp	r3, #41	; 0x29
 8005e04:	d10e      	bne.n	8005e24 <I2C_Slave_ISR_DMA+0x30c>
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e0c:	d00a      	beq.n	8005e24 <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2210      	movs	r2, #16
 8005e14:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005e16:	68f8      	ldr	r0, [r7, #12]
 8005e18:	f000 fdfd 	bl	8006a16 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005e1c:	68f8      	ldr	r0, [r7, #12]
 8005e1e:	f000 f916 	bl	800604e <I2C_ITSlaveSeqCplt>
 8005e22:	e033      	b.n	8005e8c <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2210      	movs	r2, #16
 8005e2a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8005e2c:	e034      	b.n	8005e98 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2210      	movs	r2, #16
 8005e34:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3a:	f043 0204 	orr.w	r2, r3, #4
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e48:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d003      	beq.n	8005e58 <I2C_Slave_ISR_DMA+0x340>
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e56:	d11f      	bne.n	8005e98 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e58:	7dfb      	ldrb	r3, [r7, #23]
 8005e5a:	2b21      	cmp	r3, #33	; 0x21
 8005e5c:	d002      	beq.n	8005e64 <I2C_Slave_ISR_DMA+0x34c>
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
 8005e60:	2b29      	cmp	r3, #41	; 0x29
 8005e62:	d103      	bne.n	8005e6c <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2221      	movs	r2, #33	; 0x21
 8005e68:	631a      	str	r2, [r3, #48]	; 0x30
 8005e6a:	e008      	b.n	8005e7e <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
 8005e6e:	2b22      	cmp	r3, #34	; 0x22
 8005e70:	d002      	beq.n	8005e78 <I2C_Slave_ISR_DMA+0x360>
 8005e72:	7dfb      	ldrb	r3, [r7, #23]
 8005e74:	2b2a      	cmp	r3, #42	; 0x2a
 8005e76:	d102      	bne.n	8005e7e <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2222      	movs	r2, #34	; 0x22
 8005e7c:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e82:	4619      	mov	r1, r3
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 fcaf 	bl	80067e8 <I2C_ITError>
      if (treatdmanack == 1U)
 8005e8a:	e005      	b.n	8005e98 <I2C_Slave_ISR_DMA+0x380>
 8005e8c:	e004      	b.n	8005e98 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2210      	movs	r2, #16
 8005e94:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e96:	e00f      	b.n	8005eb8 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8005e98:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005e9a:	e00d      	b.n	8005eb8 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d008      	beq.n	8005eb8 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005eb0:	68b9      	ldr	r1, [r7, #8]
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 f80a 	bl	8005ecc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3720      	adds	r7, #32
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop

08005ecc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ee2:	2b28      	cmp	r3, #40	; 0x28
 8005ee4:	d16a      	bne.n	8005fbc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	0c1b      	lsrs	r3, r3, #16
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	0c1b      	lsrs	r3, r3, #16
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005f04:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f12:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005f20:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d138      	bne.n	8005f9c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005f2a:	897b      	ldrh	r3, [r7, #10]
 8005f2c:	09db      	lsrs	r3, r3, #7
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	89bb      	ldrh	r3, [r7, #12]
 8005f32:	4053      	eors	r3, r2
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	f003 0306 	and.w	r3, r3, #6
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d11c      	bne.n	8005f78 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005f3e:	897b      	ldrh	r3, [r7, #10]
 8005f40:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d13b      	bne.n	8005fcc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2208      	movs	r2, #8
 8005f60:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005f6a:	89ba      	ldrh	r2, [r7, #12]
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff f988 	bl	8005286 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005f76:	e029      	b.n	8005fcc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005f78:	893b      	ldrh	r3, [r7, #8]
 8005f7a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fe41 	bl	8006c08 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005f8e:	89ba      	ldrh	r2, [r7, #12]
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	4619      	mov	r1, r3
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f7ff f976 	bl	8005286 <HAL_I2C_AddrCallback>
}
 8005f9a:	e017      	b.n	8005fcc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 fe31 	bl	8006c08 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005fae:	89ba      	ldrh	r2, [r7, #12]
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f7ff f966 	bl	8005286 <HAL_I2C_AddrCallback>
}
 8005fba:	e007      	b.n	8005fcc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2208      	movs	r2, #8
 8005fc2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b21      	cmp	r3, #33	; 0x21
 8005fee:	d115      	bne.n	800601c <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2211      	movs	r2, #17
 8005ffc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006004:	2101      	movs	r1, #1
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fdfe 	bl	8006c08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f00b fe2b 	bl	8011c70 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800601a:	e014      	b.n	8006046 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2212      	movs	r2, #18
 8006028:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006030:	2102      	movs	r1, #2
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fde8 	bl	8006c08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f00b fe09 	bl	8011c58 <HAL_I2C_MasterRxCpltCallback>
}
 8006046:	bf00      	nop
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	e00c      	b.n	800609c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d007      	beq.n	800609c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800609a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b29      	cmp	r3, #41	; 0x29
 80060a6:	d112      	bne.n	80060ce <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2228      	movs	r2, #40	; 0x28
 80060ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2221      	movs	r2, #33	; 0x21
 80060b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80060b6:	2101      	movs	r1, #1
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fda5 	bl	8006c08 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f00b fdea 	bl	8011ca0 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80060cc:	e017      	b.n	80060fe <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b2a      	cmp	r3, #42	; 0x2a
 80060d8:	d111      	bne.n	80060fe <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2228      	movs	r2, #40	; 0x28
 80060de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2222      	movs	r2, #34	; 0x22
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80060e8:	2102      	movs	r1, #2
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 fd8c 	bl	8006c08 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f00b fdc5 	bl	8011c88 <HAL_I2C_SlaveRxCpltCallback>
}
 80060fe:	bf00      	nop
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2220      	movs	r2, #32
 800611c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b21      	cmp	r3, #33	; 0x21
 8006128:	d107      	bne.n	800613a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800612a:	2101      	movs	r1, #1
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fd6b 	bl	8006c08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2211      	movs	r2, #17
 8006136:	631a      	str	r2, [r3, #48]	; 0x30
 8006138:	e00c      	b.n	8006154 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b22      	cmp	r3, #34	; 0x22
 8006144:	d106      	bne.n	8006154 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006146:	2102      	movs	r1, #2
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fd5d 	bl	8006c08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2212      	movs	r2, #18
 8006152:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6859      	ldr	r1, [r3, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	4b4c      	ldr	r3, [pc, #304]	; (8006290 <I2C_ITMasterCplt+0x188>)
 8006160:	400b      	ands	r3, r1
 8006162:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a49      	ldr	r2, [pc, #292]	; (8006294 <I2C_ITMasterCplt+0x18c>)
 800616e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	f003 0310 	and.w	r3, r3, #16
 8006176:	2b00      	cmp	r3, #0
 8006178:	d009      	beq.n	800618e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2210      	movs	r2, #16
 8006180:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006186:	f043 0204 	orr.w	r2, r3, #4
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b60      	cmp	r3, #96	; 0x60
 8006198:	d10a      	bne.n	80061b0 <I2C_ITMasterCplt+0xa8>
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80061ae:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 fc30 	bl	8006a16 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ba:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b60      	cmp	r3, #96	; 0x60
 80061c6:	d002      	beq.n	80061ce <I2C_ITMasterCplt+0xc6>
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d006      	beq.n	80061dc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fb07 	bl	80067e8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80061da:	e054      	b.n	8006286 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	2b21      	cmp	r3, #33	; 0x21
 80061e6:	d124      	bne.n	8006232 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b40      	cmp	r3, #64	; 0x40
 8006200:	d10b      	bne.n	800621a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f00b fd5c 	bl	8011cd0 <HAL_I2C_MemTxCpltCallback>
}
 8006218:	e035      	b.n	8006286 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f00b fd20 	bl	8011c70 <HAL_I2C_MasterTxCpltCallback>
}
 8006230:	e029      	b.n	8006286 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b22      	cmp	r3, #34	; 0x22
 800623c:	d123      	bne.n	8006286 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b40      	cmp	r3, #64	; 0x40
 8006256:	d10b      	bne.n	8006270 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f00b fd25 	bl	8011cb8 <HAL_I2C_MemRxCpltCallback>
}
 800626e:	e00a      	b.n	8006286 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f00b fce9 	bl	8011c58 <HAL_I2C_MasterRxCpltCallback>
}
 8006286:	bf00      	nop
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	fe00e800 	.word	0xfe00e800
 8006294:	ffff0000 	.word	0xffff0000

08006298 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b086      	sub	sp, #24
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ba:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2220      	movs	r2, #32
 80062c2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80062c4:	7afb      	ldrb	r3, [r7, #11]
 80062c6:	2b21      	cmp	r3, #33	; 0x21
 80062c8:	d002      	beq.n	80062d0 <I2C_ITSlaveCplt+0x38>
 80062ca:	7afb      	ldrb	r3, [r7, #11]
 80062cc:	2b29      	cmp	r3, #41	; 0x29
 80062ce:	d108      	bne.n	80062e2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80062d0:	f248 0101 	movw	r1, #32769	; 0x8001
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 fc97 	bl	8006c08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2221      	movs	r2, #33	; 0x21
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
 80062e0:	e019      	b.n	8006316 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80062e2:	7afb      	ldrb	r3, [r7, #11]
 80062e4:	2b22      	cmp	r3, #34	; 0x22
 80062e6:	d002      	beq.n	80062ee <I2C_ITSlaveCplt+0x56>
 80062e8:	7afb      	ldrb	r3, [r7, #11]
 80062ea:	2b2a      	cmp	r3, #42	; 0x2a
 80062ec:	d108      	bne.n	8006300 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80062ee:	f248 0102 	movw	r1, #32770	; 0x8002
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 fc88 	bl	8006c08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2222      	movs	r2, #34	; 0x22
 80062fc:	631a      	str	r2, [r3, #48]	; 0x30
 80062fe:	e00a      	b.n	8006316 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006300:	7afb      	ldrb	r3, [r7, #11]
 8006302:	2b28      	cmp	r3, #40	; 0x28
 8006304:	d107      	bne.n	8006316 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006306:	f248 0103 	movw	r1, #32771	; 0x8003
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 fc7c 	bl	8006c08 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006324:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6859      	ldr	r1, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	4b7f      	ldr	r3, [pc, #508]	; (8006530 <I2C_ITSlaveCplt+0x298>)
 8006332:	400b      	ands	r3, r1
 8006334:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fb6d 	bl	8006a16 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d07a      	beq.n	800643c <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006354:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635a:	2b00      	cmp	r3, #0
 800635c:	f000 8111 	beq.w	8006582 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a73      	ldr	r2, [pc, #460]	; (8006534 <I2C_ITSlaveCplt+0x29c>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d059      	beq.n	8006420 <I2C_ITSlaveCplt+0x188>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a71      	ldr	r2, [pc, #452]	; (8006538 <I2C_ITSlaveCplt+0x2a0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d053      	beq.n	8006420 <I2C_ITSlaveCplt+0x188>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a6f      	ldr	r2, [pc, #444]	; (800653c <I2C_ITSlaveCplt+0x2a4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d04d      	beq.n	8006420 <I2C_ITSlaveCplt+0x188>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a6d      	ldr	r2, [pc, #436]	; (8006540 <I2C_ITSlaveCplt+0x2a8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d047      	beq.n	8006420 <I2C_ITSlaveCplt+0x188>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a6b      	ldr	r2, [pc, #428]	; (8006544 <I2C_ITSlaveCplt+0x2ac>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d041      	beq.n	8006420 <I2C_ITSlaveCplt+0x188>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a69      	ldr	r2, [pc, #420]	; (8006548 <I2C_ITSlaveCplt+0x2b0>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d03b      	beq.n	8006420 <I2C_ITSlaveCplt+0x188>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a67      	ldr	r2, [pc, #412]	; (800654c <I2C_ITSlaveCplt+0x2b4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d035      	beq.n	8006420 <I2C_ITSlaveCplt+0x188>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a65      	ldr	r2, [pc, #404]	; (8006550 <I2C_ITSlaveCplt+0x2b8>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d02f      	beq.n	8006420 <I2C_ITSlaveCplt+0x188>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a63      	ldr	r2, [pc, #396]	; (8006554 <I2C_ITSlaveCplt+0x2bc>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d029      	beq.n	8006420 <I2C_ITSlaveCplt+0x188>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a61      	ldr	r2, [pc, #388]	; (8006558 <I2C_ITSlaveCplt+0x2c0>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d023      	beq.n	8006420 <I2C_ITSlaveCplt+0x188>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a5f      	ldr	r2, [pc, #380]	; (800655c <I2C_ITSlaveCplt+0x2c4>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d01d      	beq.n	8006420 <I2C_ITSlaveCplt+0x188>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a5d      	ldr	r2, [pc, #372]	; (8006560 <I2C_ITSlaveCplt+0x2c8>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d017      	beq.n	8006420 <I2C_ITSlaveCplt+0x188>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a5b      	ldr	r2, [pc, #364]	; (8006564 <I2C_ITSlaveCplt+0x2cc>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d011      	beq.n	8006420 <I2C_ITSlaveCplt+0x188>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a59      	ldr	r2, [pc, #356]	; (8006568 <I2C_ITSlaveCplt+0x2d0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d00b      	beq.n	8006420 <I2C_ITSlaveCplt+0x188>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a57      	ldr	r2, [pc, #348]	; (800656c <I2C_ITSlaveCplt+0x2d4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d005      	beq.n	8006420 <I2C_ITSlaveCplt+0x188>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a55      	ldr	r2, [pc, #340]	; (8006570 <I2C_ITSlaveCplt+0x2d8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d105      	bne.n	800642c <I2C_ITSlaveCplt+0x194>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	b29b      	uxth	r3, r3
 800642a:	e004      	b.n	8006436 <I2C_ITSlaveCplt+0x19e>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	b29b      	uxth	r3, r3
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	8553      	strh	r3, [r2, #42]	; 0x2a
 800643a:	e0a2      	b.n	8006582 <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 809d 	beq.w	8006582 <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006456:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645c:	2b00      	cmp	r3, #0
 800645e:	f000 8090 	beq.w	8006582 <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a32      	ldr	r2, [pc, #200]	; (8006534 <I2C_ITSlaveCplt+0x29c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d059      	beq.n	8006522 <I2C_ITSlaveCplt+0x28a>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a30      	ldr	r2, [pc, #192]	; (8006538 <I2C_ITSlaveCplt+0x2a0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d053      	beq.n	8006522 <I2C_ITSlaveCplt+0x28a>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a2e      	ldr	r2, [pc, #184]	; (800653c <I2C_ITSlaveCplt+0x2a4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d04d      	beq.n	8006522 <I2C_ITSlaveCplt+0x28a>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a2c      	ldr	r2, [pc, #176]	; (8006540 <I2C_ITSlaveCplt+0x2a8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d047      	beq.n	8006522 <I2C_ITSlaveCplt+0x28a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a2a      	ldr	r2, [pc, #168]	; (8006544 <I2C_ITSlaveCplt+0x2ac>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d041      	beq.n	8006522 <I2C_ITSlaveCplt+0x28a>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a28      	ldr	r2, [pc, #160]	; (8006548 <I2C_ITSlaveCplt+0x2b0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d03b      	beq.n	8006522 <I2C_ITSlaveCplt+0x28a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a26      	ldr	r2, [pc, #152]	; (800654c <I2C_ITSlaveCplt+0x2b4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d035      	beq.n	8006522 <I2C_ITSlaveCplt+0x28a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a24      	ldr	r2, [pc, #144]	; (8006550 <I2C_ITSlaveCplt+0x2b8>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d02f      	beq.n	8006522 <I2C_ITSlaveCplt+0x28a>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a22      	ldr	r2, [pc, #136]	; (8006554 <I2C_ITSlaveCplt+0x2bc>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d029      	beq.n	8006522 <I2C_ITSlaveCplt+0x28a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a20      	ldr	r2, [pc, #128]	; (8006558 <I2C_ITSlaveCplt+0x2c0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d023      	beq.n	8006522 <I2C_ITSlaveCplt+0x28a>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1e      	ldr	r2, [pc, #120]	; (800655c <I2C_ITSlaveCplt+0x2c4>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d01d      	beq.n	8006522 <I2C_ITSlaveCplt+0x28a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a1c      	ldr	r2, [pc, #112]	; (8006560 <I2C_ITSlaveCplt+0x2c8>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d017      	beq.n	8006522 <I2C_ITSlaveCplt+0x28a>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a1a      	ldr	r2, [pc, #104]	; (8006564 <I2C_ITSlaveCplt+0x2cc>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d011      	beq.n	8006522 <I2C_ITSlaveCplt+0x28a>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a18      	ldr	r2, [pc, #96]	; (8006568 <I2C_ITSlaveCplt+0x2d0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00b      	beq.n	8006522 <I2C_ITSlaveCplt+0x28a>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a16      	ldr	r2, [pc, #88]	; (800656c <I2C_ITSlaveCplt+0x2d4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d005      	beq.n	8006522 <I2C_ITSlaveCplt+0x28a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a14      	ldr	r2, [pc, #80]	; (8006570 <I2C_ITSlaveCplt+0x2d8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d128      	bne.n	8006574 <I2C_ITSlaveCplt+0x2dc>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	b29b      	uxth	r3, r3
 800652c:	e027      	b.n	800657e <I2C_ITSlaveCplt+0x2e6>
 800652e:	bf00      	nop
 8006530:	fe00e800 	.word	0xfe00e800
 8006534:	40020010 	.word	0x40020010
 8006538:	40020028 	.word	0x40020028
 800653c:	40020040 	.word	0x40020040
 8006540:	40020058 	.word	0x40020058
 8006544:	40020070 	.word	0x40020070
 8006548:	40020088 	.word	0x40020088
 800654c:	400200a0 	.word	0x400200a0
 8006550:	400200b8 	.word	0x400200b8
 8006554:	40020410 	.word	0x40020410
 8006558:	40020428 	.word	0x40020428
 800655c:	40020440 	.word	0x40020440
 8006560:	40020458 	.word	0x40020458
 8006564:	40020470 	.word	0x40020470
 8006568:	40020488 	.word	0x40020488
 800656c:	400204a0 	.word	0x400204a0
 8006570:	400204b8 	.word	0x400204b8
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	b29b      	uxth	r3, r3
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d020      	beq.n	80065ce <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f023 0304 	bic.w	r3, r3, #4
 8006592:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00c      	beq.n	80065ce <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d005      	beq.n	80065e4 <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065dc:	f043 0204 	orr.w	r2, r3, #4
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	f003 0310 	and.w	r3, r3, #16
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d049      	beq.n	8006682 <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d044      	beq.n	8006682 <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d128      	bne.n	8006654 <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006608:	b2db      	uxtb	r3, r3
 800660a:	2b28      	cmp	r3, #40	; 0x28
 800660c:	d108      	bne.n	8006620 <I2C_ITSlaveCplt+0x388>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006614:	d104      	bne.n	8006620 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006616:	6979      	ldr	r1, [r7, #20]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f891 	bl	8006740 <I2C_ITListenCplt>
 800661e:	e030      	b.n	8006682 <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b29      	cmp	r3, #41	; 0x29
 800662a:	d10e      	bne.n	800664a <I2C_ITSlaveCplt+0x3b2>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006632:	d00a      	beq.n	800664a <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2210      	movs	r2, #16
 800663a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f9ea 	bl	8006a16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f7ff fd03 	bl	800604e <I2C_ITSlaveSeqCplt>
 8006648:	e01b      	b.n	8006682 <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2210      	movs	r2, #16
 8006650:	61da      	str	r2, [r3, #28]
 8006652:	e016      	b.n	8006682 <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2210      	movs	r2, #16
 800665a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006660:	f043 0204 	orr.w	r2, r3, #4
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <I2C_ITSlaveCplt+0x3de>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006674:	d105      	bne.n	8006682 <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f8b3 	bl	80067e8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006694:	2b00      	cmp	r3, #0
 8006696:	d010      	beq.n	80066ba <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f8a2 	bl	80067e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b28      	cmp	r3, #40	; 0x28
 80066ae:	d141      	bne.n	8006734 <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80066b0:	6979      	ldr	r1, [r7, #20]
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f844 	bl	8006740 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066b8:	e03c      	b.n	8006734 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066c2:	d014      	beq.n	80066ee <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f7ff fcc2 	bl	800604e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a1b      	ldr	r2, [pc, #108]	; (800673c <I2C_ITSlaveCplt+0x4a4>)
 80066ce:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7fe fddb 	bl	80052a2 <HAL_I2C_ListenCpltCallback>
}
 80066ec:	e022      	b.n	8006734 <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b22      	cmp	r3, #34	; 0x22
 80066f8:	d10e      	bne.n	8006718 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f00b fab9 	bl	8011c88 <HAL_I2C_SlaveRxCpltCallback>
}
 8006716:	e00d      	b.n	8006734 <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2220      	movs	r2, #32
 800671c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f00b fab6 	bl	8011ca0 <HAL_I2C_SlaveTxCpltCallback>
}
 8006734:	bf00      	nop
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}
 800673c:	ffff0000 	.word	0xffff0000

08006740 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a25      	ldr	r2, [pc, #148]	; (80067e4 <I2C_ITListenCplt+0xa4>)
 800674e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	f003 0304 	and.w	r3, r3, #4
 8006772:	2b00      	cmp	r3, #0
 8006774:	d022      	beq.n	80067bc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006792:	2b00      	cmp	r3, #0
 8006794:	d012      	beq.n	80067bc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800679a:	3b01      	subs	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b4:	f043 0204 	orr.w	r2, r3, #4
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80067bc:	f248 0103 	movw	r1, #32771	; 0x8003
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fa21 	bl	8006c08 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2210      	movs	r2, #16
 80067cc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fe fd63 	bl	80052a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	ffff0000 	.word	0xffff0000

080067e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067f8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a6d      	ldr	r2, [pc, #436]	; (80069bc <I2C_ITError+0x1d4>)
 8006806:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	431a      	orrs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	2b28      	cmp	r3, #40	; 0x28
 800681e:	d005      	beq.n	800682c <I2C_ITError+0x44>
 8006820:	7bfb      	ldrb	r3, [r7, #15]
 8006822:	2b29      	cmp	r3, #41	; 0x29
 8006824:	d002      	beq.n	800682c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	2b2a      	cmp	r3, #42	; 0x2a
 800682a:	d10b      	bne.n	8006844 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800682c:	2103      	movs	r1, #3
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f9ea 	bl	8006c08 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2228      	movs	r2, #40	; 0x28
 8006838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a60      	ldr	r2, [pc, #384]	; (80069c0 <I2C_ITError+0x1d8>)
 8006840:	635a      	str	r2, [r3, #52]	; 0x34
 8006842:	e030      	b.n	80068a6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006844:	f248 0103 	movw	r1, #32771	; 0x8003
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f9dd 	bl	8006c08 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f8e1 	bl	8006a16 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b60      	cmp	r3, #96	; 0x60
 800685e:	d01f      	beq.n	80068a0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699b      	ldr	r3, [r3, #24]
 800686e:	f003 0320 	and.w	r3, r3, #32
 8006872:	2b20      	cmp	r3, #32
 8006874:	d114      	bne.n	80068a0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	f003 0310 	and.w	r3, r3, #16
 8006880:	2b10      	cmp	r3, #16
 8006882:	d109      	bne.n	8006898 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2210      	movs	r2, #16
 800688a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006890:	f043 0204 	orr.w	r2, r3, #4
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2220      	movs	r2, #32
 800689e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d039      	beq.n	8006928 <I2C_ITError+0x140>
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b11      	cmp	r3, #17
 80068b8:	d002      	beq.n	80068c0 <I2C_ITError+0xd8>
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b21      	cmp	r3, #33	; 0x21
 80068be:	d133      	bne.n	8006928 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068ce:	d107      	bne.n	80068e0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fd fbf3 	bl	80040d0 <HAL_DMA_GetState>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d017      	beq.n	8006920 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	4a33      	ldr	r2, [pc, #204]	; (80069c4 <I2C_ITError+0x1dc>)
 80068f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006904:	4618      	mov	r0, r3
 8006906:	f7fd f99d 	bl	8003c44 <HAL_DMA_Abort_IT>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d04d      	beq.n	80069ac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800691a:	4610      	mov	r0, r2
 800691c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800691e:	e045      	b.n	80069ac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f851 	bl	80069c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006926:	e041      	b.n	80069ac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800692c:	2b00      	cmp	r3, #0
 800692e:	d039      	beq.n	80069a4 <I2C_ITError+0x1bc>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b12      	cmp	r3, #18
 8006934:	d002      	beq.n	800693c <I2C_ITError+0x154>
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2b22      	cmp	r3, #34	; 0x22
 800693a:	d133      	bne.n	80069a4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800694a:	d107      	bne.n	800695c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800695a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006960:	4618      	mov	r0, r3
 8006962:	f7fd fbb5 	bl	80040d0 <HAL_DMA_GetState>
 8006966:	4603      	mov	r3, r0
 8006968:	2b01      	cmp	r3, #1
 800696a:	d017      	beq.n	800699c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006970:	4a14      	ldr	r2, [pc, #80]	; (80069c4 <I2C_ITError+0x1dc>)
 8006972:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006980:	4618      	mov	r0, r3
 8006982:	f7fd f95f 	bl	8003c44 <HAL_DMA_Abort_IT>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d011      	beq.n	80069b0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006996:	4610      	mov	r0, r2
 8006998:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800699a:	e009      	b.n	80069b0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f813 	bl	80069c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069a2:	e005      	b.n	80069b0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f80f 	bl	80069c8 <I2C_TreatErrorCallback>
  }
}
 80069aa:	e002      	b.n	80069b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80069ac:	bf00      	nop
 80069ae:	e000      	b.n	80069b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069b0:	bf00      	nop
}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	ffff0000 	.word	0xffff0000
 80069c0:	08005505 	.word	0x08005505
 80069c4:	08006a5f 	.word	0x08006a5f

080069c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b60      	cmp	r3, #96	; 0x60
 80069da:	d10e      	bne.n	80069fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f00b f985 	bl	8011d02 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80069f8:	e009      	b.n	8006a0e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f00b f96d 	bl	8011ce8 <HAL_I2C_ErrorCallback>
}
 8006a0e:	bf00      	nop
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d103      	bne.n	8006a34 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2200      	movs	r2, #0
 8006a32:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d007      	beq.n	8006a52 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	699a      	ldr	r2, [r3, #24]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f042 0201 	orr.w	r2, r2, #1
 8006a50:	619a      	str	r2, [r3, #24]
  }
}
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d003      	beq.n	8006a7c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a78:	2200      	movs	r2, #0
 8006a7a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d003      	beq.n	8006a8c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a88:	2200      	movs	r2, #0
 8006a8a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f7ff ff9b 	bl	80069c8 <I2C_TreatErrorCallback>
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	607b      	str	r3, [r7, #4]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	817b      	strh	r3, [r7, #10]
 8006aaa:	4613      	mov	r3, r2
 8006aac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006aae:	897b      	ldrh	r3, [r7, #10]
 8006ab0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ab4:	7a7b      	ldrb	r3, [r7, #9]
 8006ab6:	041b      	lsls	r3, r3, #16
 8006ab8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006abc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ac2:	6a3b      	ldr	r3, [r7, #32]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006aca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	0d5b      	lsrs	r3, r3, #21
 8006ad6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006ada:	4b08      	ldr	r3, [pc, #32]	; (8006afc <I2C_TransferConfig+0x60>)
 8006adc:	430b      	orrs	r3, r1
 8006ade:	43db      	mvns	r3, r3
 8006ae0:	ea02 0103 	and.w	r1, r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	03ff63ff 	.word	0x03ff63ff

08006b00 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b14:	4a39      	ldr	r2, [pc, #228]	; (8006bfc <I2C_Enable_IRQ+0xfc>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d032      	beq.n	8006b80 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006b1e:	4a38      	ldr	r2, [pc, #224]	; (8006c00 <I2C_Enable_IRQ+0x100>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d02d      	beq.n	8006b80 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006b28:	4a36      	ldr	r2, [pc, #216]	; (8006c04 <I2C_Enable_IRQ+0x104>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d028      	beq.n	8006b80 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	da03      	bge.n	8006b3e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006b3c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b3e:	887b      	ldrh	r3, [r7, #2]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d003      	beq.n	8006b50 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006b4e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006b50:	887b      	ldrh	r3, [r7, #2]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006b60:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006b62:	887b      	ldrh	r3, [r7, #2]
 8006b64:	2b10      	cmp	r3, #16
 8006b66:	d103      	bne.n	8006b70 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006b6e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b70:	887b      	ldrh	r3, [r7, #2]
 8006b72:	2b20      	cmp	r3, #32
 8006b74:	d133      	bne.n	8006bde <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f043 0320 	orr.w	r3, r3, #32
 8006b7c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b7e:	e02e      	b.n	8006bde <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	da03      	bge.n	8006b90 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006b8e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b90:	887b      	ldrh	r3, [r7, #2]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d003      	beq.n	8006ba2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8006ba0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006ba2:	887b      	ldrh	r3, [r7, #2]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8006bb2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006bb4:	887b      	ldrh	r3, [r7, #2]
 8006bb6:	2b10      	cmp	r3, #16
 8006bb8:	d103      	bne.n	8006bc2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006bc0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006bc2:	887b      	ldrh	r3, [r7, #2]
 8006bc4:	2b20      	cmp	r3, #32
 8006bc6:	d103      	bne.n	8006bd0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006bce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006bd0:	887b      	ldrh	r3, [r7, #2]
 8006bd2:	2b40      	cmp	r3, #64	; 0x40
 8006bd4:	d103      	bne.n	8006bde <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bdc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6819      	ldr	r1, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	601a      	str	r2, [r3, #0]
}
 8006bee:	bf00      	nop
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	080056f7 	.word	0x080056f7
 8006c00:	08005b19 	.word	0x08005b19
 8006c04:	080058cd 	.word	0x080058cd

08006c08 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006c18:	887b      	ldrh	r3, [r7, #2]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00f      	beq.n	8006c42 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006c28:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c36:	2b28      	cmp	r3, #40	; 0x28
 8006c38:	d003      	beq.n	8006c42 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006c40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c42:	887b      	ldrh	r3, [r7, #2]
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00f      	beq.n	8006c6c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8006c52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006c60:	2b28      	cmp	r3, #40	; 0x28
 8006c62:	d003      	beq.n	8006c6c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006c6a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	da03      	bge.n	8006c7c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006c7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006c7c:	887b      	ldrh	r3, [r7, #2]
 8006c7e:	2b10      	cmp	r3, #16
 8006c80:	d103      	bne.n	8006c8a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006c88:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c8a:	887b      	ldrh	r3, [r7, #2]
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d103      	bne.n	8006c98 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f043 0320 	orr.w	r3, r3, #32
 8006c96:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006c98:	887b      	ldrh	r3, [r7, #2]
 8006c9a:	2b40      	cmp	r3, #64	; 0x40
 8006c9c:	d103      	bne.n	8006ca6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ca4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6819      	ldr	r1, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	43da      	mvns	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	400a      	ands	r2, r1
 8006cb6:	601a      	str	r2, [r3, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d138      	bne.n	8006d4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d101      	bne.n	8006ce8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006ce4:	2302      	movs	r3, #2
 8006ce6:	e032      	b.n	8006d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2224      	movs	r2, #36	; 0x24
 8006cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f022 0201 	bic.w	r2, r2, #1
 8006d06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6819      	ldr	r1, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0201 	orr.w	r2, r2, #1
 8006d36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e000      	b.n	8006d4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d4c:	2302      	movs	r3, #2
  }
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b085      	sub	sp, #20
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d139      	bne.n	8006de4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e033      	b.n	8006de6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2224      	movs	r2, #36	; 0x24
 8006d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f022 0201 	bic.w	r2, r2, #1
 8006d9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006dac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	021b      	lsls	r3, r3, #8
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 0201 	orr.w	r2, r2, #1
 8006dce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	e000      	b.n	8006de6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006de4:	2302      	movs	r3, #2
  }
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
	...

08006df4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006dfc:	4b19      	ldr	r3, [pc, #100]	; (8006e64 <HAL_PWREx_ConfigSupply+0x70>)
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b04      	cmp	r3, #4
 8006e06:	d00a      	beq.n	8006e1e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e08:	4b16      	ldr	r3, [pc, #88]	; (8006e64 <HAL_PWREx_ConfigSupply+0x70>)
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	f003 0307 	and.w	r3, r3, #7
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d001      	beq.n	8006e1a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e01f      	b.n	8006e5a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	e01d      	b.n	8006e5a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e1e:	4b11      	ldr	r3, [pc, #68]	; (8006e64 <HAL_PWREx_ConfigSupply+0x70>)
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	f023 0207 	bic.w	r2, r3, #7
 8006e26:	490f      	ldr	r1, [pc, #60]	; (8006e64 <HAL_PWREx_ConfigSupply+0x70>)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e2e:	f7fa fda5 	bl	800197c <HAL_GetTick>
 8006e32:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e34:	e009      	b.n	8006e4a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e36:	f7fa fda1 	bl	800197c <HAL_GetTick>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e44:	d901      	bls.n	8006e4a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e007      	b.n	8006e5a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e4a:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <HAL_PWREx_ConfigSupply+0x70>)
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e56:	d1ee      	bne.n	8006e36 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	58024800 	.word	0x58024800

08006e68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08c      	sub	sp, #48	; 0x30
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e3c8      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 8087 	beq.w	8006f96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e88:	4b88      	ldr	r3, [pc, #544]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e92:	4b86      	ldr	r3, [pc, #536]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e96:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e9a:	2b10      	cmp	r3, #16
 8006e9c:	d007      	beq.n	8006eae <HAL_RCC_OscConfig+0x46>
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	2b18      	cmp	r3, #24
 8006ea2:	d110      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x5e>
 8006ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d10b      	bne.n	8006ec6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eae:	4b7f      	ldr	r3, [pc, #508]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d06c      	beq.n	8006f94 <HAL_RCC_OscConfig+0x12c>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d168      	bne.n	8006f94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e3a2      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ece:	d106      	bne.n	8006ede <HAL_RCC_OscConfig+0x76>
 8006ed0:	4b76      	ldr	r3, [pc, #472]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a75      	ldr	r2, [pc, #468]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eda:	6013      	str	r3, [r2, #0]
 8006edc:	e02e      	b.n	8006f3c <HAL_RCC_OscConfig+0xd4>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10c      	bne.n	8006f00 <HAL_RCC_OscConfig+0x98>
 8006ee6:	4b71      	ldr	r3, [pc, #452]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a70      	ldr	r2, [pc, #448]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	4b6e      	ldr	r3, [pc, #440]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a6d      	ldr	r2, [pc, #436]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006ef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006efc:	6013      	str	r3, [r2, #0]
 8006efe:	e01d      	b.n	8006f3c <HAL_RCC_OscConfig+0xd4>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f08:	d10c      	bne.n	8006f24 <HAL_RCC_OscConfig+0xbc>
 8006f0a:	4b68      	ldr	r3, [pc, #416]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a67      	ldr	r2, [pc, #412]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006f10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	4b65      	ldr	r3, [pc, #404]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a64      	ldr	r2, [pc, #400]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	e00b      	b.n	8006f3c <HAL_RCC_OscConfig+0xd4>
 8006f24:	4b61      	ldr	r3, [pc, #388]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a60      	ldr	r2, [pc, #384]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006f2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	4b5e      	ldr	r3, [pc, #376]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a5d      	ldr	r2, [pc, #372]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d013      	beq.n	8006f6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f44:	f7fa fd1a 	bl	800197c <HAL_GetTick>
 8006f48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f4a:	e008      	b.n	8006f5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f4c:	f7fa fd16 	bl	800197c <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	2b64      	cmp	r3, #100	; 0x64
 8006f58:	d901      	bls.n	8006f5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	e356      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f5e:	4b53      	ldr	r3, [pc, #332]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0f0      	beq.n	8006f4c <HAL_RCC_OscConfig+0xe4>
 8006f6a:	e014      	b.n	8006f96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f6c:	f7fa fd06 	bl	800197c <HAL_GetTick>
 8006f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f72:	e008      	b.n	8006f86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f74:	f7fa fd02 	bl	800197c <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	2b64      	cmp	r3, #100	; 0x64
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e342      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f86:	4b49      	ldr	r3, [pc, #292]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1f0      	bne.n	8006f74 <HAL_RCC_OscConfig+0x10c>
 8006f92:	e000      	b.n	8006f96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	f000 808c 	beq.w	80070bc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fa4:	4b41      	ldr	r3, [pc, #260]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fae:	4b3f      	ldr	r3, [pc, #252]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d007      	beq.n	8006fca <HAL_RCC_OscConfig+0x162>
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	2b18      	cmp	r3, #24
 8006fbe:	d137      	bne.n	8007030 <HAL_RCC_OscConfig+0x1c8>
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	f003 0303 	and.w	r3, r3, #3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d132      	bne.n	8007030 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fca:	4b38      	ldr	r3, [pc, #224]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 0304 	and.w	r3, r3, #4
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d005      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x17a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d101      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e314      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006fe2:	4b32      	ldr	r3, [pc, #200]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f023 0219 	bic.w	r2, r3, #25
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	492f      	ldr	r1, [pc, #188]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff4:	f7fa fcc2 	bl	800197c <HAL_GetTick>
 8006ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006ffa:	e008      	b.n	800700e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ffc:	f7fa fcbe 	bl	800197c <HAL_GetTick>
 8007000:	4602      	mov	r2, r0
 8007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007004:	1ad3      	subs	r3, r2, r3
 8007006:	2b02      	cmp	r3, #2
 8007008:	d901      	bls.n	800700e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e2fe      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800700e:	4b27      	ldr	r3, [pc, #156]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 0304 	and.w	r3, r3, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	d0f0      	beq.n	8006ffc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800701a:	4b24      	ldr	r3, [pc, #144]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691b      	ldr	r3, [r3, #16]
 8007026:	061b      	lsls	r3, r3, #24
 8007028:	4920      	ldr	r1, [pc, #128]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 800702a:	4313      	orrs	r3, r2
 800702c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800702e:	e045      	b.n	80070bc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d026      	beq.n	8007086 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007038:	4b1c      	ldr	r3, [pc, #112]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f023 0219 	bic.w	r2, r3, #25
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68db      	ldr	r3, [r3, #12]
 8007044:	4919      	ldr	r1, [pc, #100]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8007046:	4313      	orrs	r3, r2
 8007048:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800704a:	f7fa fc97 	bl	800197c <HAL_GetTick>
 800704e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007050:	e008      	b.n	8007064 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007052:	f7fa fc93 	bl	800197c <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	2b02      	cmp	r3, #2
 800705e:	d901      	bls.n	8007064 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007060:	2303      	movs	r3, #3
 8007062:	e2d3      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007064:	4b11      	ldr	r3, [pc, #68]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0304 	and.w	r3, r3, #4
 800706c:	2b00      	cmp	r3, #0
 800706e:	d0f0      	beq.n	8007052 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007070:	4b0e      	ldr	r3, [pc, #56]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	061b      	lsls	r3, r3, #24
 800707e:	490b      	ldr	r1, [pc, #44]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8007080:	4313      	orrs	r3, r2
 8007082:	604b      	str	r3, [r1, #4]
 8007084:	e01a      	b.n	80070bc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007086:	4b09      	ldr	r3, [pc, #36]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a08      	ldr	r2, [pc, #32]	; (80070ac <HAL_RCC_OscConfig+0x244>)
 800708c:	f023 0301 	bic.w	r3, r3, #1
 8007090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007092:	f7fa fc73 	bl	800197c <HAL_GetTick>
 8007096:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007098:	e00a      	b.n	80070b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800709a:	f7fa fc6f 	bl	800197c <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d903      	bls.n	80070b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e2af      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
 80070ac:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80070b0:	4b96      	ldr	r3, [pc, #600]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0304 	and.w	r3, r3, #4
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1ee      	bne.n	800709a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0310 	and.w	r3, r3, #16
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d06a      	beq.n	800719e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070c8:	4b90      	ldr	r3, [pc, #576]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070d0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070d2:	4b8e      	ldr	r3, [pc, #568]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 80070d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	2b08      	cmp	r3, #8
 80070dc:	d007      	beq.n	80070ee <HAL_RCC_OscConfig+0x286>
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	2b18      	cmp	r3, #24
 80070e2:	d11b      	bne.n	800711c <HAL_RCC_OscConfig+0x2b4>
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	f003 0303 	and.w	r3, r3, #3
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d116      	bne.n	800711c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80070ee:	4b87      	ldr	r3, [pc, #540]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d005      	beq.n	8007106 <HAL_RCC_OscConfig+0x29e>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	2b80      	cmp	r3, #128	; 0x80
 8007100:	d001      	beq.n	8007106 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e282      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007106:	4b81      	ldr	r3, [pc, #516]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	061b      	lsls	r3, r3, #24
 8007114:	497d      	ldr	r1, [pc, #500]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 8007116:	4313      	orrs	r3, r2
 8007118:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800711a:	e040      	b.n	800719e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	69db      	ldr	r3, [r3, #28]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d023      	beq.n	800716c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007124:	4b79      	ldr	r3, [pc, #484]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a78      	ldr	r2, [pc, #480]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 800712a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800712e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007130:	f7fa fc24 	bl	800197c <HAL_GetTick>
 8007134:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007136:	e008      	b.n	800714a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007138:	f7fa fc20 	bl	800197c <HAL_GetTick>
 800713c:	4602      	mov	r2, r0
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	1ad3      	subs	r3, r2, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d901      	bls.n	800714a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007146:	2303      	movs	r3, #3
 8007148:	e260      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800714a:	4b70      	ldr	r3, [pc, #448]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007152:	2b00      	cmp	r3, #0
 8007154:	d0f0      	beq.n	8007138 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007156:	4b6d      	ldr	r3, [pc, #436]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	061b      	lsls	r3, r3, #24
 8007164:	4969      	ldr	r1, [pc, #420]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 8007166:	4313      	orrs	r3, r2
 8007168:	60cb      	str	r3, [r1, #12]
 800716a:	e018      	b.n	800719e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800716c:	4b67      	ldr	r3, [pc, #412]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a66      	ldr	r2, [pc, #408]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 8007172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007178:	f7fa fc00 	bl	800197c <HAL_GetTick>
 800717c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800717e:	e008      	b.n	8007192 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007180:	f7fa fbfc 	bl	800197c <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b02      	cmp	r3, #2
 800718c:	d901      	bls.n	8007192 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e23c      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007192:	4b5e      	ldr	r3, [pc, #376]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1f0      	bne.n	8007180 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f003 0308 	and.w	r3, r3, #8
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d036      	beq.n	8007218 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d019      	beq.n	80071e6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071b2:	4b56      	ldr	r3, [pc, #344]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 80071b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071b6:	4a55      	ldr	r2, [pc, #340]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 80071b8:	f043 0301 	orr.w	r3, r3, #1
 80071bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071be:	f7fa fbdd 	bl	800197c <HAL_GetTick>
 80071c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071c4:	e008      	b.n	80071d8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071c6:	f7fa fbd9 	bl	800197c <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d901      	bls.n	80071d8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e219      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80071d8:	4b4c      	ldr	r3, [pc, #304]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 80071da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0f0      	beq.n	80071c6 <HAL_RCC_OscConfig+0x35e>
 80071e4:	e018      	b.n	8007218 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071e6:	4b49      	ldr	r3, [pc, #292]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 80071e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ea:	4a48      	ldr	r2, [pc, #288]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 80071ec:	f023 0301 	bic.w	r3, r3, #1
 80071f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071f2:	f7fa fbc3 	bl	800197c <HAL_GetTick>
 80071f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071f8:	e008      	b.n	800720c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071fa:	f7fa fbbf 	bl	800197c <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d901      	bls.n	800720c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e1ff      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800720c:	4b3f      	ldr	r3, [pc, #252]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 800720e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1f0      	bne.n	80071fa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0320 	and.w	r3, r3, #32
 8007220:	2b00      	cmp	r3, #0
 8007222:	d036      	beq.n	8007292 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	699b      	ldr	r3, [r3, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d019      	beq.n	8007260 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800722c:	4b37      	ldr	r3, [pc, #220]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a36      	ldr	r2, [pc, #216]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 8007232:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007236:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007238:	f7fa fba0 	bl	800197c <HAL_GetTick>
 800723c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800723e:	e008      	b.n	8007252 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007240:	f7fa fb9c 	bl	800197c <HAL_GetTick>
 8007244:	4602      	mov	r2, r0
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	1ad3      	subs	r3, r2, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e1dc      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007252:	4b2e      	ldr	r3, [pc, #184]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0f0      	beq.n	8007240 <HAL_RCC_OscConfig+0x3d8>
 800725e:	e018      	b.n	8007292 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007260:	4b2a      	ldr	r3, [pc, #168]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a29      	ldr	r2, [pc, #164]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 8007266:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800726a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800726c:	f7fa fb86 	bl	800197c <HAL_GetTick>
 8007270:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007272:	e008      	b.n	8007286 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007274:	f7fa fb82 	bl	800197c <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b02      	cmp	r3, #2
 8007280:	d901      	bls.n	8007286 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e1c2      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007286:	4b21      	ldr	r3, [pc, #132]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d1f0      	bne.n	8007274 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f003 0304 	and.w	r3, r3, #4
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 8086 	beq.w	80073ac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80072a0:	4b1b      	ldr	r3, [pc, #108]	; (8007310 <HAL_RCC_OscConfig+0x4a8>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a1a      	ldr	r2, [pc, #104]	; (8007310 <HAL_RCC_OscConfig+0x4a8>)
 80072a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072ac:	f7fa fb66 	bl	800197c <HAL_GetTick>
 80072b0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072b2:	e008      	b.n	80072c6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072b4:	f7fa fb62 	bl	800197c <HAL_GetTick>
 80072b8:	4602      	mov	r2, r0
 80072ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b64      	cmp	r3, #100	; 0x64
 80072c0:	d901      	bls.n	80072c6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80072c2:	2303      	movs	r3, #3
 80072c4:	e1a2      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072c6:	4b12      	ldr	r3, [pc, #72]	; (8007310 <HAL_RCC_OscConfig+0x4a8>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0f0      	beq.n	80072b4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d106      	bne.n	80072e8 <HAL_RCC_OscConfig+0x480>
 80072da:	4b0c      	ldr	r3, [pc, #48]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 80072dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072de:	4a0b      	ldr	r2, [pc, #44]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 80072e0:	f043 0301 	orr.w	r3, r3, #1
 80072e4:	6713      	str	r3, [r2, #112]	; 0x70
 80072e6:	e032      	b.n	800734e <HAL_RCC_OscConfig+0x4e6>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d111      	bne.n	8007314 <HAL_RCC_OscConfig+0x4ac>
 80072f0:	4b06      	ldr	r3, [pc, #24]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 80072f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f4:	4a05      	ldr	r2, [pc, #20]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 80072f6:	f023 0301 	bic.w	r3, r3, #1
 80072fa:	6713      	str	r3, [r2, #112]	; 0x70
 80072fc:	4b03      	ldr	r3, [pc, #12]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 80072fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007300:	4a02      	ldr	r2, [pc, #8]	; (800730c <HAL_RCC_OscConfig+0x4a4>)
 8007302:	f023 0304 	bic.w	r3, r3, #4
 8007306:	6713      	str	r3, [r2, #112]	; 0x70
 8007308:	e021      	b.n	800734e <HAL_RCC_OscConfig+0x4e6>
 800730a:	bf00      	nop
 800730c:	58024400 	.word	0x58024400
 8007310:	58024800 	.word	0x58024800
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	2b05      	cmp	r3, #5
 800731a:	d10c      	bne.n	8007336 <HAL_RCC_OscConfig+0x4ce>
 800731c:	4b83      	ldr	r3, [pc, #524]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 800731e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007320:	4a82      	ldr	r2, [pc, #520]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 8007322:	f043 0304 	orr.w	r3, r3, #4
 8007326:	6713      	str	r3, [r2, #112]	; 0x70
 8007328:	4b80      	ldr	r3, [pc, #512]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 800732a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732c:	4a7f      	ldr	r2, [pc, #508]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 800732e:	f043 0301 	orr.w	r3, r3, #1
 8007332:	6713      	str	r3, [r2, #112]	; 0x70
 8007334:	e00b      	b.n	800734e <HAL_RCC_OscConfig+0x4e6>
 8007336:	4b7d      	ldr	r3, [pc, #500]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 8007338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733a:	4a7c      	ldr	r2, [pc, #496]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 800733c:	f023 0301 	bic.w	r3, r3, #1
 8007340:	6713      	str	r3, [r2, #112]	; 0x70
 8007342:	4b7a      	ldr	r3, [pc, #488]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 8007344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007346:	4a79      	ldr	r2, [pc, #484]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 8007348:	f023 0304 	bic.w	r3, r3, #4
 800734c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d015      	beq.n	8007382 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007356:	f7fa fb11 	bl	800197c <HAL_GetTick>
 800735a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800735c:	e00a      	b.n	8007374 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800735e:	f7fa fb0d 	bl	800197c <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	f241 3288 	movw	r2, #5000	; 0x1388
 800736c:	4293      	cmp	r3, r2
 800736e:	d901      	bls.n	8007374 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e14b      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007374:	4b6d      	ldr	r3, [pc, #436]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 8007376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d0ee      	beq.n	800735e <HAL_RCC_OscConfig+0x4f6>
 8007380:	e014      	b.n	80073ac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007382:	f7fa fafb 	bl	800197c <HAL_GetTick>
 8007386:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007388:	e00a      	b.n	80073a0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738a:	f7fa faf7 	bl	800197c <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	f241 3288 	movw	r2, #5000	; 0x1388
 8007398:	4293      	cmp	r3, r2
 800739a:	d901      	bls.n	80073a0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e135      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80073a0:	4b62      	ldr	r3, [pc, #392]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80073a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1ee      	bne.n	800738a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 812a 	beq.w	800760a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80073b6:	4b5d      	ldr	r3, [pc, #372]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073be:	2b18      	cmp	r3, #24
 80073c0:	f000 80ba 	beq.w	8007538 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	f040 8095 	bne.w	80074f8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073ce:	4b57      	ldr	r3, [pc, #348]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a56      	ldr	r2, [pc, #344]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80073d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073da:	f7fa facf 	bl	800197c <HAL_GetTick>
 80073de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073e0:	e008      	b.n	80073f4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073e2:	f7fa facb 	bl	800197c <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d901      	bls.n	80073f4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e10b      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073f4:	4b4d      	ldr	r3, [pc, #308]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1f0      	bne.n	80073e2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007400:	4b4a      	ldr	r3, [pc, #296]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 8007402:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007404:	4b4a      	ldr	r3, [pc, #296]	; (8007530 <HAL_RCC_OscConfig+0x6c8>)
 8007406:	4013      	ands	r3, r2
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007410:	0112      	lsls	r2, r2, #4
 8007412:	430a      	orrs	r2, r1
 8007414:	4945      	ldr	r1, [pc, #276]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 8007416:	4313      	orrs	r3, r2
 8007418:	628b      	str	r3, [r1, #40]	; 0x28
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	3b01      	subs	r3, #1
 8007420:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007428:	3b01      	subs	r3, #1
 800742a:	025b      	lsls	r3, r3, #9
 800742c:	b29b      	uxth	r3, r3
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007434:	3b01      	subs	r3, #1
 8007436:	041b      	lsls	r3, r3, #16
 8007438:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007442:	3b01      	subs	r3, #1
 8007444:	061b      	lsls	r3, r3, #24
 8007446:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800744a:	4938      	ldr	r1, [pc, #224]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 800744c:	4313      	orrs	r3, r2
 800744e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007450:	4b36      	ldr	r3, [pc, #216]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 8007452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007454:	4a35      	ldr	r2, [pc, #212]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 8007456:	f023 0301 	bic.w	r3, r3, #1
 800745a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800745c:	4b33      	ldr	r3, [pc, #204]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 800745e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007460:	4b34      	ldr	r3, [pc, #208]	; (8007534 <HAL_RCC_OscConfig+0x6cc>)
 8007462:	4013      	ands	r3, r2
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007468:	00d2      	lsls	r2, r2, #3
 800746a:	4930      	ldr	r1, [pc, #192]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 800746c:	4313      	orrs	r3, r2
 800746e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007470:	4b2e      	ldr	r3, [pc, #184]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	f023 020c 	bic.w	r2, r3, #12
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	492b      	ldr	r1, [pc, #172]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 800747e:	4313      	orrs	r3, r2
 8007480:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007482:	4b2a      	ldr	r3, [pc, #168]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 8007484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007486:	f023 0202 	bic.w	r2, r3, #2
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748e:	4927      	ldr	r1, [pc, #156]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 8007490:	4313      	orrs	r3, r2
 8007492:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007494:	4b25      	ldr	r3, [pc, #148]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	4a24      	ldr	r2, [pc, #144]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 800749a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800749e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074a0:	4b22      	ldr	r3, [pc, #136]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	4a21      	ldr	r2, [pc, #132]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80074a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80074ac:	4b1f      	ldr	r3, [pc, #124]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	4a1e      	ldr	r2, [pc, #120]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80074b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80074b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80074b8:	4b1c      	ldr	r3, [pc, #112]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	4a1b      	ldr	r2, [pc, #108]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80074be:	f043 0301 	orr.w	r3, r3, #1
 80074c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074c4:	4b19      	ldr	r3, [pc, #100]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a18      	ldr	r2, [pc, #96]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80074ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d0:	f7fa fa54 	bl	800197c <HAL_GetTick>
 80074d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074d6:	e008      	b.n	80074ea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074d8:	f7fa fa50 	bl	800197c <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e090      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80074ea:	4b10      	ldr	r3, [pc, #64]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0f0      	beq.n	80074d8 <HAL_RCC_OscConfig+0x670>
 80074f6:	e088      	b.n	800760a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074f8:	4b0c      	ldr	r3, [pc, #48]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a0b      	ldr	r2, [pc, #44]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 80074fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007504:	f7fa fa3a 	bl	800197c <HAL_GetTick>
 8007508:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800750a:	e008      	b.n	800751e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800750c:	f7fa fa36 	bl	800197c <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d901      	bls.n	800751e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e076      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800751e:	4b03      	ldr	r3, [pc, #12]	; (800752c <HAL_RCC_OscConfig+0x6c4>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1f0      	bne.n	800750c <HAL_RCC_OscConfig+0x6a4>
 800752a:	e06e      	b.n	800760a <HAL_RCC_OscConfig+0x7a2>
 800752c:	58024400 	.word	0x58024400
 8007530:	fffffc0c 	.word	0xfffffc0c
 8007534:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007538:	4b36      	ldr	r3, [pc, #216]	; (8007614 <HAL_RCC_OscConfig+0x7ac>)
 800753a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800753e:	4b35      	ldr	r3, [pc, #212]	; (8007614 <HAL_RCC_OscConfig+0x7ac>)
 8007540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007542:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	2b01      	cmp	r3, #1
 800754a:	d031      	beq.n	80075b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f003 0203 	and.w	r2, r3, #3
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007556:	429a      	cmp	r2, r3
 8007558:	d12a      	bne.n	80075b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	091b      	lsrs	r3, r3, #4
 800755e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007566:	429a      	cmp	r2, r3
 8007568:	d122      	bne.n	80075b0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007574:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007576:	429a      	cmp	r2, r3
 8007578:	d11a      	bne.n	80075b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	0a5b      	lsrs	r3, r3, #9
 800757e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007586:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007588:	429a      	cmp	r2, r3
 800758a:	d111      	bne.n	80075b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	0c1b      	lsrs	r3, r3, #16
 8007590:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800759a:	429a      	cmp	r2, r3
 800759c:	d108      	bne.n	80075b0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	0e1b      	lsrs	r3, r3, #24
 80075a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d001      	beq.n	80075b4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e02b      	b.n	800760c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80075b4:	4b17      	ldr	r3, [pc, #92]	; (8007614 <HAL_RCC_OscConfig+0x7ac>)
 80075b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b8:	08db      	lsrs	r3, r3, #3
 80075ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075be:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d01f      	beq.n	800760a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80075ca:	4b12      	ldr	r3, [pc, #72]	; (8007614 <HAL_RCC_OscConfig+0x7ac>)
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	4a11      	ldr	r2, [pc, #68]	; (8007614 <HAL_RCC_OscConfig+0x7ac>)
 80075d0:	f023 0301 	bic.w	r3, r3, #1
 80075d4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80075d6:	f7fa f9d1 	bl	800197c <HAL_GetTick>
 80075da:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80075dc:	bf00      	nop
 80075de:	f7fa f9cd 	bl	800197c <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d0f9      	beq.n	80075de <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80075ea:	4b0a      	ldr	r3, [pc, #40]	; (8007614 <HAL_RCC_OscConfig+0x7ac>)
 80075ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075ee:	4b0a      	ldr	r3, [pc, #40]	; (8007618 <HAL_RCC_OscConfig+0x7b0>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80075f6:	00d2      	lsls	r2, r2, #3
 80075f8:	4906      	ldr	r1, [pc, #24]	; (8007614 <HAL_RCC_OscConfig+0x7ac>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80075fe:	4b05      	ldr	r3, [pc, #20]	; (8007614 <HAL_RCC_OscConfig+0x7ac>)
 8007600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007602:	4a04      	ldr	r2, [pc, #16]	; (8007614 <HAL_RCC_OscConfig+0x7ac>)
 8007604:	f043 0301 	orr.w	r3, r3, #1
 8007608:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3730      	adds	r7, #48	; 0x30
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	58024400 	.word	0x58024400
 8007618:	ffff0007 	.word	0xffff0007

0800761c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e19c      	b.n	800796a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007630:	4b8a      	ldr	r3, [pc, #552]	; (800785c <HAL_RCC_ClockConfig+0x240>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 030f 	and.w	r3, r3, #15
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d910      	bls.n	8007660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800763e:	4b87      	ldr	r3, [pc, #540]	; (800785c <HAL_RCC_ClockConfig+0x240>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f023 020f 	bic.w	r2, r3, #15
 8007646:	4985      	ldr	r1, [pc, #532]	; (800785c <HAL_RCC_ClockConfig+0x240>)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	4313      	orrs	r3, r2
 800764c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800764e:	4b83      	ldr	r3, [pc, #524]	; (800785c <HAL_RCC_ClockConfig+0x240>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	683a      	ldr	r2, [r7, #0]
 8007658:	429a      	cmp	r2, r3
 800765a:	d001      	beq.n	8007660 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e184      	b.n	800796a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0304 	and.w	r3, r3, #4
 8007668:	2b00      	cmp	r3, #0
 800766a:	d010      	beq.n	800768e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691a      	ldr	r2, [r3, #16]
 8007670:	4b7b      	ldr	r3, [pc, #492]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007678:	429a      	cmp	r2, r3
 800767a:	d908      	bls.n	800768e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800767c:	4b78      	ldr	r3, [pc, #480]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	4975      	ldr	r1, [pc, #468]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 800768a:	4313      	orrs	r3, r2
 800768c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0308 	and.w	r3, r3, #8
 8007696:	2b00      	cmp	r3, #0
 8007698:	d010      	beq.n	80076bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	695a      	ldr	r2, [r3, #20]
 800769e:	4b70      	ldr	r3, [pc, #448]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d908      	bls.n	80076bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80076aa:	4b6d      	ldr	r3, [pc, #436]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	496a      	ldr	r1, [pc, #424]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0310 	and.w	r3, r3, #16
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d010      	beq.n	80076ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	699a      	ldr	r2, [r3, #24]
 80076cc:	4b64      	ldr	r3, [pc, #400]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d908      	bls.n	80076ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80076d8:	4b61      	ldr	r3, [pc, #388]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	495e      	ldr	r1, [pc, #376]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0320 	and.w	r3, r3, #32
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d010      	beq.n	8007718 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	69da      	ldr	r2, [r3, #28]
 80076fa:	4b59      	ldr	r3, [pc, #356]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007702:	429a      	cmp	r2, r3
 8007704:	d908      	bls.n	8007718 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007706:	4b56      	ldr	r3, [pc, #344]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	4953      	ldr	r1, [pc, #332]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 8007714:	4313      	orrs	r3, r2
 8007716:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d010      	beq.n	8007746 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68da      	ldr	r2, [r3, #12]
 8007728:	4b4d      	ldr	r3, [pc, #308]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	f003 030f 	and.w	r3, r3, #15
 8007730:	429a      	cmp	r2, r3
 8007732:	d908      	bls.n	8007746 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007734:	4b4a      	ldr	r3, [pc, #296]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	f023 020f 	bic.w	r2, r3, #15
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	4947      	ldr	r1, [pc, #284]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 8007742:	4313      	orrs	r3, r2
 8007744:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	2b00      	cmp	r3, #0
 8007750:	d055      	beq.n	80077fe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007752:	4b43      	ldr	r3, [pc, #268]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	4940      	ldr	r1, [pc, #256]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 8007760:	4313      	orrs	r3, r2
 8007762:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	2b02      	cmp	r3, #2
 800776a:	d107      	bne.n	800777c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800776c:	4b3c      	ldr	r3, [pc, #240]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d121      	bne.n	80077bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007778:	2301      	movs	r3, #1
 800777a:	e0f6      	b.n	800796a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	2b03      	cmp	r3, #3
 8007782:	d107      	bne.n	8007794 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007784:	4b36      	ldr	r3, [pc, #216]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800778c:	2b00      	cmp	r3, #0
 800778e:	d115      	bne.n	80077bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e0ea      	b.n	800796a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d107      	bne.n	80077ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800779c:	4b30      	ldr	r3, [pc, #192]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d109      	bne.n	80077bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e0de      	b.n	800796a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077ac:	4b2c      	ldr	r3, [pc, #176]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e0d6      	b.n	800796a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077bc:	4b28      	ldr	r3, [pc, #160]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 80077be:	691b      	ldr	r3, [r3, #16]
 80077c0:	f023 0207 	bic.w	r2, r3, #7
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	4925      	ldr	r1, [pc, #148]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077ce:	f7fa f8d5 	bl	800197c <HAL_GetTick>
 80077d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077d4:	e00a      	b.n	80077ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077d6:	f7fa f8d1 	bl	800197c <HAL_GetTick>
 80077da:	4602      	mov	r2, r0
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d901      	bls.n	80077ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e0be      	b.n	800796a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077ec:	4b1c      	ldr	r3, [pc, #112]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	00db      	lsls	r3, r3, #3
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d1eb      	bne.n	80077d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d010      	beq.n	800782c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	4b14      	ldr	r3, [pc, #80]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	f003 030f 	and.w	r3, r3, #15
 8007816:	429a      	cmp	r2, r3
 8007818:	d208      	bcs.n	800782c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800781a:	4b11      	ldr	r3, [pc, #68]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	f023 020f 	bic.w	r2, r3, #15
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	490e      	ldr	r1, [pc, #56]	; (8007860 <HAL_RCC_ClockConfig+0x244>)
 8007828:	4313      	orrs	r3, r2
 800782a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800782c:	4b0b      	ldr	r3, [pc, #44]	; (800785c <HAL_RCC_ClockConfig+0x240>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 030f 	and.w	r3, r3, #15
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	d214      	bcs.n	8007864 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800783a:	4b08      	ldr	r3, [pc, #32]	; (800785c <HAL_RCC_ClockConfig+0x240>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f023 020f 	bic.w	r2, r3, #15
 8007842:	4906      	ldr	r1, [pc, #24]	; (800785c <HAL_RCC_ClockConfig+0x240>)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	4313      	orrs	r3, r2
 8007848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800784a:	4b04      	ldr	r3, [pc, #16]	; (800785c <HAL_RCC_ClockConfig+0x240>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 030f 	and.w	r3, r3, #15
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	429a      	cmp	r2, r3
 8007856:	d005      	beq.n	8007864 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e086      	b.n	800796a <HAL_RCC_ClockConfig+0x34e>
 800785c:	52002000 	.word	0x52002000
 8007860:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b00      	cmp	r3, #0
 800786e:	d010      	beq.n	8007892 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	691a      	ldr	r2, [r3, #16]
 8007874:	4b3f      	ldr	r3, [pc, #252]	; (8007974 <HAL_RCC_ClockConfig+0x358>)
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800787c:	429a      	cmp	r2, r3
 800787e:	d208      	bcs.n	8007892 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007880:	4b3c      	ldr	r3, [pc, #240]	; (8007974 <HAL_RCC_ClockConfig+0x358>)
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	4939      	ldr	r1, [pc, #228]	; (8007974 <HAL_RCC_ClockConfig+0x358>)
 800788e:	4313      	orrs	r3, r2
 8007890:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b00      	cmp	r3, #0
 800789c:	d010      	beq.n	80078c0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	695a      	ldr	r2, [r3, #20]
 80078a2:	4b34      	ldr	r3, [pc, #208]	; (8007974 <HAL_RCC_ClockConfig+0x358>)
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d208      	bcs.n	80078c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078ae:	4b31      	ldr	r3, [pc, #196]	; (8007974 <HAL_RCC_ClockConfig+0x358>)
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	695b      	ldr	r3, [r3, #20]
 80078ba:	492e      	ldr	r1, [pc, #184]	; (8007974 <HAL_RCC_ClockConfig+0x358>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0310 	and.w	r3, r3, #16
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d010      	beq.n	80078ee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	699a      	ldr	r2, [r3, #24]
 80078d0:	4b28      	ldr	r3, [pc, #160]	; (8007974 <HAL_RCC_ClockConfig+0x358>)
 80078d2:	69db      	ldr	r3, [r3, #28]
 80078d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078d8:	429a      	cmp	r2, r3
 80078da:	d208      	bcs.n	80078ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078dc:	4b25      	ldr	r3, [pc, #148]	; (8007974 <HAL_RCC_ClockConfig+0x358>)
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	699b      	ldr	r3, [r3, #24]
 80078e8:	4922      	ldr	r1, [pc, #136]	; (8007974 <HAL_RCC_ClockConfig+0x358>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0320 	and.w	r3, r3, #32
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d010      	beq.n	800791c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69da      	ldr	r2, [r3, #28]
 80078fe:	4b1d      	ldr	r3, [pc, #116]	; (8007974 <HAL_RCC_ClockConfig+0x358>)
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007906:	429a      	cmp	r2, r3
 8007908:	d208      	bcs.n	800791c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800790a:	4b1a      	ldr	r3, [pc, #104]	; (8007974 <HAL_RCC_ClockConfig+0x358>)
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	4917      	ldr	r1, [pc, #92]	; (8007974 <HAL_RCC_ClockConfig+0x358>)
 8007918:	4313      	orrs	r3, r2
 800791a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800791c:	f000 f834 	bl	8007988 <HAL_RCC_GetSysClockFreq>
 8007920:	4602      	mov	r2, r0
 8007922:	4b14      	ldr	r3, [pc, #80]	; (8007974 <HAL_RCC_ClockConfig+0x358>)
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	0a1b      	lsrs	r3, r3, #8
 8007928:	f003 030f 	and.w	r3, r3, #15
 800792c:	4912      	ldr	r1, [pc, #72]	; (8007978 <HAL_RCC_ClockConfig+0x35c>)
 800792e:	5ccb      	ldrb	r3, [r1, r3]
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	fa22 f303 	lsr.w	r3, r2, r3
 8007938:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800793a:	4b0e      	ldr	r3, [pc, #56]	; (8007974 <HAL_RCC_ClockConfig+0x358>)
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	f003 030f 	and.w	r3, r3, #15
 8007942:	4a0d      	ldr	r2, [pc, #52]	; (8007978 <HAL_RCC_ClockConfig+0x35c>)
 8007944:	5cd3      	ldrb	r3, [r2, r3]
 8007946:	f003 031f 	and.w	r3, r3, #31
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	fa22 f303 	lsr.w	r3, r2, r3
 8007950:	4a0a      	ldr	r2, [pc, #40]	; (800797c <HAL_RCC_ClockConfig+0x360>)
 8007952:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007954:	4a0a      	ldr	r2, [pc, #40]	; (8007980 <HAL_RCC_ClockConfig+0x364>)
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800795a:	4b0a      	ldr	r3, [pc, #40]	; (8007984 <HAL_RCC_ClockConfig+0x368>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4618      	mov	r0, r3
 8007960:	f7f9 ffc2 	bl	80018e8 <HAL_InitTick>
 8007964:	4603      	mov	r3, r0
 8007966:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007968:	7bfb      	ldrb	r3, [r7, #15]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3718      	adds	r7, #24
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	58024400 	.word	0x58024400
 8007978:	08012a78 	.word	0x08012a78
 800797c:	24000020 	.word	0x24000020
 8007980:	2400001c 	.word	0x2400001c
 8007984:	24000024 	.word	0x24000024

08007988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007988:	b480      	push	{r7}
 800798a:	b089      	sub	sp, #36	; 0x24
 800798c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800798e:	4bb3      	ldr	r3, [pc, #716]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007996:	2b18      	cmp	r3, #24
 8007998:	f200 8155 	bhi.w	8007c46 <HAL_RCC_GetSysClockFreq+0x2be>
 800799c:	a201      	add	r2, pc, #4	; (adr r2, 80079a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800799e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a2:	bf00      	nop
 80079a4:	08007a09 	.word	0x08007a09
 80079a8:	08007c47 	.word	0x08007c47
 80079ac:	08007c47 	.word	0x08007c47
 80079b0:	08007c47 	.word	0x08007c47
 80079b4:	08007c47 	.word	0x08007c47
 80079b8:	08007c47 	.word	0x08007c47
 80079bc:	08007c47 	.word	0x08007c47
 80079c0:	08007c47 	.word	0x08007c47
 80079c4:	08007a2f 	.word	0x08007a2f
 80079c8:	08007c47 	.word	0x08007c47
 80079cc:	08007c47 	.word	0x08007c47
 80079d0:	08007c47 	.word	0x08007c47
 80079d4:	08007c47 	.word	0x08007c47
 80079d8:	08007c47 	.word	0x08007c47
 80079dc:	08007c47 	.word	0x08007c47
 80079e0:	08007c47 	.word	0x08007c47
 80079e4:	08007a35 	.word	0x08007a35
 80079e8:	08007c47 	.word	0x08007c47
 80079ec:	08007c47 	.word	0x08007c47
 80079f0:	08007c47 	.word	0x08007c47
 80079f4:	08007c47 	.word	0x08007c47
 80079f8:	08007c47 	.word	0x08007c47
 80079fc:	08007c47 	.word	0x08007c47
 8007a00:	08007c47 	.word	0x08007c47
 8007a04:	08007a3b 	.word	0x08007a3b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a08:	4b94      	ldr	r3, [pc, #592]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f003 0320 	and.w	r3, r3, #32
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d009      	beq.n	8007a28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a14:	4b91      	ldr	r3, [pc, #580]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	08db      	lsrs	r3, r3, #3
 8007a1a:	f003 0303 	and.w	r3, r3, #3
 8007a1e:	4a90      	ldr	r2, [pc, #576]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a20:	fa22 f303 	lsr.w	r3, r2, r3
 8007a24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007a26:	e111      	b.n	8007c4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007a28:	4b8d      	ldr	r3, [pc, #564]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a2a:	61bb      	str	r3, [r7, #24]
      break;
 8007a2c:	e10e      	b.n	8007c4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007a2e:	4b8d      	ldr	r3, [pc, #564]	; (8007c64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a30:	61bb      	str	r3, [r7, #24]
      break;
 8007a32:	e10b      	b.n	8007c4c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007a34:	4b8c      	ldr	r3, [pc, #560]	; (8007c68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007a36:	61bb      	str	r3, [r7, #24]
      break;
 8007a38:	e108      	b.n	8007c4c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a3a:	4b88      	ldr	r3, [pc, #544]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007a44:	4b85      	ldr	r3, [pc, #532]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a48:	091b      	lsrs	r3, r3, #4
 8007a4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a4e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a50:	4b82      	ldr	r3, [pc, #520]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	f003 0301 	and.w	r3, r3, #1
 8007a58:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007a5a:	4b80      	ldr	r3, [pc, #512]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5e:	08db      	lsrs	r3, r3, #3
 8007a60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a64:	68fa      	ldr	r2, [r7, #12]
 8007a66:	fb02 f303 	mul.w	r3, r2, r3
 8007a6a:	ee07 3a90 	vmov	s15, r3
 8007a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a72:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f000 80e1 	beq.w	8007c40 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	f000 8083 	beq.w	8007b8c <HAL_RCC_GetSysClockFreq+0x204>
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	f200 80a1 	bhi.w	8007bd0 <HAL_RCC_GetSysClockFreq+0x248>
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d003      	beq.n	8007a9c <HAL_RCC_GetSysClockFreq+0x114>
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d056      	beq.n	8007b48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a9a:	e099      	b.n	8007bd0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a9c:	4b6f      	ldr	r3, [pc, #444]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0320 	and.w	r3, r3, #32
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d02d      	beq.n	8007b04 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007aa8:	4b6c      	ldr	r3, [pc, #432]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	08db      	lsrs	r3, r3, #3
 8007aae:	f003 0303 	and.w	r3, r3, #3
 8007ab2:	4a6b      	ldr	r2, [pc, #428]	; (8007c60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8007ab8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	ee07 3a90 	vmov	s15, r3
 8007ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	ee07 3a90 	vmov	s15, r3
 8007aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ad2:	4b62      	ldr	r3, [pc, #392]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ada:	ee07 3a90 	vmov	s15, r3
 8007ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ae6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007c6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007afe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007b02:	e087      	b.n	8007c14 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	ee07 3a90 	vmov	s15, r3
 8007b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007c70 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b16:	4b51      	ldr	r3, [pc, #324]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b2a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007c6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b46:	e065      	b.n	8007c14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	ee07 3a90 	vmov	s15, r3
 8007b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b52:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007c74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b5a:	4b40      	ldr	r3, [pc, #256]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b62:	ee07 3a90 	vmov	s15, r3
 8007b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b6e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007c6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b8a:	e043      	b.n	8007c14 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	ee07 3a90 	vmov	s15, r3
 8007b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b96:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007c78 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b9e:	4b2f      	ldr	r3, [pc, #188]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba6:	ee07 3a90 	vmov	s15, r3
 8007baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bae:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bb2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007c6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007bce:	e021      	b.n	8007c14 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	ee07 3a90 	vmov	s15, r3
 8007bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bda:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007c74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007be2:	4b1e      	ldr	r3, [pc, #120]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bea:	ee07 3a90 	vmov	s15, r3
 8007bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bf6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007c6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c12:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007c14:	4b11      	ldr	r3, [pc, #68]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c18:	0a5b      	lsrs	r3, r3, #9
 8007c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c1e:	3301      	adds	r3, #1
 8007c20:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	ee07 3a90 	vmov	s15, r3
 8007c28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c38:	ee17 3a90 	vmov	r3, s15
 8007c3c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007c3e:	e005      	b.n	8007c4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61bb      	str	r3, [r7, #24]
      break;
 8007c44:	e002      	b.n	8007c4c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007c46:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c48:	61bb      	str	r3, [r7, #24]
      break;
 8007c4a:	bf00      	nop
  }

  return sysclockfreq;
 8007c4c:	69bb      	ldr	r3, [r7, #24]
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3724      	adds	r7, #36	; 0x24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	58024400 	.word	0x58024400
 8007c60:	03d09000 	.word	0x03d09000
 8007c64:	003d0900 	.word	0x003d0900
 8007c68:	007a1200 	.word	0x007a1200
 8007c6c:	46000000 	.word	0x46000000
 8007c70:	4c742400 	.word	0x4c742400
 8007c74:	4a742400 	.word	0x4a742400
 8007c78:	4af42400 	.word	0x4af42400

08007c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b082      	sub	sp, #8
 8007c80:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c82:	f7ff fe81 	bl	8007988 <HAL_RCC_GetSysClockFreq>
 8007c86:	4602      	mov	r2, r0
 8007c88:	4b10      	ldr	r3, [pc, #64]	; (8007ccc <HAL_RCC_GetHCLKFreq+0x50>)
 8007c8a:	699b      	ldr	r3, [r3, #24]
 8007c8c:	0a1b      	lsrs	r3, r3, #8
 8007c8e:	f003 030f 	and.w	r3, r3, #15
 8007c92:	490f      	ldr	r1, [pc, #60]	; (8007cd0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007c94:	5ccb      	ldrb	r3, [r1, r3]
 8007c96:	f003 031f 	and.w	r3, r3, #31
 8007c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c9e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	; (8007ccc <HAL_RCC_GetHCLKFreq+0x50>)
 8007ca2:	699b      	ldr	r3, [r3, #24]
 8007ca4:	f003 030f 	and.w	r3, r3, #15
 8007ca8:	4a09      	ldr	r2, [pc, #36]	; (8007cd0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007caa:	5cd3      	ldrb	r3, [r2, r3]
 8007cac:	f003 031f 	and.w	r3, r3, #31
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb6:	4a07      	ldr	r2, [pc, #28]	; (8007cd4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007cb8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007cba:	4a07      	ldr	r2, [pc, #28]	; (8007cd8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007cc0:	4b04      	ldr	r3, [pc, #16]	; (8007cd4 <HAL_RCC_GetHCLKFreq+0x58>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	58024400 	.word	0x58024400
 8007cd0:	08012a78 	.word	0x08012a78
 8007cd4:	24000020 	.word	0x24000020
 8007cd8:	2400001c 	.word	0x2400001c

08007cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007ce0:	f7ff ffcc 	bl	8007c7c <HAL_RCC_GetHCLKFreq>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	4b06      	ldr	r3, [pc, #24]	; (8007d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ce8:	69db      	ldr	r3, [r3, #28]
 8007cea:	091b      	lsrs	r3, r3, #4
 8007cec:	f003 0307 	and.w	r3, r3, #7
 8007cf0:	4904      	ldr	r1, [pc, #16]	; (8007d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007cf2:	5ccb      	ldrb	r3, [r1, r3]
 8007cf4:	f003 031f 	and.w	r3, r3, #31
 8007cf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	58024400 	.word	0x58024400
 8007d04:	08012a78 	.word	0x08012a78

08007d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007d0c:	f7ff ffb6 	bl	8007c7c <HAL_RCC_GetHCLKFreq>
 8007d10:	4602      	mov	r2, r0
 8007d12:	4b06      	ldr	r3, [pc, #24]	; (8007d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	0a1b      	lsrs	r3, r3, #8
 8007d18:	f003 0307 	and.w	r3, r3, #7
 8007d1c:	4904      	ldr	r1, [pc, #16]	; (8007d30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d1e:	5ccb      	ldrb	r3, [r1, r3]
 8007d20:	f003 031f 	and.w	r3, r3, #31
 8007d24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	58024400 	.word	0x58024400
 8007d30:	08012a78 	.word	0x08012a78

08007d34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d38:	b0c6      	sub	sp, #280	; 0x118
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d40:	2300      	movs	r3, #0
 8007d42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d46:	2300      	movs	r3, #0
 8007d48:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d54:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007d58:	2500      	movs	r5, #0
 8007d5a:	ea54 0305 	orrs.w	r3, r4, r5
 8007d5e:	d049      	beq.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d6a:	d02f      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007d6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007d70:	d828      	bhi.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d76:	d01a      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d7c:	d822      	bhi.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d86:	d007      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007d88:	e01c      	b.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d8a:	4bab      	ldr	r3, [pc, #684]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8e:	4aaa      	ldr	r2, [pc, #680]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007d96:	e01a      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	2102      	movs	r1, #2
 8007da0:	4618      	mov	r0, r3
 8007da2:	f002 fa49 	bl	800a238 <RCCEx_PLL2_Config>
 8007da6:	4603      	mov	r3, r0
 8007da8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007dac:	e00f      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007db2:	3328      	adds	r3, #40	; 0x28
 8007db4:	2102      	movs	r1, #2
 8007db6:	4618      	mov	r0, r3
 8007db8:	f002 faf0 	bl	800a39c <RCCEx_PLL3_Config>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007dc2:	e004      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007dca:	e000      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10a      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007dd6:	4b98      	ldr	r3, [pc, #608]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dda:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007de4:	4a94      	ldr	r2, [pc, #592]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007de6:	430b      	orrs	r3, r1
 8007de8:	6513      	str	r3, [r2, #80]	; 0x50
 8007dea:	e003      	b.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007df0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007e00:	f04f 0900 	mov.w	r9, #0
 8007e04:	ea58 0309 	orrs.w	r3, r8, r9
 8007e08:	d047      	beq.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d82a      	bhi.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007e14:	a201      	add	r2, pc, #4	; (adr r2, 8007e1c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1a:	bf00      	nop
 8007e1c:	08007e31 	.word	0x08007e31
 8007e20:	08007e3f 	.word	0x08007e3f
 8007e24:	08007e55 	.word	0x08007e55
 8007e28:	08007e73 	.word	0x08007e73
 8007e2c:	08007e73 	.word	0x08007e73
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e30:	4b81      	ldr	r3, [pc, #516]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e34:	4a80      	ldr	r2, [pc, #512]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007e36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e3a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e3c:	e01a      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e42:	3308      	adds	r3, #8
 8007e44:	2100      	movs	r1, #0
 8007e46:	4618      	mov	r0, r3
 8007e48:	f002 f9f6 	bl	800a238 <RCCEx_PLL2_Config>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e52:	e00f      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e58:	3328      	adds	r3, #40	; 0x28
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f002 fa9d 	bl	800a39c <RCCEx_PLL3_Config>
 8007e62:	4603      	mov	r3, r0
 8007e64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e68:	e004      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007e70:	e000      	b.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10a      	bne.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e7c:	4b6e      	ldr	r3, [pc, #440]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e80:	f023 0107 	bic.w	r1, r3, #7
 8007e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e8a:	4a6b      	ldr	r2, [pc, #428]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007e8c:	430b      	orrs	r3, r1
 8007e8e:	6513      	str	r3, [r2, #80]	; 0x50
 8007e90:	e003      	b.n	8007e9a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007e96:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8007ea6:	f04f 0b00 	mov.w	fp, #0
 8007eaa:	ea5a 030b 	orrs.w	r3, sl, fp
 8007eae:	d05b      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007eb8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007ebc:	d03b      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8007ebe:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007ec2:	d834      	bhi.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007ec4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ec8:	d037      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007eca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ece:	d82e      	bhi.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007ed0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ed4:	d033      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8007ed6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007eda:	d828      	bhi.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ee0:	d01a      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ee6:	d822      	bhi.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d003      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8007eec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ef0:	d007      	beq.n	8007f02 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8007ef2:	e01c      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ef4:	4b50      	ldr	r3, [pc, #320]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef8:	4a4f      	ldr	r2, [pc, #316]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007efe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f00:	e01e      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f06:	3308      	adds	r3, #8
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f002 f994 	bl	800a238 <RCCEx_PLL2_Config>
 8007f10:	4603      	mov	r3, r0
 8007f12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007f16:	e013      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f1c:	3328      	adds	r3, #40	; 0x28
 8007f1e:	2100      	movs	r1, #0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f002 fa3b 	bl	800a39c <RCCEx_PLL3_Config>
 8007f26:	4603      	mov	r3, r0
 8007f28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f2c:	e008      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007f34:	e004      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007f36:	bf00      	nop
 8007f38:	e002      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007f3a:	bf00      	nop
 8007f3c:	e000      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8007f3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10b      	bne.n	8007f60 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f48:	4b3b      	ldr	r3, [pc, #236]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8007f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f58:	4a37      	ldr	r2, [pc, #220]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007f5a:	430b      	orrs	r3, r1
 8007f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8007f5e:	e003      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007f64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f70:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007f74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007f7e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007f82:	460b      	mov	r3, r1
 8007f84:	4313      	orrs	r3, r2
 8007f86:	d05d      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007f88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007f90:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007f94:	d03b      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007f96:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007f9a:	d834      	bhi.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fa0:	d037      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8007fa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fa6:	d82e      	bhi.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007fa8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fac:	d033      	beq.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8007fae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fb2:	d828      	bhi.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007fb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fb8:	d01a      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8007fba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fbe:	d822      	bhi.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d003      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fc8:	d007      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007fca:	e01c      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fcc:	4b1a      	ldr	r3, [pc, #104]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd0:	4a19      	ldr	r2, [pc, #100]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8007fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fd8:	e01e      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fde:	3308      	adds	r3, #8
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f002 f928 	bl	800a238 <RCCEx_PLL2_Config>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007fee:	e013      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ff4:	3328      	adds	r3, #40	; 0x28
 8007ff6:	2100      	movs	r1, #0
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f002 f9cf 	bl	800a39c <RCCEx_PLL3_Config>
 8007ffe:	4603      	mov	r3, r0
 8008000:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008004:	e008      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800800c:	e004      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800800e:	bf00      	nop
 8008010:	e002      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008012:	bf00      	nop
 8008014:	e000      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008018:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10d      	bne.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008020:	4b05      	ldr	r3, [pc, #20]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008024:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800802c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008030:	4a01      	ldr	r2, [pc, #4]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008032:	430b      	orrs	r3, r1
 8008034:	6593      	str	r3, [r2, #88]	; 0x58
 8008036:	e005      	b.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008038:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800803c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008040:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008050:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008054:	2300      	movs	r3, #0
 8008056:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800805a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800805e:	460b      	mov	r3, r1
 8008060:	4313      	orrs	r3, r2
 8008062:	d03a      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800806a:	2b30      	cmp	r3, #48	; 0x30
 800806c:	d01f      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800806e:	2b30      	cmp	r3, #48	; 0x30
 8008070:	d819      	bhi.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008072:	2b20      	cmp	r3, #32
 8008074:	d00c      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008076:	2b20      	cmp	r3, #32
 8008078:	d815      	bhi.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d019      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800807e:	2b10      	cmp	r3, #16
 8008080:	d111      	bne.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008082:	4baa      	ldr	r3, [pc, #680]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008086:	4aa9      	ldr	r2, [pc, #676]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800808c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800808e:	e011      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008094:	3308      	adds	r3, #8
 8008096:	2102      	movs	r1, #2
 8008098:	4618      	mov	r0, r3
 800809a:	f002 f8cd 	bl	800a238 <RCCEx_PLL2_Config>
 800809e:	4603      	mov	r3, r0
 80080a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80080a4:	e006      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80080ac:	e002      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80080ae:	bf00      	nop
 80080b0:	e000      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80080b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10a      	bne.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80080bc:	4b9b      	ldr	r3, [pc, #620]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80080c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ca:	4a98      	ldr	r2, [pc, #608]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80080cc:	430b      	orrs	r3, r1
 80080ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080d0:	e003      	b.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80080d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80080da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80080e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80080ea:	2300      	movs	r3, #0
 80080ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80080f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80080f4:	460b      	mov	r3, r1
 80080f6:	4313      	orrs	r3, r2
 80080f8:	d051      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80080fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008104:	d035      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008106:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800810a:	d82e      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800810c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008110:	d031      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008112:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008116:	d828      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800811c:	d01a      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800811e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008122:	d822      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008124:	2b00      	cmp	r3, #0
 8008126:	d003      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800812c:	d007      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800812e:	e01c      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008130:	4b7e      	ldr	r3, [pc, #504]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008134:	4a7d      	ldr	r2, [pc, #500]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008136:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800813a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800813c:	e01c      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800813e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008142:	3308      	adds	r3, #8
 8008144:	2100      	movs	r1, #0
 8008146:	4618      	mov	r0, r3
 8008148:	f002 f876 	bl	800a238 <RCCEx_PLL2_Config>
 800814c:	4603      	mov	r3, r0
 800814e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008152:	e011      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008158:	3328      	adds	r3, #40	; 0x28
 800815a:	2100      	movs	r1, #0
 800815c:	4618      	mov	r0, r3
 800815e:	f002 f91d 	bl	800a39c <RCCEx_PLL3_Config>
 8008162:	4603      	mov	r3, r0
 8008164:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008168:	e006      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008170:	e002      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008172:	bf00      	nop
 8008174:	e000      	b.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008178:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800817c:	2b00      	cmp	r3, #0
 800817e:	d10a      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008180:	4b6a      	ldr	r3, [pc, #424]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008184:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800818c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800818e:	4a67      	ldr	r2, [pc, #412]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008190:	430b      	orrs	r3, r1
 8008192:	6513      	str	r3, [r2, #80]	; 0x50
 8008194:	e003      	b.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008196:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800819a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800819e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80081aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081ae:	2300      	movs	r3, #0
 80081b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80081b4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80081b8:	460b      	mov	r3, r1
 80081ba:	4313      	orrs	r3, r2
 80081bc:	d053      	beq.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80081be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081c8:	d033      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80081ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081ce:	d82c      	bhi.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80081d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081d4:	d02f      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80081d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081da:	d826      	bhi.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80081dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081e0:	d02b      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80081e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081e6:	d820      	bhi.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80081e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ec:	d012      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80081ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081f2:	d81a      	bhi.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d022      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80081f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081fc:	d115      	bne.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008202:	3308      	adds	r3, #8
 8008204:	2101      	movs	r1, #1
 8008206:	4618      	mov	r0, r3
 8008208:	f002 f816 	bl	800a238 <RCCEx_PLL2_Config>
 800820c:	4603      	mov	r3, r0
 800820e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008212:	e015      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008218:	3328      	adds	r3, #40	; 0x28
 800821a:	2101      	movs	r1, #1
 800821c:	4618      	mov	r0, r3
 800821e:	f002 f8bd 	bl	800a39c <RCCEx_PLL3_Config>
 8008222:	4603      	mov	r3, r0
 8008224:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008228:	e00a      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008230:	e006      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008232:	bf00      	nop
 8008234:	e004      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008236:	bf00      	nop
 8008238:	e002      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800823a:	bf00      	nop
 800823c:	e000      	b.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800823e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008240:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008248:	4b38      	ldr	r3, [pc, #224]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800824a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800824c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008256:	4a35      	ldr	r2, [pc, #212]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008258:	430b      	orrs	r3, r1
 800825a:	6513      	str	r3, [r2, #80]	; 0x50
 800825c:	e003      	b.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008262:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008276:	2300      	movs	r3, #0
 8008278:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800827c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008280:	460b      	mov	r3, r1
 8008282:	4313      	orrs	r3, r2
 8008284:	d058      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800828a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800828e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008292:	d033      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008294:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008298:	d82c      	bhi.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800829a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800829e:	d02f      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80082a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a4:	d826      	bhi.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80082a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082aa:	d02b      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80082ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082b0:	d820      	bhi.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80082b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082b6:	d012      	beq.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80082b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082bc:	d81a      	bhi.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d022      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80082c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082c6:	d115      	bne.n	80082f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082cc:	3308      	adds	r3, #8
 80082ce:	2101      	movs	r1, #1
 80082d0:	4618      	mov	r0, r3
 80082d2:	f001 ffb1 	bl	800a238 <RCCEx_PLL2_Config>
 80082d6:	4603      	mov	r3, r0
 80082d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80082dc:	e015      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082e2:	3328      	adds	r3, #40	; 0x28
 80082e4:	2101      	movs	r1, #1
 80082e6:	4618      	mov	r0, r3
 80082e8:	f002 f858 	bl	800a39c <RCCEx_PLL3_Config>
 80082ec:	4603      	mov	r3, r0
 80082ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80082f2:	e00a      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80082fa:	e006      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80082fc:	bf00      	nop
 80082fe:	e004      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008300:	bf00      	nop
 8008302:	e002      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008304:	bf00      	nop
 8008306:	e000      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800830a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10e      	bne.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008312:	4b06      	ldr	r3, [pc, #24]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008316:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800831a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800831e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008322:	4a02      	ldr	r2, [pc, #8]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008324:	430b      	orrs	r3, r1
 8008326:	6593      	str	r3, [r2, #88]	; 0x58
 8008328:	e006      	b.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800832a:	bf00      	nop
 800832c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008330:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008334:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800833c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008340:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008344:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008348:	2300      	movs	r3, #0
 800834a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800834e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008352:	460b      	mov	r3, r1
 8008354:	4313      	orrs	r3, r2
 8008356:	d037      	beq.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800835c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800835e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008362:	d00e      	beq.n	8008382 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008368:	d816      	bhi.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800836a:	2b00      	cmp	r3, #0
 800836c:	d018      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800836e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008372:	d111      	bne.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008374:	4bc4      	ldr	r3, [pc, #784]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008378:	4ac3      	ldr	r2, [pc, #780]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800837a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800837e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008380:	e00f      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008386:	3308      	adds	r3, #8
 8008388:	2101      	movs	r1, #1
 800838a:	4618      	mov	r0, r3
 800838c:	f001 ff54 	bl	800a238 <RCCEx_PLL2_Config>
 8008390:	4603      	mov	r3, r0
 8008392:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008396:	e004      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800839e:	e000      	b.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80083a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10a      	bne.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80083aa:	4bb7      	ldr	r3, [pc, #732]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80083b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083b8:	4ab3      	ldr	r2, [pc, #716]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80083ba:	430b      	orrs	r3, r1
 80083bc:	6513      	str	r3, [r2, #80]	; 0x50
 80083be:	e003      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80083c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80083c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80083d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083d8:	2300      	movs	r3, #0
 80083da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80083e2:	460b      	mov	r3, r1
 80083e4:	4313      	orrs	r3, r2
 80083e6:	d039      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80083e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d81c      	bhi.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80083f2:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	08008435 	.word	0x08008435
 80083fc:	08008409 	.word	0x08008409
 8008400:	08008417 	.word	0x08008417
 8008404:	08008435 	.word	0x08008435
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008408:	4b9f      	ldr	r3, [pc, #636]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800840a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840c:	4a9e      	ldr	r2, [pc, #632]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800840e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008414:	e00f      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800841a:	3308      	adds	r3, #8
 800841c:	2102      	movs	r1, #2
 800841e:	4618      	mov	r0, r3
 8008420:	f001 ff0a 	bl	800a238 <RCCEx_PLL2_Config>
 8008424:	4603      	mov	r3, r0
 8008426:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800842a:	e004      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008432:	e000      	b.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008436:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10a      	bne.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800843e:	4b92      	ldr	r3, [pc, #584]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008442:	f023 0103 	bic.w	r1, r3, #3
 8008446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800844a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800844c:	4a8e      	ldr	r2, [pc, #568]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800844e:	430b      	orrs	r3, r1
 8008450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008452:	e003      	b.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008454:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008458:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800845c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008464:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008468:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800846c:	2300      	movs	r3, #0
 800846e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008472:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008476:	460b      	mov	r3, r1
 8008478:	4313      	orrs	r3, r2
 800847a:	f000 8099 	beq.w	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800847e:	4b83      	ldr	r3, [pc, #524]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a82      	ldr	r2, [pc, #520]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008488:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800848a:	f7f9 fa77 	bl	800197c <HAL_GetTick>
 800848e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008492:	e00b      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008494:	f7f9 fa72 	bl	800197c <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800849e:	1ad3      	subs	r3, r2, r3
 80084a0:	2b64      	cmp	r3, #100	; 0x64
 80084a2:	d903      	bls.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80084a4:	2303      	movs	r3, #3
 80084a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80084aa:	e005      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80084ac:	4b77      	ldr	r3, [pc, #476]	; (800868c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d0ed      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80084b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d173      	bne.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80084c0:	4b71      	ldr	r3, [pc, #452]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084cc:	4053      	eors	r3, r2
 80084ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d015      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084d6:	4b6c      	ldr	r3, [pc, #432]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80084e2:	4b69      	ldr	r3, [pc, #420]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e6:	4a68      	ldr	r2, [pc, #416]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ec:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084ee:	4b66      	ldr	r3, [pc, #408]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f2:	4a65      	ldr	r2, [pc, #404]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084f8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80084fa:	4a63      	ldr	r2, [pc, #396]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80084fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008500:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008506:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800850a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800850e:	d118      	bne.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008510:	f7f9 fa34 	bl	800197c <HAL_GetTick>
 8008514:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008518:	e00d      	b.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800851a:	f7f9 fa2f 	bl	800197c <HAL_GetTick>
 800851e:	4602      	mov	r2, r0
 8008520:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8008524:	1ad2      	subs	r2, r2, r3
 8008526:	f241 3388 	movw	r3, #5000	; 0x1388
 800852a:	429a      	cmp	r2, r3
 800852c:	d903      	bls.n	8008536 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8008534:	e005      	b.n	8008542 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008536:	4b54      	ldr	r3, [pc, #336]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0eb      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008542:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008546:	2b00      	cmp	r3, #0
 8008548:	d129      	bne.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800854a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800855a:	d10e      	bne.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800855c:	4b4a      	ldr	r3, [pc, #296]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8008564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008568:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800856c:	091a      	lsrs	r2, r3, #4
 800856e:	4b48      	ldr	r3, [pc, #288]	; (8008690 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008570:	4013      	ands	r3, r2
 8008572:	4a45      	ldr	r2, [pc, #276]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008574:	430b      	orrs	r3, r1
 8008576:	6113      	str	r3, [r2, #16]
 8008578:	e005      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800857a:	4b43      	ldr	r3, [pc, #268]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	4a42      	ldr	r2, [pc, #264]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008580:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008584:	6113      	str	r3, [r2, #16]
 8008586:	4b40      	ldr	r3, [pc, #256]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008588:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800858a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800858e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008596:	4a3c      	ldr	r2, [pc, #240]	; (8008688 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008598:	430b      	orrs	r3, r1
 800859a:	6713      	str	r3, [r2, #112]	; 0x70
 800859c:	e008      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800859e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80085a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80085a6:	e003      	b.n	80085b0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80085ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80085b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b8:	f002 0301 	and.w	r3, r2, #1
 80085bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085c0:	2300      	movs	r3, #0
 80085c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80085c6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80085ca:	460b      	mov	r3, r1
 80085cc:	4313      	orrs	r3, r2
 80085ce:	f000 808f 	beq.w	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80085d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085d8:	2b28      	cmp	r3, #40	; 0x28
 80085da:	d871      	bhi.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80085dc:	a201      	add	r2, pc, #4	; (adr r2, 80085e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80085de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e2:	bf00      	nop
 80085e4:	080086c9 	.word	0x080086c9
 80085e8:	080086c1 	.word	0x080086c1
 80085ec:	080086c1 	.word	0x080086c1
 80085f0:	080086c1 	.word	0x080086c1
 80085f4:	080086c1 	.word	0x080086c1
 80085f8:	080086c1 	.word	0x080086c1
 80085fc:	080086c1 	.word	0x080086c1
 8008600:	080086c1 	.word	0x080086c1
 8008604:	08008695 	.word	0x08008695
 8008608:	080086c1 	.word	0x080086c1
 800860c:	080086c1 	.word	0x080086c1
 8008610:	080086c1 	.word	0x080086c1
 8008614:	080086c1 	.word	0x080086c1
 8008618:	080086c1 	.word	0x080086c1
 800861c:	080086c1 	.word	0x080086c1
 8008620:	080086c1 	.word	0x080086c1
 8008624:	080086ab 	.word	0x080086ab
 8008628:	080086c1 	.word	0x080086c1
 800862c:	080086c1 	.word	0x080086c1
 8008630:	080086c1 	.word	0x080086c1
 8008634:	080086c1 	.word	0x080086c1
 8008638:	080086c1 	.word	0x080086c1
 800863c:	080086c1 	.word	0x080086c1
 8008640:	080086c1 	.word	0x080086c1
 8008644:	080086c9 	.word	0x080086c9
 8008648:	080086c1 	.word	0x080086c1
 800864c:	080086c1 	.word	0x080086c1
 8008650:	080086c1 	.word	0x080086c1
 8008654:	080086c1 	.word	0x080086c1
 8008658:	080086c1 	.word	0x080086c1
 800865c:	080086c1 	.word	0x080086c1
 8008660:	080086c1 	.word	0x080086c1
 8008664:	080086c9 	.word	0x080086c9
 8008668:	080086c1 	.word	0x080086c1
 800866c:	080086c1 	.word	0x080086c1
 8008670:	080086c1 	.word	0x080086c1
 8008674:	080086c1 	.word	0x080086c1
 8008678:	080086c1 	.word	0x080086c1
 800867c:	080086c1 	.word	0x080086c1
 8008680:	080086c1 	.word	0x080086c1
 8008684:	080086c9 	.word	0x080086c9
 8008688:	58024400 	.word	0x58024400
 800868c:	58024800 	.word	0x58024800
 8008690:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008698:	3308      	adds	r3, #8
 800869a:	2101      	movs	r1, #1
 800869c:	4618      	mov	r0, r3
 800869e:	f001 fdcb 	bl	800a238 <RCCEx_PLL2_Config>
 80086a2:	4603      	mov	r3, r0
 80086a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80086a8:	e00f      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ae:	3328      	adds	r3, #40	; 0x28
 80086b0:	2101      	movs	r1, #1
 80086b2:	4618      	mov	r0, r3
 80086b4:	f001 fe72 	bl	800a39c <RCCEx_PLL3_Config>
 80086b8:	4603      	mov	r3, r0
 80086ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80086be:	e004      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80086c6:	e000      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80086c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10a      	bne.n	80086e8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80086d2:	4bbf      	ldr	r3, [pc, #764]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80086d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80086da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086e0:	4abb      	ldr	r2, [pc, #748]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80086e2:	430b      	orrs	r3, r1
 80086e4:	6553      	str	r3, [r2, #84]	; 0x54
 80086e6:	e003      	b.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80086ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80086f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f8:	f002 0302 	and.w	r3, r2, #2
 80086fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008700:	2300      	movs	r3, #0
 8008702:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008706:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800870a:	460b      	mov	r3, r1
 800870c:	4313      	orrs	r3, r2
 800870e:	d041      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008716:	2b05      	cmp	r3, #5
 8008718:	d824      	bhi.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800871a:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	0800876d 	.word	0x0800876d
 8008724:	08008739 	.word	0x08008739
 8008728:	0800874f 	.word	0x0800874f
 800872c:	0800876d 	.word	0x0800876d
 8008730:	0800876d 	.word	0x0800876d
 8008734:	0800876d 	.word	0x0800876d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800873c:	3308      	adds	r3, #8
 800873e:	2101      	movs	r1, #1
 8008740:	4618      	mov	r0, r3
 8008742:	f001 fd79 	bl	800a238 <RCCEx_PLL2_Config>
 8008746:	4603      	mov	r3, r0
 8008748:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800874c:	e00f      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800874e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008752:	3328      	adds	r3, #40	; 0x28
 8008754:	2101      	movs	r1, #1
 8008756:	4618      	mov	r0, r3
 8008758:	f001 fe20 	bl	800a39c <RCCEx_PLL3_Config>
 800875c:	4603      	mov	r3, r0
 800875e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008762:	e004      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800876a:	e000      	b.n	800876e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800876c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800876e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10a      	bne.n	800878c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008776:	4b96      	ldr	r3, [pc, #600]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800877a:	f023 0107 	bic.w	r1, r3, #7
 800877e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008782:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008784:	4a92      	ldr	r2, [pc, #584]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008786:	430b      	orrs	r3, r1
 8008788:	6553      	str	r3, [r2, #84]	; 0x54
 800878a:	e003      	b.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800878c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008790:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879c:	f002 0304 	and.w	r3, r2, #4
 80087a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80087a4:	2300      	movs	r3, #0
 80087a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087aa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80087ae:	460b      	mov	r3, r1
 80087b0:	4313      	orrs	r3, r2
 80087b2:	d044      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80087b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087bc:	2b05      	cmp	r3, #5
 80087be:	d825      	bhi.n	800880c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80087c0:	a201      	add	r2, pc, #4	; (adr r2, 80087c8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80087c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c6:	bf00      	nop
 80087c8:	08008815 	.word	0x08008815
 80087cc:	080087e1 	.word	0x080087e1
 80087d0:	080087f7 	.word	0x080087f7
 80087d4:	08008815 	.word	0x08008815
 80087d8:	08008815 	.word	0x08008815
 80087dc:	08008815 	.word	0x08008815
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087e4:	3308      	adds	r3, #8
 80087e6:	2101      	movs	r1, #1
 80087e8:	4618      	mov	r0, r3
 80087ea:	f001 fd25 	bl	800a238 <RCCEx_PLL2_Config>
 80087ee:	4603      	mov	r3, r0
 80087f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80087f4:	e00f      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80087f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087fa:	3328      	adds	r3, #40	; 0x28
 80087fc:	2101      	movs	r1, #1
 80087fe:	4618      	mov	r0, r3
 8008800:	f001 fdcc 	bl	800a39c <RCCEx_PLL3_Config>
 8008804:	4603      	mov	r3, r0
 8008806:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800880a:	e004      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008812:	e000      	b.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8008814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008816:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10b      	bne.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800881e:	4b6c      	ldr	r3, [pc, #432]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008822:	f023 0107 	bic.w	r1, r3, #7
 8008826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800882a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800882e:	4a68      	ldr	r2, [pc, #416]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008830:	430b      	orrs	r3, r1
 8008832:	6593      	str	r3, [r2, #88]	; 0x58
 8008834:	e003      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008836:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800883a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800883e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	f002 0320 	and.w	r3, r2, #32
 800884a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800884e:	2300      	movs	r3, #0
 8008850:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008854:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8008858:	460b      	mov	r3, r1
 800885a:	4313      	orrs	r3, r2
 800885c:	d055      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800885e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800886a:	d033      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800886c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008870:	d82c      	bhi.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008876:	d02f      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8008878:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800887c:	d826      	bhi.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800887e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008882:	d02b      	beq.n	80088dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8008884:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008888:	d820      	bhi.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800888a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800888e:	d012      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8008890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008894:	d81a      	bhi.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008896:	2b00      	cmp	r3, #0
 8008898:	d022      	beq.n	80088e0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800889a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800889e:	d115      	bne.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088a4:	3308      	adds	r3, #8
 80088a6:	2100      	movs	r1, #0
 80088a8:	4618      	mov	r0, r3
 80088aa:	f001 fcc5 	bl	800a238 <RCCEx_PLL2_Config>
 80088ae:	4603      	mov	r3, r0
 80088b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80088b4:	e015      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80088b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088ba:	3328      	adds	r3, #40	; 0x28
 80088bc:	2102      	movs	r1, #2
 80088be:	4618      	mov	r0, r3
 80088c0:	f001 fd6c 	bl	800a39c <RCCEx_PLL3_Config>
 80088c4:	4603      	mov	r3, r0
 80088c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80088ca:	e00a      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80088d2:	e006      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80088d4:	bf00      	nop
 80088d6:	e004      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80088d8:	bf00      	nop
 80088da:	e002      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80088dc:	bf00      	nop
 80088de:	e000      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80088e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d10b      	bne.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80088ea:	4b39      	ldr	r3, [pc, #228]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80088ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ee:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80088f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088fa:	4a35      	ldr	r2, [pc, #212]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80088fc:	430b      	orrs	r3, r1
 80088fe:	6553      	str	r3, [r2, #84]	; 0x54
 8008900:	e003      	b.n	800890a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008902:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008906:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800890a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8008916:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800891a:	2300      	movs	r3, #0
 800891c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008920:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008924:	460b      	mov	r3, r1
 8008926:	4313      	orrs	r3, r2
 8008928:	d058      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800892a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800892e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008932:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008936:	d033      	beq.n	80089a0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8008938:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800893c:	d82c      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800893e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008942:	d02f      	beq.n	80089a4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008948:	d826      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800894a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800894e:	d02b      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8008950:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008954:	d820      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800895a:	d012      	beq.n	8008982 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800895c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008960:	d81a      	bhi.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8008962:	2b00      	cmp	r3, #0
 8008964:	d022      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8008966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800896a:	d115      	bne.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800896c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008970:	3308      	adds	r3, #8
 8008972:	2100      	movs	r1, #0
 8008974:	4618      	mov	r0, r3
 8008976:	f001 fc5f 	bl	800a238 <RCCEx_PLL2_Config>
 800897a:	4603      	mov	r3, r0
 800897c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008980:	e015      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008986:	3328      	adds	r3, #40	; 0x28
 8008988:	2102      	movs	r1, #2
 800898a:	4618      	mov	r0, r3
 800898c:	f001 fd06 	bl	800a39c <RCCEx_PLL3_Config>
 8008990:	4603      	mov	r3, r0
 8008992:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008996:	e00a      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800899e:	e006      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80089a0:	bf00      	nop
 80089a2:	e004      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80089a4:	bf00      	nop
 80089a6:	e002      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80089a8:	bf00      	nop
 80089aa:	e000      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80089ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d10e      	bne.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089b6:	4b06      	ldr	r3, [pc, #24]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80089b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ba:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80089be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80089c6:	4a02      	ldr	r2, [pc, #8]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80089c8:	430b      	orrs	r3, r1
 80089ca:	6593      	str	r3, [r2, #88]	; 0x58
 80089cc:	e006      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80089ce:	bf00      	nop
 80089d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80089d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80089dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80089e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80089ec:	2300      	movs	r3, #0
 80089ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80089f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80089f6:	460b      	mov	r3, r1
 80089f8:	4313      	orrs	r3, r2
 80089fa:	d055      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80089fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a04:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008a08:	d033      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8008a0a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008a0e:	d82c      	bhi.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a14:	d02f      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8008a16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a1a:	d826      	bhi.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008a1c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008a20:	d02b      	beq.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8008a22:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008a26:	d820      	bhi.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a2c:	d012      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8008a2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a32:	d81a      	bhi.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d022      	beq.n	8008a7e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8008a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a3c:	d115      	bne.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a42:	3308      	adds	r3, #8
 8008a44:	2100      	movs	r1, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 fbf6 	bl	800a238 <RCCEx_PLL2_Config>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008a52:	e015      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a58:	3328      	adds	r3, #40	; 0x28
 8008a5a:	2102      	movs	r1, #2
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f001 fc9d 	bl	800a39c <RCCEx_PLL3_Config>
 8008a62:	4603      	mov	r3, r0
 8008a64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008a68:	e00a      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008a70:	e006      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008a72:	bf00      	nop
 8008a74:	e004      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008a76:	bf00      	nop
 8008a78:	e002      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008a7a:	bf00      	nop
 8008a7c:	e000      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8008a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d10b      	bne.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a88:	4ba0      	ldr	r3, [pc, #640]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a8c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a98:	4a9c      	ldr	r2, [pc, #624]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008a9a:	430b      	orrs	r3, r1
 8008a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8008a9e:	e003      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008aa4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	f002 0308 	and.w	r3, r2, #8
 8008ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008ab8:	2300      	movs	r3, #0
 8008aba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008abe:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	d01e      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8008ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad4:	d10c      	bne.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ada:	3328      	adds	r3, #40	; 0x28
 8008adc:	2102      	movs	r1, #2
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f001 fc5c 	bl	800a39c <RCCEx_PLL3_Config>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008af0:	4b86      	ldr	r3, [pc, #536]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008af4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008af8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b00:	4a82      	ldr	r2, [pc, #520]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008b02:	430b      	orrs	r3, r1
 8008b04:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	f002 0310 	and.w	r3, r2, #16
 8008b12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b16:	2300      	movs	r3, #0
 8008b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b1c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008b20:	460b      	mov	r3, r1
 8008b22:	4313      	orrs	r3, r2
 8008b24:	d01e      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b32:	d10c      	bne.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b38:	3328      	adds	r3, #40	; 0x28
 8008b3a:	2102      	movs	r1, #2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f001 fc2d 	bl	800a39c <RCCEx_PLL3_Config>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d002      	beq.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b4e:	4b6f      	ldr	r3, [pc, #444]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008b5e:	4a6b      	ldr	r2, [pc, #428]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008b60:	430b      	orrs	r3, r1
 8008b62:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008b70:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b72:	2300      	movs	r3, #0
 8008b74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b76:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	d03e      	beq.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b8c:	d022      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8008b8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b92:	d81b      	bhi.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8008b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b9c:	d00b      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8008b9e:	e015      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba4:	3308      	adds	r3, #8
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f001 fb45 	bl	800a238 <RCCEx_PLL2_Config>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008bb4:	e00f      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bba:	3328      	adds	r3, #40	; 0x28
 8008bbc:	2102      	movs	r1, #2
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f001 fbec 	bl	800a39c <RCCEx_PLL3_Config>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008bca:	e004      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008bd2:	e000      	b.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8008bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10b      	bne.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008bde:	4b4b      	ldr	r3, [pc, #300]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008bee:	4a47      	ldr	r2, [pc, #284]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008bf0:	430b      	orrs	r3, r1
 8008bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8008bf4:	e003      	b.n	8008bfe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bf6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008bfa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008c0a:	673b      	str	r3, [r7, #112]	; 0x70
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	677b      	str	r3, [r7, #116]	; 0x74
 8008c10:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008c14:	460b      	mov	r3, r1
 8008c16:	4313      	orrs	r3, r2
 8008c18:	d03b      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c26:	d01f      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8008c28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008c2c:	d818      	bhi.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8008c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c32:	d003      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8008c34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008c38:	d007      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8008c3a:	e011      	b.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c3c:	4b33      	ldr	r3, [pc, #204]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c40:	4a32      	ldr	r2, [pc, #200]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008c48:	e00f      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c4e:	3328      	adds	r3, #40	; 0x28
 8008c50:	2101      	movs	r1, #1
 8008c52:	4618      	mov	r0, r3
 8008c54:	f001 fba2 	bl	800a39c <RCCEx_PLL3_Config>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8008c5e:	e004      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008c66:	e000      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8008c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10b      	bne.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c72:	4b26      	ldr	r3, [pc, #152]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c76:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c82:	4a22      	ldr	r2, [pc, #136]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008c84:	430b      	orrs	r3, r1
 8008c86:	6553      	str	r3, [r2, #84]	; 0x54
 8008c88:	e003      	b.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008c8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008c9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ca4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008ca8:	460b      	mov	r3, r1
 8008caa:	4313      	orrs	r3, r2
 8008cac:	d034      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d003      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8008cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cbc:	d007      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8008cbe:	e011      	b.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cc0:	4b12      	ldr	r3, [pc, #72]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	4a11      	ldr	r2, [pc, #68]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ccc:	e00e      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cd2:	3308      	adds	r3, #8
 8008cd4:	2102      	movs	r1, #2
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f001 faae 	bl	800a238 <RCCEx_PLL2_Config>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008ce2:	e003      	b.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d10d      	bne.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008cf4:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d02:	4a02      	ldr	r2, [pc, #8]	; (8008d0c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8008d04:	430b      	orrs	r3, r1
 8008d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008d08:	e006      	b.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8008d0a:	bf00      	nop
 8008d0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d10:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008d14:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8008d24:	663b      	str	r3, [r7, #96]	; 0x60
 8008d26:	2300      	movs	r3, #0
 8008d28:	667b      	str	r3, [r7, #100]	; 0x64
 8008d2a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008d2e:	460b      	mov	r3, r1
 8008d30:	4313      	orrs	r3, r2
 8008d32:	d00c      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d38:	3328      	adds	r3, #40	; 0x28
 8008d3a:	2102      	movs	r1, #2
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f001 fb2d 	bl	800a39c <RCCEx_PLL3_Config>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d002      	beq.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8008d5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d60:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008d64:	460b      	mov	r3, r1
 8008d66:	4313      	orrs	r3, r2
 8008d68:	d036      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008d6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d74:	d018      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8008d76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d7a:	d811      	bhi.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008d7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d80:	d014      	beq.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8008d82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d86:	d80b      	bhi.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d011      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8008d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d90:	d106      	bne.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d92:	4bb7      	ldr	r3, [pc, #732]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d96:	4ab6      	ldr	r2, [pc, #728]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008d9e:	e008      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8008da6:	e004      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008da8:	bf00      	nop
 8008daa:	e002      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008dac:	bf00      	nop
 8008dae:	e000      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8008db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008db2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10a      	bne.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008dba:	4bad      	ldr	r3, [pc, #692]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dc8:	4aa9      	ldr	r2, [pc, #676]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008dca:	430b      	orrs	r3, r1
 8008dcc:	6553      	str	r3, [r2, #84]	; 0x54
 8008dce:	e003      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008dd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008de4:	653b      	str	r3, [r7, #80]	; 0x50
 8008de6:	2300      	movs	r3, #0
 8008de8:	657b      	str	r3, [r7, #84]	; 0x54
 8008dea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8008dee:	460b      	mov	r3, r1
 8008df0:	4313      	orrs	r3, r2
 8008df2:	d009      	beq.n	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008df4:	4b9e      	ldr	r3, [pc, #632]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008df8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e02:	4a9b      	ldr	r2, [pc, #620]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e04:	430b      	orrs	r3, r1
 8008e06:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e10:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008e14:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e16:	2300      	movs	r3, #0
 8008e18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e1a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8008e1e:	460b      	mov	r3, r1
 8008e20:	4313      	orrs	r3, r2
 8008e22:	d009      	beq.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008e24:	4b92      	ldr	r3, [pc, #584]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e28:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e32:	4a8f      	ldr	r2, [pc, #572]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e34:	430b      	orrs	r3, r1
 8008e36:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e40:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008e44:	643b      	str	r3, [r7, #64]	; 0x40
 8008e46:	2300      	movs	r3, #0
 8008e48:	647b      	str	r3, [r7, #68]	; 0x44
 8008e4a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008e4e:	460b      	mov	r3, r1
 8008e50:	4313      	orrs	r3, r2
 8008e52:	d00e      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e54:	4b86      	ldr	r3, [pc, #536]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	4a85      	ldr	r2, [pc, #532]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e5e:	6113      	str	r3, [r2, #16]
 8008e60:	4b83      	ldr	r3, [pc, #524]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e62:	6919      	ldr	r1, [r3, #16]
 8008e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008e6c:	4a80      	ldr	r2, [pc, #512]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e6e:	430b      	orrs	r3, r1
 8008e70:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e80:	2300      	movs	r3, #0
 8008e82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e84:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008e88:	460b      	mov	r3, r1
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	d009      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008e8e:	4b78      	ldr	r3, [pc, #480]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e92:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9c:	4a74      	ldr	r2, [pc, #464]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008e9e:	430b      	orrs	r3, r1
 8008ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008eae:	633b      	str	r3, [r7, #48]	; 0x30
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8008eb4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008eb8:	460b      	mov	r3, r1
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	d00a      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ebe:	4b6c      	ldr	r3, [pc, #432]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ec2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ece:	4a68      	ldr	r2, [pc, #416]	; (8009070 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8008ed0:	430b      	orrs	r3, r1
 8008ed2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	2100      	movs	r1, #0
 8008ede:	62b9      	str	r1, [r7, #40]	; 0x28
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ee6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8008eea:	460b      	mov	r3, r1
 8008eec:	4313      	orrs	r3, r2
 8008eee:	d011      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f001 f99d 	bl	800a238 <RCCEx_PLL2_Config>
 8008efe:	4603      	mov	r3, r0
 8008f00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008f04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	6239      	str	r1, [r7, #32]
 8008f20:	f003 0302 	and.w	r3, r3, #2
 8008f24:	627b      	str	r3, [r7, #36]	; 0x24
 8008f26:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	d011      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f34:	3308      	adds	r3, #8
 8008f36:	2101      	movs	r1, #1
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f001 f97d 	bl	800a238 <RCCEx_PLL2_Config>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008f44:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d003      	beq.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	61b9      	str	r1, [r7, #24]
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	61fb      	str	r3, [r7, #28]
 8008f66:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	d011      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f74:	3308      	adds	r3, #8
 8008f76:	2102      	movs	r1, #2
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f001 f95d 	bl	800a238 <RCCEx_PLL2_Config>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8008f84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008f90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	6139      	str	r1, [r7, #16]
 8008fa0:	f003 0308 	and.w	r3, r3, #8
 8008fa4:	617b      	str	r3, [r7, #20]
 8008fa6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008faa:	460b      	mov	r3, r1
 8008fac:	4313      	orrs	r3, r2
 8008fae:	d011      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fb4:	3328      	adds	r3, #40	; 0x28
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f001 f9ef 	bl	800a39c <RCCEx_PLL3_Config>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8008fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d003      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8008fd0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	2100      	movs	r1, #0
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	f003 0310 	and.w	r3, r3, #16
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008fea:	460b      	mov	r3, r1
 8008fec:	4313      	orrs	r3, r2
 8008fee:	d011      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ff4:	3328      	adds	r3, #40	; 0x28
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f001 f9cf 	bl	800a39c <RCCEx_PLL3_Config>
 8008ffe:	4603      	mov	r3, r0
 8009000:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009004:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800900c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009010:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800901c:	2100      	movs	r1, #0
 800901e:	6039      	str	r1, [r7, #0]
 8009020:	f003 0320 	and.w	r3, r3, #32
 8009024:	607b      	str	r3, [r7, #4]
 8009026:	e9d7 1200 	ldrd	r1, r2, [r7]
 800902a:	460b      	mov	r3, r1
 800902c:	4313      	orrs	r3, r2
 800902e:	d011      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009034:	3328      	adds	r3, #40	; 0x28
 8009036:	2102      	movs	r1, #2
 8009038:	4618      	mov	r0, r3
 800903a:	f001 f9af 	bl	800a39c <RCCEx_PLL3_Config>
 800903e:	4603      	mov	r3, r0
 8009040:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8009044:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800904c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009050:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8009054:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8009058:	2b00      	cmp	r3, #0
 800905a:	d101      	bne.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	e000      	b.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009060:	2301      	movs	r3, #1
}
 8009062:	4618      	mov	r0, r3
 8009064:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8009068:	46bd      	mov	sp, r7
 800906a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800906e:	bf00      	nop
 8009070:	58024400 	.word	0x58024400

08009074 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b090      	sub	sp, #64	; 0x40
 8009078:	af00      	add	r7, sp, #0
 800907a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800907e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009082:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009086:	430b      	orrs	r3, r1
 8009088:	f040 8094 	bne.w	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800908c:	4b9b      	ldr	r3, [pc, #620]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800908e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009090:	f003 0307 	and.w	r3, r3, #7
 8009094:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	2b04      	cmp	r3, #4
 800909a:	f200 8087 	bhi.w	80091ac <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800909e:	a201      	add	r2, pc, #4	; (adr r2, 80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80090a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a4:	080090b9 	.word	0x080090b9
 80090a8:	080090e1 	.word	0x080090e1
 80090ac:	08009109 	.word	0x08009109
 80090b0:	080091a5 	.word	0x080091a5
 80090b4:	08009131 	.word	0x08009131
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090b8:	4b90      	ldr	r3, [pc, #576]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090c4:	d108      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 ff62 	bl	8009f94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090d4:	f000 bc93 	b.w	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090dc:	f000 bc8f 	b.w	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090e0:	4b86      	ldr	r3, [pc, #536]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090ec:	d108      	bne.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090ee:	f107 0318 	add.w	r3, r7, #24
 80090f2:	4618      	mov	r0, r3
 80090f4:	f000 fca6 	bl	8009a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090fc:	f000 bc7f 	b.w	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009104:	f000 bc7b 	b.w	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009108:	4b7c      	ldr	r3, [pc, #496]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009114:	d108      	bne.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009116:	f107 030c 	add.w	r3, r7, #12
 800911a:	4618      	mov	r0, r3
 800911c:	f000 fde6 	bl	8009cec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009124:	f000 bc6b 	b.w	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009128:	2300      	movs	r3, #0
 800912a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800912c:	f000 bc67 	b.w	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009130:	4b72      	ldr	r3, [pc, #456]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009134:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009138:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800913a:	4b70      	ldr	r3, [pc, #448]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 0304 	and.w	r3, r3, #4
 8009142:	2b04      	cmp	r3, #4
 8009144:	d10c      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009148:	2b00      	cmp	r3, #0
 800914a:	d109      	bne.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800914c:	4b6b      	ldr	r3, [pc, #428]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	08db      	lsrs	r3, r3, #3
 8009152:	f003 0303 	and.w	r3, r3, #3
 8009156:	4a6a      	ldr	r2, [pc, #424]	; (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009158:	fa22 f303 	lsr.w	r3, r2, r3
 800915c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800915e:	e01f      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009160:	4b66      	ldr	r3, [pc, #408]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800916c:	d106      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800916e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009170:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009174:	d102      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009176:	4b63      	ldr	r3, [pc, #396]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800917a:	e011      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800917c:	4b5f      	ldr	r3, [pc, #380]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009184:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009188:	d106      	bne.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800918a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800918c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009190:	d102      	bne.n	8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009192:	4b5d      	ldr	r3, [pc, #372]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009196:	e003      	b.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009198:	2300      	movs	r3, #0
 800919a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800919c:	f000 bc2f 	b.w	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80091a0:	f000 bc2d 	b.w	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091a4:	4b59      	ldr	r3, [pc, #356]	; (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80091a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091a8:	f000 bc29 	b.w	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80091ac:	2300      	movs	r3, #0
 80091ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091b0:	f000 bc25 	b.w	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80091b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091b8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80091bc:	430b      	orrs	r3, r1
 80091be:	f040 80a7 	bne.w	8009310 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80091c2:	4b4e      	ldr	r3, [pc, #312]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80091c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80091ca:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091d2:	d054      	beq.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80091d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091da:	f200 808b 	bhi.w	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80091e4:	f000 8083 	beq.w	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80091ee:	f200 8081 	bhi.w	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091f8:	d02f      	beq.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80091fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009200:	d878      	bhi.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8009208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800920e:	d012      	beq.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8009210:	e070      	b.n	80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009212:	4b3a      	ldr	r3, [pc, #232]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800921a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800921e:	d107      	bne.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009224:	4618      	mov	r0, r3
 8009226:	f000 feb5 	bl	8009f94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800922a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800922e:	e3e6      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009230:	2300      	movs	r3, #0
 8009232:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009234:	e3e3      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009236:	4b31      	ldr	r3, [pc, #196]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800923e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009242:	d107      	bne.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009244:	f107 0318 	add.w	r3, r7, #24
 8009248:	4618      	mov	r0, r3
 800924a:	f000 fbfb 	bl	8009a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800924e:	69bb      	ldr	r3, [r7, #24]
 8009250:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009252:	e3d4      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009258:	e3d1      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800925a:	4b28      	ldr	r3, [pc, #160]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009262:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009266:	d107      	bne.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009268:	f107 030c 	add.w	r3, r7, #12
 800926c:	4618      	mov	r0, r3
 800926e:	f000 fd3d 	bl	8009cec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009276:	e3c2      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009278:	2300      	movs	r3, #0
 800927a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800927c:	e3bf      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800927e:	4b1f      	ldr	r3, [pc, #124]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009282:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009286:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009288:	4b1c      	ldr	r3, [pc, #112]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 0304 	and.w	r3, r3, #4
 8009290:	2b04      	cmp	r3, #4
 8009292:	d10c      	bne.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8009294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009296:	2b00      	cmp	r3, #0
 8009298:	d109      	bne.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800929a:	4b18      	ldr	r3, [pc, #96]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	08db      	lsrs	r3, r3, #3
 80092a0:	f003 0303 	and.w	r3, r3, #3
 80092a4:	4a16      	ldr	r2, [pc, #88]	; (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80092a6:	fa22 f303 	lsr.w	r3, r2, r3
 80092aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092ac:	e01e      	b.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092ae:	4b13      	ldr	r3, [pc, #76]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ba:	d106      	bne.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 80092bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092c2:	d102      	bne.n	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80092c4:	4b0f      	ldr	r3, [pc, #60]	; (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092c8:	e010      	b.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80092ca:	4b0c      	ldr	r3, [pc, #48]	; (80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092d6:	d106      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 80092d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092de:	d102      	bne.n	80092e6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80092e0:	4b09      	ldr	r3, [pc, #36]	; (8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092e4:	e002      	b.n	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80092ea:	e388      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80092ec:	e387      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80092ee:	4b07      	ldr	r3, [pc, #28]	; (800930c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80092f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092f2:	e384      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80092f4:	2300      	movs	r3, #0
 80092f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092f8:	e381      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80092fa:	bf00      	nop
 80092fc:	58024400 	.word	0x58024400
 8009300:	03d09000 	.word	0x03d09000
 8009304:	003d0900 	.word	0x003d0900
 8009308:	007a1200 	.word	0x007a1200
 800930c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009314:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009318:	430b      	orrs	r3, r1
 800931a:	f040 809c 	bne.w	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800931e:	4b9e      	ldr	r3, [pc, #632]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009322:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009326:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800932e:	d054      	beq.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009332:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009336:	f200 808b 	bhi.w	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800933a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800933c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009340:	f000 8083 	beq.w	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800934a:	f200 8081 	bhi.w	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800934e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009350:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009354:	d02f      	beq.n	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009358:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800935c:	d878      	bhi.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800935e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009360:	2b00      	cmp	r3, #0
 8009362:	d004      	beq.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009366:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800936a:	d012      	beq.n	8009392 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800936c:	e070      	b.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800936e:	4b8a      	ldr	r3, [pc, #552]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009376:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800937a:	d107      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800937c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009380:	4618      	mov	r0, r3
 8009382:	f000 fe07 	bl	8009f94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800938a:	e338      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800938c:	2300      	movs	r3, #0
 800938e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009390:	e335      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009392:	4b81      	ldr	r3, [pc, #516]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800939a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800939e:	d107      	bne.n	80093b0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093a0:	f107 0318 	add.w	r3, r7, #24
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 fb4d 	bl	8009a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093ae:	e326      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093b0:	2300      	movs	r3, #0
 80093b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093b4:	e323      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80093b6:	4b78      	ldr	r3, [pc, #480]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093c2:	d107      	bne.n	80093d4 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093c4:	f107 030c 	add.w	r3, r7, #12
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 fc8f 	bl	8009cec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80093d2:	e314      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093d8:	e311      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093da:	4b6f      	ldr	r3, [pc, #444]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80093dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80093e2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093e4:	4b6c      	ldr	r3, [pc, #432]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 0304 	and.w	r3, r3, #4
 80093ec:	2b04      	cmp	r3, #4
 80093ee:	d10c      	bne.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80093f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d109      	bne.n	800940a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80093f6:	4b68      	ldr	r3, [pc, #416]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	08db      	lsrs	r3, r3, #3
 80093fc:	f003 0303 	and.w	r3, r3, #3
 8009400:	4a66      	ldr	r2, [pc, #408]	; (800959c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009402:	fa22 f303 	lsr.w	r3, r2, r3
 8009406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009408:	e01e      	b.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800940a:	4b63      	ldr	r3, [pc, #396]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009412:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009416:	d106      	bne.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800941a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800941e:	d102      	bne.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009420:	4b5f      	ldr	r3, [pc, #380]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009424:	e010      	b.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009426:	4b5c      	ldr	r3, [pc, #368]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800942e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009432:	d106      	bne.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8009434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800943a:	d102      	bne.n	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800943c:	4b59      	ldr	r3, [pc, #356]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800943e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009440:	e002      	b.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009442:	2300      	movs	r3, #0
 8009444:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009446:	e2da      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009448:	e2d9      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800944a:	4b57      	ldr	r3, [pc, #348]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800944c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800944e:	e2d6      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009454:	e2d3      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800945a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800945e:	430b      	orrs	r3, r1
 8009460:	f040 80a7 	bne.w	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009464:	4b4c      	ldr	r3, [pc, #304]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009468:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800946c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800946e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009474:	d055      	beq.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800947c:	f200 8096 	bhi.w	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009486:	f000 8084 	beq.w	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800948a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009490:	f200 808c 	bhi.w	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800949a:	d030      	beq.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094a2:	f200 8083 	bhi.w	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 80094a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d004      	beq.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 80094ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094b2:	d012      	beq.n	80094da <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 80094b4:	e07a      	b.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80094b6:	4b38      	ldr	r3, [pc, #224]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094c2:	d107      	bne.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80094c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 fd63 	bl	8009f94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80094ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094d2:	e294      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094d4:	2300      	movs	r3, #0
 80094d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094d8:	e291      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094da:	4b2f      	ldr	r3, [pc, #188]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094e6:	d107      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094e8:	f107 0318 	add.w	r3, r7, #24
 80094ec:	4618      	mov	r0, r3
 80094ee:	f000 faa9 	bl	8009a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094f6:	e282      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80094f8:	2300      	movs	r3, #0
 80094fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094fc:	e27f      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094fe:	4b26      	ldr	r3, [pc, #152]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009506:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800950a:	d107      	bne.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800950c:	f107 030c 	add.w	r3, r7, #12
 8009510:	4618      	mov	r0, r3
 8009512:	f000 fbeb 	bl	8009cec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800951a:	e270      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009520:	e26d      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009522:	4b1d      	ldr	r3, [pc, #116]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009526:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800952a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800952c:	4b1a      	ldr	r3, [pc, #104]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	2b04      	cmp	r3, #4
 8009536:	d10c      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953a:	2b00      	cmp	r3, #0
 800953c:	d109      	bne.n	8009552 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800953e:	4b16      	ldr	r3, [pc, #88]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	08db      	lsrs	r3, r3, #3
 8009544:	f003 0303 	and.w	r3, r3, #3
 8009548:	4a14      	ldr	r2, [pc, #80]	; (800959c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800954a:	fa22 f303 	lsr.w	r3, r2, r3
 800954e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009550:	e01e      	b.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009552:	4b11      	ldr	r3, [pc, #68]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800955a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800955e:	d106      	bne.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009562:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009566:	d102      	bne.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009568:	4b0d      	ldr	r3, [pc, #52]	; (80095a0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800956a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800956c:	e010      	b.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800956e:	4b0a      	ldr	r3, [pc, #40]	; (8009598 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800957a:	d106      	bne.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800957c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800957e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009582:	d102      	bne.n	800958a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009584:	4b07      	ldr	r3, [pc, #28]	; (80095a4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009586:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009588:	e002      	b.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800958a:	2300      	movs	r3, #0
 800958c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800958e:	e236      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009590:	e235      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009592:	4b05      	ldr	r3, [pc, #20]	; (80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009596:	e232      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009598:	58024400 	.word	0x58024400
 800959c:	03d09000 	.word	0x03d09000
 80095a0:	003d0900 	.word	0x003d0900
 80095a4:	007a1200 	.word	0x007a1200
 80095a8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80095ac:	2300      	movs	r3, #0
 80095ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095b0:	e225      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80095b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095b6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80095ba:	430b      	orrs	r3, r1
 80095bc:	f040 8085 	bne.w	80096ca <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80095c0:	4b9c      	ldr	r3, [pc, #624]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80095c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095c4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80095c8:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80095ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095d0:	d06b      	beq.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80095d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80095d8:	d874      	bhi.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80095da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095e0:	d056      	beq.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 80095e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095e8:	d86c      	bhi.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80095ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095f0:	d03b      	beq.n	800966a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80095f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80095f8:	d864      	bhi.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 80095fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009600:	d021      	beq.n	8009646 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8009602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009608:	d85c      	bhi.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800960a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960c:	2b00      	cmp	r3, #0
 800960e:	d004      	beq.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8009610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009616:	d004      	beq.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8009618:	e054      	b.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800961a:	f7fe fb5f 	bl	8007cdc <HAL_RCC_GetPCLK1Freq>
 800961e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009620:	e1ed      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009622:	4b84      	ldr	r3, [pc, #528]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800962a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800962e:	d107      	bne.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009630:	f107 0318 	add.w	r3, r7, #24
 8009634:	4618      	mov	r0, r3
 8009636:	f000 fa05 	bl	8009a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800963a:	69fb      	ldr	r3, [r7, #28]
 800963c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800963e:	e1de      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009640:	2300      	movs	r3, #0
 8009642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009644:	e1db      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009646:	4b7b      	ldr	r3, [pc, #492]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800964e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009652:	d107      	bne.n	8009664 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009654:	f107 030c 	add.w	r3, r7, #12
 8009658:	4618      	mov	r0, r3
 800965a:	f000 fb47 	bl	8009cec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009662:	e1cc      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009664:	2300      	movs	r3, #0
 8009666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009668:	e1c9      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800966a:	4b72      	ldr	r3, [pc, #456]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 0304 	and.w	r3, r3, #4
 8009672:	2b04      	cmp	r3, #4
 8009674:	d109      	bne.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009676:	4b6f      	ldr	r3, [pc, #444]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	08db      	lsrs	r3, r3, #3
 800967c:	f003 0303 	and.w	r3, r3, #3
 8009680:	4a6d      	ldr	r2, [pc, #436]	; (8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009682:	fa22 f303 	lsr.w	r3, r2, r3
 8009686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009688:	e1b9      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800968e:	e1b6      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009690:	4b68      	ldr	r3, [pc, #416]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800969c:	d102      	bne.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800969e:	4b67      	ldr	r3, [pc, #412]	; (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80096a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096a2:	e1ac      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096a8:	e1a9      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80096aa:	4b62      	ldr	r3, [pc, #392]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096b6:	d102      	bne.n	80096be <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 80096b8:	4b61      	ldr	r3, [pc, #388]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80096ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80096bc:	e19f      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096c2:	e19c      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80096c4:	2300      	movs	r3, #0
 80096c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80096c8:	e199      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80096ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ce:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80096d2:	430b      	orrs	r3, r1
 80096d4:	d173      	bne.n	80097be <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80096d6:	4b57      	ldr	r3, [pc, #348]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80096d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80096de:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80096e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096e6:	d02f      	beq.n	8009748 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 80096e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096ee:	d863      	bhi.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 80096f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d004      	beq.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80096f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096fc:	d012      	beq.n	8009724 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 80096fe:	e05b      	b.n	80097b8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009700:	4b4c      	ldr	r3, [pc, #304]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800970c:	d107      	bne.n	800971e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800970e:	f107 0318 	add.w	r3, r7, #24
 8009712:	4618      	mov	r0, r3
 8009714:	f000 f996 	bl	8009a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800971c:	e16f      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800971e:	2300      	movs	r3, #0
 8009720:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009722:	e16c      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009724:	4b43      	ldr	r3, [pc, #268]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800972c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009730:	d107      	bne.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009732:	f107 030c 	add.w	r3, r7, #12
 8009736:	4618      	mov	r0, r3
 8009738:	f000 fad8 	bl	8009cec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009740:	e15d      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009742:	2300      	movs	r3, #0
 8009744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009746:	e15a      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009748:	4b3a      	ldr	r3, [pc, #232]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800974a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800974c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009750:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009752:	4b38      	ldr	r3, [pc, #224]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0304 	and.w	r3, r3, #4
 800975a:	2b04      	cmp	r3, #4
 800975c:	d10c      	bne.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800975e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009760:	2b00      	cmp	r3, #0
 8009762:	d109      	bne.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009764:	4b33      	ldr	r3, [pc, #204]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	08db      	lsrs	r3, r3, #3
 800976a:	f003 0303 	and.w	r3, r3, #3
 800976e:	4a32      	ldr	r2, [pc, #200]	; (8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8009770:	fa22 f303 	lsr.w	r3, r2, r3
 8009774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009776:	e01e      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009778:	4b2e      	ldr	r3, [pc, #184]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009784:	d106      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8009786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009788:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800978c:	d102      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800978e:	4b2b      	ldr	r3, [pc, #172]	; (800983c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8009790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009792:	e010      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009794:	4b27      	ldr	r3, [pc, #156]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800979c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80097a0:	d106      	bne.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 80097a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097a8:	d102      	bne.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097aa:	4b25      	ldr	r3, [pc, #148]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 80097ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097ae:	e002      	b.n	80097b6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097b0:	2300      	movs	r3, #0
 80097b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80097b4:	e123      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80097b6:	e122      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 80097b8:	2300      	movs	r3, #0
 80097ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097bc:	e11f      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80097be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097c2:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80097c6:	430b      	orrs	r3, r1
 80097c8:	d13c      	bne.n	8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80097ca:	4b1a      	ldr	r3, [pc, #104]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80097cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097d2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80097d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d004      	beq.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 80097da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097e0:	d012      	beq.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80097e2:	e023      	b.n	800982c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80097e4:	4b13      	ldr	r3, [pc, #76]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80097f0:	d107      	bne.n	8009802 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 fbcc 	bl	8009f94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80097fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009800:	e0fd      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009802:	2300      	movs	r3, #0
 8009804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009806:	e0fa      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009808:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009810:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009814:	d107      	bne.n	8009826 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009816:	f107 0318 	add.w	r3, r7, #24
 800981a:	4618      	mov	r0, r3
 800981c:	f000 f912 	bl	8009a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009824:	e0eb      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009826:	2300      	movs	r3, #0
 8009828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800982a:	e0e8      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800982c:	2300      	movs	r3, #0
 800982e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009830:	e0e5      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009832:	bf00      	nop
 8009834:	58024400 	.word	0x58024400
 8009838:	03d09000 	.word	0x03d09000
 800983c:	003d0900 	.word	0x003d0900
 8009840:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009848:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800984c:	430b      	orrs	r3, r1
 800984e:	f040 8085 	bne.w	800995c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009852:	4b6d      	ldr	r3, [pc, #436]	; (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009856:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800985a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800985c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800985e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009862:	d06b      	beq.n	800993c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8009864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009866:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800986a:	d874      	bhi.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800986c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800986e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009872:	d056      	beq.n	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8009874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800987a:	d86c      	bhi.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800987c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800987e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009882:	d03b      	beq.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8009884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009886:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800988a:	d864      	bhi.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800988c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800988e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009892:	d021      	beq.n	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8009894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800989a:	d85c      	bhi.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800989c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d004      	beq.n	80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 80098a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80098a8:	d004      	beq.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 80098aa:	e054      	b.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80098ac:	f000 f8b4 	bl	8009a18 <HAL_RCCEx_GetD3PCLK1Freq>
 80098b0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80098b2:	e0a4      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80098b4:	4b54      	ldr	r3, [pc, #336]	; (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098c0:	d107      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80098c2:	f107 0318 	add.w	r3, r7, #24
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 f8bc 	bl	8009a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098d0:	e095      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80098d2:	2300      	movs	r3, #0
 80098d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098d6:	e092      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80098d8:	4b4b      	ldr	r3, [pc, #300]	; (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80098e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80098e4:	d107      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098e6:	f107 030c 	add.w	r3, r7, #12
 80098ea:	4618      	mov	r0, r3
 80098ec:	f000 f9fe 	bl	8009cec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098f4:	e083      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80098f6:	2300      	movs	r3, #0
 80098f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80098fa:	e080      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098fc:	4b42      	ldr	r3, [pc, #264]	; (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f003 0304 	and.w	r3, r3, #4
 8009904:	2b04      	cmp	r3, #4
 8009906:	d109      	bne.n	800991c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009908:	4b3f      	ldr	r3, [pc, #252]	; (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	08db      	lsrs	r3, r3, #3
 800990e:	f003 0303 	and.w	r3, r3, #3
 8009912:	4a3e      	ldr	r2, [pc, #248]	; (8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8009914:	fa22 f303 	lsr.w	r3, r2, r3
 8009918:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800991a:	e070      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800991c:	2300      	movs	r3, #0
 800991e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009920:	e06d      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009922:	4b39      	ldr	r3, [pc, #228]	; (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800992a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800992e:	d102      	bne.n	8009936 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8009930:	4b37      	ldr	r3, [pc, #220]	; (8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8009932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009934:	e063      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009936:	2300      	movs	r3, #0
 8009938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800993a:	e060      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800993c:	4b32      	ldr	r3, [pc, #200]	; (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009944:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009948:	d102      	bne.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800994a:	4b32      	ldr	r3, [pc, #200]	; (8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800994c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800994e:	e056      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009950:	2300      	movs	r3, #0
 8009952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009954:	e053      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800995a:	e050      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800995c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009960:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009964:	430b      	orrs	r3, r1
 8009966:	d148      	bne.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009968:	4b27      	ldr	r3, [pc, #156]	; (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800996a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800996c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009970:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009978:	d02a      	beq.n	80099d0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800997a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009980:	d838      	bhi.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009984:	2b00      	cmp	r3, #0
 8009986:	d004      	beq.n	8009992 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8009988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800998a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800998e:	d00d      	beq.n	80099ac <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8009990:	e030      	b.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009992:	4b1d      	ldr	r3, [pc, #116]	; (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800999a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800999e:	d102      	bne.n	80099a6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 80099a0:	4b1c      	ldr	r3, [pc, #112]	; (8009a14 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80099a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099a4:	e02b      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099a6:	2300      	movs	r3, #0
 80099a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099aa:	e028      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80099ac:	4b16      	ldr	r3, [pc, #88]	; (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80099b8:	d107      	bne.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099be:	4618      	mov	r0, r3
 80099c0:	f000 fae8 	bl	8009f94 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099c8:	e019      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099ca:	2300      	movs	r3, #0
 80099cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099ce:	e016      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80099d0:	4b0d      	ldr	r3, [pc, #52]	; (8009a08 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80099dc:	d107      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099de:	f107 0318 	add.w	r3, r7, #24
 80099e2:	4618      	mov	r0, r3
 80099e4:	f000 f82e 	bl	8009a44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80099ec:	e007      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80099ee:	2300      	movs	r3, #0
 80099f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099f2:	e004      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099f8:	e001      	b.n	80099fe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80099fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3740      	adds	r7, #64	; 0x40
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	58024400 	.word	0x58024400
 8009a0c:	03d09000 	.word	0x03d09000
 8009a10:	003d0900 	.word	0x003d0900
 8009a14:	007a1200 	.word	0x007a1200

08009a18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009a1c:	f7fe f92e 	bl	8007c7c <HAL_RCC_GetHCLKFreq>
 8009a20:	4602      	mov	r2, r0
 8009a22:	4b06      	ldr	r3, [pc, #24]	; (8009a3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	091b      	lsrs	r3, r3, #4
 8009a28:	f003 0307 	and.w	r3, r3, #7
 8009a2c:	4904      	ldr	r1, [pc, #16]	; (8009a40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009a2e:	5ccb      	ldrb	r3, [r1, r3]
 8009a30:	f003 031f 	and.w	r3, r3, #31
 8009a34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	58024400 	.word	0x58024400
 8009a40:	08012a78 	.word	0x08012a78

08009a44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b089      	sub	sp, #36	; 0x24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a4c:	4ba1      	ldr	r3, [pc, #644]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a50:	f003 0303 	and.w	r3, r3, #3
 8009a54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009a56:	4b9f      	ldr	r3, [pc, #636]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a5a:	0b1b      	lsrs	r3, r3, #12
 8009a5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009a62:	4b9c      	ldr	r3, [pc, #624]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a66:	091b      	lsrs	r3, r3, #4
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009a6e:	4b99      	ldr	r3, [pc, #612]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a72:	08db      	lsrs	r3, r3, #3
 8009a74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	fb02 f303 	mul.w	r3, r2, r3
 8009a7e:	ee07 3a90 	vmov	s15, r3
 8009a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 8111 	beq.w	8009cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	2b02      	cmp	r3, #2
 8009a96:	f000 8083 	beq.w	8009ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	f200 80a1 	bhi.w	8009be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d003      	beq.n	8009ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d056      	beq.n	8009b5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009aae:	e099      	b.n	8009be4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ab0:	4b88      	ldr	r3, [pc, #544]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 0320 	and.w	r3, r3, #32
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d02d      	beq.n	8009b18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009abc:	4b85      	ldr	r3, [pc, #532]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	08db      	lsrs	r3, r3, #3
 8009ac2:	f003 0303 	and.w	r3, r3, #3
 8009ac6:	4a84      	ldr	r2, [pc, #528]	; (8009cd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8009acc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	ee07 3a90 	vmov	s15, r3
 8009ad4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	ee07 3a90 	vmov	s15, r3
 8009ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ae6:	4b7b      	ldr	r3, [pc, #492]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aee:	ee07 3a90 	vmov	s15, r3
 8009af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009afa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009b16:	e087      	b.n	8009c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	ee07 3a90 	vmov	s15, r3
 8009b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b2a:	4b6a      	ldr	r3, [pc, #424]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b32:	ee07 3a90 	vmov	s15, r3
 8009b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b5a:	e065      	b.n	8009c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b6e:	4b59      	ldr	r3, [pc, #356]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b76:	ee07 3a90 	vmov	s15, r3
 8009b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009b82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b9e:	e043      	b.n	8009c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	ee07 3a90 	vmov	s15, r3
 8009ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009baa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009ce8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bb2:	4b48      	ldr	r3, [pc, #288]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bba:	ee07 3a90 	vmov	s15, r3
 8009bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009bc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009be2:	e021      	b.n	8009c28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	ee07 3a90 	vmov	s15, r3
 8009bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bf6:	4b37      	ldr	r3, [pc, #220]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bfe:	ee07 3a90 	vmov	s15, r3
 8009c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009cdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009c28:	4b2a      	ldr	r3, [pc, #168]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c2c:	0a5b      	lsrs	r3, r3, #9
 8009c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c32:	ee07 3a90 	vmov	s15, r3
 8009c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c4e:	ee17 2a90 	vmov	r2, s15
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009c56:	4b1f      	ldr	r3, [pc, #124]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5a:	0c1b      	lsrs	r3, r3, #16
 8009c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c60:	ee07 3a90 	vmov	s15, r3
 8009c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c70:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c7c:	ee17 2a90 	vmov	r2, s15
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009c84:	4b13      	ldr	r3, [pc, #76]	; (8009cd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c88:	0e1b      	lsrs	r3, r3, #24
 8009c8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c8e:	ee07 3a90 	vmov	s15, r3
 8009c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009c9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009c9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009caa:	ee17 2a90 	vmov	r2, s15
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009cb2:	e008      	b.n	8009cc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	609a      	str	r2, [r3, #8]
}
 8009cc6:	bf00      	nop
 8009cc8:	3724      	adds	r7, #36	; 0x24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	58024400 	.word	0x58024400
 8009cd8:	03d09000 	.word	0x03d09000
 8009cdc:	46000000 	.word	0x46000000
 8009ce0:	4c742400 	.word	0x4c742400
 8009ce4:	4a742400 	.word	0x4a742400
 8009ce8:	4af42400 	.word	0x4af42400

08009cec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b089      	sub	sp, #36	; 0x24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009cf4:	4ba1      	ldr	r3, [pc, #644]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf8:	f003 0303 	and.w	r3, r3, #3
 8009cfc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009cfe:	4b9f      	ldr	r3, [pc, #636]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d02:	0d1b      	lsrs	r3, r3, #20
 8009d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009d0a:	4b9c      	ldr	r3, [pc, #624]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d0e:	0a1b      	lsrs	r3, r3, #8
 8009d10:	f003 0301 	and.w	r3, r3, #1
 8009d14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009d16:	4b99      	ldr	r3, [pc, #612]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d1a:	08db      	lsrs	r3, r3, #3
 8009d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	fb02 f303 	mul.w	r3, r2, r3
 8009d26:	ee07 3a90 	vmov	s15, r3
 8009d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	f000 8111 	beq.w	8009f5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	f000 8083 	beq.w	8009e48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	f200 80a1 	bhi.w	8009e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d003      	beq.n	8009d58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009d50:	69bb      	ldr	r3, [r7, #24]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d056      	beq.n	8009e04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009d56:	e099      	b.n	8009e8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d58:	4b88      	ldr	r3, [pc, #544]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f003 0320 	and.w	r3, r3, #32
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d02d      	beq.n	8009dc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d64:	4b85      	ldr	r3, [pc, #532]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	08db      	lsrs	r3, r3, #3
 8009d6a:	f003 0303 	and.w	r3, r3, #3
 8009d6e:	4a84      	ldr	r2, [pc, #528]	; (8009f80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009d70:	fa22 f303 	lsr.w	r3, r2, r3
 8009d74:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	ee07 3a90 	vmov	s15, r3
 8009d7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	ee07 3a90 	vmov	s15, r3
 8009d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d8e:	4b7b      	ldr	r3, [pc, #492]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009da2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009dbe:	e087      	b.n	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	ee07 3a90 	vmov	s15, r3
 8009dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009f88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009dce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dd2:	4b6a      	ldr	r3, [pc, #424]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dda:	ee07 3a90 	vmov	s15, r3
 8009dde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009de2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009de6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009dea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009df2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009df6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e02:	e065      	b.n	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	ee07 3a90 	vmov	s15, r3
 8009e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e16:	4b59      	ldr	r3, [pc, #356]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e1e:	ee07 3a90 	vmov	s15, r3
 8009e22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e26:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e2a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e46:	e043      	b.n	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	ee07 3a90 	vmov	s15, r3
 8009e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e52:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009f90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e5a:	4b48      	ldr	r3, [pc, #288]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e62:	ee07 3a90 	vmov	s15, r3
 8009e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e6e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e8a:	e021      	b.n	8009ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	ee07 3a90 	vmov	s15, r3
 8009e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e96:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009f8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e9e:	4b37      	ldr	r3, [pc, #220]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea6:	ee07 3a90 	vmov	s15, r3
 8009eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8009eb2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009f84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ece:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009ed0:	4b2a      	ldr	r3, [pc, #168]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed4:	0a5b      	lsrs	r3, r3, #9
 8009ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009eda:	ee07 3a90 	vmov	s15, r3
 8009ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ee6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eea:	edd7 6a07 	vldr	s13, [r7, #28]
 8009eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ef2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ef6:	ee17 2a90 	vmov	r2, s15
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009efe:	4b1f      	ldr	r3, [pc, #124]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f02:	0c1b      	lsrs	r3, r3, #16
 8009f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f08:	ee07 3a90 	vmov	s15, r3
 8009f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f24:	ee17 2a90 	vmov	r2, s15
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009f2c:	4b13      	ldr	r3, [pc, #76]	; (8009f7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f30:	0e1b      	lsrs	r3, r3, #24
 8009f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f36:	ee07 3a90 	vmov	s15, r3
 8009f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f52:	ee17 2a90 	vmov	r2, s15
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009f5a:	e008      	b.n	8009f6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	609a      	str	r2, [r3, #8]
}
 8009f6e:	bf00      	nop
 8009f70:	3724      	adds	r7, #36	; 0x24
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	58024400 	.word	0x58024400
 8009f80:	03d09000 	.word	0x03d09000
 8009f84:	46000000 	.word	0x46000000
 8009f88:	4c742400 	.word	0x4c742400
 8009f8c:	4a742400 	.word	0x4a742400
 8009f90:	4af42400 	.word	0x4af42400

08009f94 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b089      	sub	sp, #36	; 0x24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f9c:	4ba0      	ldr	r3, [pc, #640]	; (800a220 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa0:	f003 0303 	and.w	r3, r3, #3
 8009fa4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009fa6:	4b9e      	ldr	r3, [pc, #632]	; (800a220 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009faa:	091b      	lsrs	r3, r3, #4
 8009fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009fb0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009fb2:	4b9b      	ldr	r3, [pc, #620]	; (800a220 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb6:	f003 0301 	and.w	r3, r3, #1
 8009fba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009fbc:	4b98      	ldr	r3, [pc, #608]	; (800a220 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc0:	08db      	lsrs	r3, r3, #3
 8009fc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	fb02 f303 	mul.w	r3, r2, r3
 8009fcc:	ee07 3a90 	vmov	s15, r3
 8009fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fd4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	f000 8111 	beq.w	800a202 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009fe0:	69bb      	ldr	r3, [r7, #24]
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	f000 8083 	beq.w	800a0ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	f200 80a1 	bhi.w	800a132 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009ff0:	69bb      	ldr	r3, [r7, #24]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d003      	beq.n	8009ffe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d056      	beq.n	800a0aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009ffc:	e099      	b.n	800a132 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ffe:	4b88      	ldr	r3, [pc, #544]	; (800a220 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0320 	and.w	r3, r3, #32
 800a006:	2b00      	cmp	r3, #0
 800a008:	d02d      	beq.n	800a066 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a00a:	4b85      	ldr	r3, [pc, #532]	; (800a220 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	08db      	lsrs	r3, r3, #3
 800a010:	f003 0303 	and.w	r3, r3, #3
 800a014:	4a83      	ldr	r2, [pc, #524]	; (800a224 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a016:	fa22 f303 	lsr.w	r3, r2, r3
 800a01a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	ee07 3a90 	vmov	s15, r3
 800a022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a026:	697b      	ldr	r3, [r7, #20]
 800a028:	ee07 3a90 	vmov	s15, r3
 800a02c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a034:	4b7a      	ldr	r3, [pc, #488]	; (800a220 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a03c:	ee07 3a90 	vmov	s15, r3
 800a040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a044:	ed97 6a03 	vldr	s12, [r7, #12]
 800a048:	eddf 5a77 	vldr	s11, [pc, #476]	; 800a228 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a04c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a050:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a054:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a058:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a05c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a060:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a064:	e087      	b.n	800a176 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	ee07 3a90 	vmov	s15, r3
 800a06c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a070:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800a22c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a074:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a078:	4b69      	ldr	r3, [pc, #420]	; (800a220 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a07c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a080:	ee07 3a90 	vmov	s15, r3
 800a084:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a088:	ed97 6a03 	vldr	s12, [r7, #12]
 800a08c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800a228 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a090:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a094:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a098:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a09c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0a8:	e065      	b.n	800a176 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	ee07 3a90 	vmov	s15, r3
 800a0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800a230 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a0b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0bc:	4b58      	ldr	r3, [pc, #352]	; (800a220 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a0be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0c4:	ee07 3a90 	vmov	s15, r3
 800a0c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800a228 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a0d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a0e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0ec:	e043      	b.n	800a176 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	ee07 3a90 	vmov	s15, r3
 800a0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800a234 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a0fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a100:	4b47      	ldr	r3, [pc, #284]	; (800a220 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a108:	ee07 3a90 	vmov	s15, r3
 800a10c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a110:	ed97 6a03 	vldr	s12, [r7, #12]
 800a114:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a228 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a118:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a11c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a120:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a124:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a130:	e021      	b.n	800a176 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	ee07 3a90 	vmov	s15, r3
 800a138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a13c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a22c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a140:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a144:	4b36      	ldr	r3, [pc, #216]	; (800a220 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a14c:	ee07 3a90 	vmov	s15, r3
 800a150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a154:	ed97 6a03 	vldr	s12, [r7, #12]
 800a158:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a228 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a15c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a160:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a164:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a168:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a16c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a170:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a174:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a176:	4b2a      	ldr	r3, [pc, #168]	; (800a220 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a17a:	0a5b      	lsrs	r3, r3, #9
 800a17c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a180:	ee07 3a90 	vmov	s15, r3
 800a184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a188:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a18c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a190:	edd7 6a07 	vldr	s13, [r7, #28]
 800a194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a19c:	ee17 2a90 	vmov	r2, s15
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a1a4:	4b1e      	ldr	r3, [pc, #120]	; (800a220 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1a8:	0c1b      	lsrs	r3, r3, #16
 800a1aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1ae:	ee07 3a90 	vmov	s15, r3
 800a1b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1be:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1ca:	ee17 2a90 	vmov	r2, s15
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a1d2:	4b13      	ldr	r3, [pc, #76]	; (800a220 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1d6:	0e1b      	lsrs	r3, r3, #24
 800a1d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a1dc:	ee07 3a90 	vmov	s15, r3
 800a1e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a1e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a1ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800a1f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a1f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1f8:	ee17 2a90 	vmov	r2, s15
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a200:	e008      	b.n	800a214 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2200      	movs	r2, #0
 800a206:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2200      	movs	r2, #0
 800a212:	609a      	str	r2, [r3, #8]
}
 800a214:	bf00      	nop
 800a216:	3724      	adds	r7, #36	; 0x24
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr
 800a220:	58024400 	.word	0x58024400
 800a224:	03d09000 	.word	0x03d09000
 800a228:	46000000 	.word	0x46000000
 800a22c:	4c742400 	.word	0x4c742400
 800a230:	4a742400 	.word	0x4a742400
 800a234:	4af42400 	.word	0x4af42400

0800a238 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a246:	4b53      	ldr	r3, [pc, #332]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24a:	f003 0303 	and.w	r3, r3, #3
 800a24e:	2b03      	cmp	r3, #3
 800a250:	d101      	bne.n	800a256 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e099      	b.n	800a38a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a256:	4b4f      	ldr	r3, [pc, #316]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a4e      	ldr	r2, [pc, #312]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a25c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a260:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a262:	f7f7 fb8b 	bl	800197c <HAL_GetTick>
 800a266:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a268:	e008      	b.n	800a27c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a26a:	f7f7 fb87 	bl	800197c <HAL_GetTick>
 800a26e:	4602      	mov	r2, r0
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	2b02      	cmp	r3, #2
 800a276:	d901      	bls.n	800a27c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a278:	2303      	movs	r3, #3
 800a27a:	e086      	b.n	800a38a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a27c:	4b45      	ldr	r3, [pc, #276]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a284:	2b00      	cmp	r3, #0
 800a286:	d1f0      	bne.n	800a26a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a288:	4b42      	ldr	r3, [pc, #264]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a28c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	031b      	lsls	r3, r3, #12
 800a296:	493f      	ldr	r1, [pc, #252]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a298:	4313      	orrs	r3, r2
 800a29a:	628b      	str	r3, [r1, #40]	; 0x28
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	3b01      	subs	r3, #1
 800a2a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	3b01      	subs	r3, #1
 800a2ac:	025b      	lsls	r3, r3, #9
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	431a      	orrs	r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	041b      	lsls	r3, r3, #16
 800a2ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a2be:	431a      	orrs	r2, r3
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	3b01      	subs	r3, #1
 800a2c6:	061b      	lsls	r3, r3, #24
 800a2c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a2cc:	4931      	ldr	r1, [pc, #196]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a2d2:	4b30      	ldr	r3, [pc, #192]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	695b      	ldr	r3, [r3, #20]
 800a2de:	492d      	ldr	r1, [pc, #180]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a2e4:	4b2b      	ldr	r3, [pc, #172]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e8:	f023 0220 	bic.w	r2, r3, #32
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	4928      	ldr	r1, [pc, #160]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a2f6:	4b27      	ldr	r3, [pc, #156]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fa:	4a26      	ldr	r2, [pc, #152]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a2fc:	f023 0310 	bic.w	r3, r3, #16
 800a300:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a302:	4b24      	ldr	r3, [pc, #144]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a304:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a306:	4b24      	ldr	r3, [pc, #144]	; (800a398 <RCCEx_PLL2_Config+0x160>)
 800a308:	4013      	ands	r3, r2
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	69d2      	ldr	r2, [r2, #28]
 800a30e:	00d2      	lsls	r2, r2, #3
 800a310:	4920      	ldr	r1, [pc, #128]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a312:	4313      	orrs	r3, r2
 800a314:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a316:	4b1f      	ldr	r3, [pc, #124]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31a:	4a1e      	ldr	r2, [pc, #120]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a31c:	f043 0310 	orr.w	r3, r3, #16
 800a320:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d106      	bne.n	800a336 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a328:	4b1a      	ldr	r3, [pc, #104]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32c:	4a19      	ldr	r2, [pc, #100]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a32e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a332:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a334:	e00f      	b.n	800a356 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d106      	bne.n	800a34a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a33c:	4b15      	ldr	r3, [pc, #84]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a340:	4a14      	ldr	r2, [pc, #80]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a346:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a348:	e005      	b.n	800a356 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a34a:	4b12      	ldr	r3, [pc, #72]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34e:	4a11      	ldr	r2, [pc, #68]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a350:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a354:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a356:	4b0f      	ldr	r3, [pc, #60]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a0e      	ldr	r2, [pc, #56]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a35c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a360:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a362:	f7f7 fb0b 	bl	800197c <HAL_GetTick>
 800a366:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a368:	e008      	b.n	800a37c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a36a:	f7f7 fb07 	bl	800197c <HAL_GetTick>
 800a36e:	4602      	mov	r2, r0
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	1ad3      	subs	r3, r2, r3
 800a374:	2b02      	cmp	r3, #2
 800a376:	d901      	bls.n	800a37c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a378:	2303      	movs	r3, #3
 800a37a:	e006      	b.n	800a38a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a37c:	4b05      	ldr	r3, [pc, #20]	; (800a394 <RCCEx_PLL2_Config+0x15c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a384:	2b00      	cmp	r3, #0
 800a386:	d0f0      	beq.n	800a36a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a388:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	58024400 	.word	0x58024400
 800a398:	ffff0007 	.word	0xffff0007

0800a39c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a3aa:	4b53      	ldr	r3, [pc, #332]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ae:	f003 0303 	and.w	r3, r3, #3
 800a3b2:	2b03      	cmp	r3, #3
 800a3b4:	d101      	bne.n	800a3ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e099      	b.n	800a4ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a3ba:	4b4f      	ldr	r3, [pc, #316]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a4e      	ldr	r2, [pc, #312]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a3c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3c6:	f7f7 fad9 	bl	800197c <HAL_GetTick>
 800a3ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3cc:	e008      	b.n	800a3e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a3ce:	f7f7 fad5 	bl	800197c <HAL_GetTick>
 800a3d2:	4602      	mov	r2, r0
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d901      	bls.n	800a3e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a3dc:	2303      	movs	r3, #3
 800a3de:	e086      	b.n	800a4ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a3e0:	4b45      	ldr	r3, [pc, #276]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1f0      	bne.n	800a3ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a3ec:	4b42      	ldr	r3, [pc, #264]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	051b      	lsls	r3, r3, #20
 800a3fa:	493f      	ldr	r1, [pc, #252]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	628b      	str	r3, [r1, #40]	; 0x28
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	3b01      	subs	r3, #1
 800a406:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	3b01      	subs	r3, #1
 800a410:	025b      	lsls	r3, r3, #9
 800a412:	b29b      	uxth	r3, r3
 800a414:	431a      	orrs	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	3b01      	subs	r3, #1
 800a41c:	041b      	lsls	r3, r3, #16
 800a41e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a422:	431a      	orrs	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	3b01      	subs	r3, #1
 800a42a:	061b      	lsls	r3, r3, #24
 800a42c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a430:	4931      	ldr	r1, [pc, #196]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a432:	4313      	orrs	r3, r2
 800a434:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a436:	4b30      	ldr	r3, [pc, #192]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a43a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	695b      	ldr	r3, [r3, #20]
 800a442:	492d      	ldr	r1, [pc, #180]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a444:	4313      	orrs	r3, r2
 800a446:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a448:	4b2b      	ldr	r3, [pc, #172]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	4928      	ldr	r1, [pc, #160]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a456:	4313      	orrs	r3, r2
 800a458:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a45a:	4b27      	ldr	r3, [pc, #156]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45e:	4a26      	ldr	r2, [pc, #152]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a464:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a466:	4b24      	ldr	r3, [pc, #144]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a46a:	4b24      	ldr	r3, [pc, #144]	; (800a4fc <RCCEx_PLL3_Config+0x160>)
 800a46c:	4013      	ands	r3, r2
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	69d2      	ldr	r2, [r2, #28]
 800a472:	00d2      	lsls	r2, r2, #3
 800a474:	4920      	ldr	r1, [pc, #128]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a476:	4313      	orrs	r3, r2
 800a478:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a47a:	4b1f      	ldr	r3, [pc, #124]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47e:	4a1e      	ldr	r2, [pc, #120]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a484:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d106      	bne.n	800a49a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a48c:	4b1a      	ldr	r3, [pc, #104]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a48e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a490:	4a19      	ldr	r2, [pc, #100]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a492:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a496:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a498:	e00f      	b.n	800a4ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d106      	bne.n	800a4ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a4a0:	4b15      	ldr	r3, [pc, #84]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4a4:	4a14      	ldr	r2, [pc, #80]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a4a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a4aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a4ac:	e005      	b.n	800a4ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a4ae:	4b12      	ldr	r3, [pc, #72]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b2:	4a11      	ldr	r2, [pc, #68]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a4b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a4b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a4ba:	4b0f      	ldr	r3, [pc, #60]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a0e      	ldr	r2, [pc, #56]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a4c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4c6:	f7f7 fa59 	bl	800197c <HAL_GetTick>
 800a4ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4cc:	e008      	b.n	800a4e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a4ce:	f7f7 fa55 	bl	800197c <HAL_GetTick>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	2b02      	cmp	r3, #2
 800a4da:	d901      	bls.n	800a4e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	e006      	b.n	800a4ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a4e0:	4b05      	ldr	r3, [pc, #20]	; (800a4f8 <RCCEx_PLL3_Config+0x15c>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d0f0      	beq.n	800a4ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	58024400 	.word	0x58024400
 800a4fc:	ffff0007 	.word	0xffff0007

0800a500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d101      	bne.n	800a512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a50e:	2301      	movs	r3, #1
 800a510:	e042      	b.n	800a598 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d106      	bne.n	800a52a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7f6 ffcf 	bl	80014c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2224      	movs	r2, #36	; 0x24
 800a52e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	681a      	ldr	r2, [r3, #0]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f022 0201 	bic.w	r2, r2, #1
 800a540:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a546:	2b00      	cmp	r3, #0
 800a548:	d002      	beq.n	800a550 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 ff80 	bl	800b450 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a550:	6878      	ldr	r0, [r7, #4]
 800a552:	f000 f911 	bl	800a778 <UART_SetConfig>
 800a556:	4603      	mov	r3, r0
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d101      	bne.n	800a560 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	e01b      	b.n	800a598 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	685a      	ldr	r2, [r3, #4]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a56e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	689a      	ldr	r2, [r3, #8]
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a57e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f042 0201 	orr.w	r2, r2, #1
 800a58e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 ffff 	bl	800b594 <UART_CheckIdleState>
 800a596:	4603      	mov	r3, r0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b091      	sub	sp, #68	; 0x44
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	60b9      	str	r1, [r7, #8]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5b4:	2b20      	cmp	r3, #32
 800a5b6:	d178      	bne.n	800a6aa <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <HAL_UART_Transmit_IT+0x24>
 800a5be:	88fb      	ldrh	r3, [r7, #6]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d101      	bne.n	800a5c8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e071      	b.n	800a6ac <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	68ba      	ldr	r2, [r7, #8]
 800a5cc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	88fa      	ldrh	r2, [r7, #6]
 800a5d2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	88fa      	ldrh	r2, [r7, #6]
 800a5da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2221      	movs	r2, #33	; 0x21
 800a5f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5fc:	d12a      	bne.n	800a654 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a606:	d107      	bne.n	800a618 <HAL_UART_Transmit_IT+0x78>
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d103      	bne.n	800a618 <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4a29      	ldr	r2, [pc, #164]	; (800a6b8 <HAL_UART_Transmit_IT+0x118>)
 800a614:	679a      	str	r2, [r3, #120]	; 0x78
 800a616:	e002      	b.n	800a61e <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	4a28      	ldr	r2, [pc, #160]	; (800a6bc <HAL_UART_Transmit_IT+0x11c>)
 800a61c:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	3308      	adds	r3, #8
 800a624:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a628:	e853 3f00 	ldrex	r3, [r3]
 800a62c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a630:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a634:	63bb      	str	r3, [r7, #56]	; 0x38
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	3308      	adds	r3, #8
 800a63c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a63e:	637a      	str	r2, [r7, #52]	; 0x34
 800a640:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a642:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a646:	e841 2300 	strex	r3, r2, [r1]
 800a64a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a64c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1e5      	bne.n	800a61e <HAL_UART_Transmit_IT+0x7e>
 800a652:	e028      	b.n	800a6a6 <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a65c:	d107      	bne.n	800a66e <HAL_UART_Transmit_IT+0xce>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d103      	bne.n	800a66e <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	4a15      	ldr	r2, [pc, #84]	; (800a6c0 <HAL_UART_Transmit_IT+0x120>)
 800a66a:	679a      	str	r2, [r3, #120]	; 0x78
 800a66c:	e002      	b.n	800a674 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	4a14      	ldr	r2, [pc, #80]	; (800a6c4 <HAL_UART_Transmit_IT+0x124>)
 800a672:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	613b      	str	r3, [r7, #16]
   return(result);
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a692:	623b      	str	r3, [r7, #32]
 800a694:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	69f9      	ldr	r1, [r7, #28]
 800a698:	6a3a      	ldr	r2, [r7, #32]
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e6      	bne.n	800a674 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	e000      	b.n	800a6ac <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800a6aa:	2302      	movs	r3, #2
  }
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3744      	adds	r7, #68	; 0x44
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	0800bd2f 	.word	0x0800bd2f
 800a6bc:	0800bc4f 	.word	0x0800bc4f
 800a6c0:	0800bb8d 	.word	0x0800bb8d
 800a6c4:	0800bad5 	.word	0x0800bad5

0800a6c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b08a      	sub	sp, #40	; 0x28
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	60f8      	str	r0, [r7, #12]
 800a6d0:	60b9      	str	r1, [r7, #8]
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6dc:	2b20      	cmp	r3, #32
 800a6de:	d137      	bne.n	800a750 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d002      	beq.n	800a6ec <HAL_UART_Receive_IT+0x24>
 800a6e6:	88fb      	ldrh	r3, [r7, #6]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d101      	bne.n	800a6f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	e030      	b.n	800a752 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a18      	ldr	r2, [pc, #96]	; (800a75c <HAL_UART_Receive_IT+0x94>)
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d01f      	beq.n	800a740 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d018      	beq.n	800a740 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	e853 3f00 	ldrex	r3, [r3]
 800a71a:	613b      	str	r3, [r7, #16]
   return(result);
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a722:	627b      	str	r3, [r7, #36]	; 0x24
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	461a      	mov	r2, r3
 800a72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72c:	623b      	str	r3, [r7, #32]
 800a72e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a730:	69f9      	ldr	r1, [r7, #28]
 800a732:	6a3a      	ldr	r2, [r7, #32]
 800a734:	e841 2300 	strex	r3, r2, [r1]
 800a738:	61bb      	str	r3, [r7, #24]
   return(result);
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1e6      	bne.n	800a70e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a740:	88fb      	ldrh	r3, [r7, #6]
 800a742:	461a      	mov	r2, r3
 800a744:	68b9      	ldr	r1, [r7, #8]
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f001 f83c 	bl	800b7c4 <UART_Start_Receive_IT>
 800a74c:	4603      	mov	r3, r0
 800a74e:	e000      	b.n	800a752 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a750:	2302      	movs	r3, #2
  }
}
 800a752:	4618      	mov	r0, r3
 800a754:	3728      	adds	r7, #40	; 0x28
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	58000c00 	.word	0x58000c00

0800a760 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	460b      	mov	r3, r1
 800a76a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a76c:	bf00      	nop
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a776:	4770      	bx	lr

0800a778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a77c:	b092      	sub	sp, #72	; 0x48
 800a77e:	af00      	add	r7, sp, #0
 800a780:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a782:	2300      	movs	r3, #0
 800a784:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	689a      	ldr	r2, [r3, #8]
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	691b      	ldr	r3, [r3, #16]
 800a790:	431a      	orrs	r2, r3
 800a792:	697b      	ldr	r3, [r7, #20]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	431a      	orrs	r2, r3
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	69db      	ldr	r3, [r3, #28]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	4bbe      	ldr	r3, [pc, #760]	; (800aaa0 <UART_SetConfig+0x328>)
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	6812      	ldr	r2, [r2, #0]
 800a7ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a7b0:	430b      	orrs	r3, r1
 800a7b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	68da      	ldr	r2, [r3, #12]
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	430a      	orrs	r2, r1
 800a7c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	699b      	ldr	r3, [r3, #24]
 800a7ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	4ab3      	ldr	r2, [pc, #716]	; (800aaa4 <UART_SetConfig+0x32c>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d004      	beq.n	800a7e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7e0:	4313      	orrs	r3, r2
 800a7e2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	689a      	ldr	r2, [r3, #8]
 800a7ea:	4baf      	ldr	r3, [pc, #700]	; (800aaa8 <UART_SetConfig+0x330>)
 800a7ec:	4013      	ands	r3, r2
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	6812      	ldr	r2, [r2, #0]
 800a7f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a7f4:	430b      	orrs	r3, r1
 800a7f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fe:	f023 010f 	bic.w	r1, r3, #15
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	430a      	orrs	r2, r1
 800a80c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4aa6      	ldr	r2, [pc, #664]	; (800aaac <UART_SetConfig+0x334>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d177      	bne.n	800a908 <UART_SetConfig+0x190>
 800a818:	4ba5      	ldr	r3, [pc, #660]	; (800aab0 <UART_SetConfig+0x338>)
 800a81a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a81c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a820:	2b28      	cmp	r3, #40	; 0x28
 800a822:	d86d      	bhi.n	800a900 <UART_SetConfig+0x188>
 800a824:	a201      	add	r2, pc, #4	; (adr r2, 800a82c <UART_SetConfig+0xb4>)
 800a826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a82a:	bf00      	nop
 800a82c:	0800a8d1 	.word	0x0800a8d1
 800a830:	0800a901 	.word	0x0800a901
 800a834:	0800a901 	.word	0x0800a901
 800a838:	0800a901 	.word	0x0800a901
 800a83c:	0800a901 	.word	0x0800a901
 800a840:	0800a901 	.word	0x0800a901
 800a844:	0800a901 	.word	0x0800a901
 800a848:	0800a901 	.word	0x0800a901
 800a84c:	0800a8d9 	.word	0x0800a8d9
 800a850:	0800a901 	.word	0x0800a901
 800a854:	0800a901 	.word	0x0800a901
 800a858:	0800a901 	.word	0x0800a901
 800a85c:	0800a901 	.word	0x0800a901
 800a860:	0800a901 	.word	0x0800a901
 800a864:	0800a901 	.word	0x0800a901
 800a868:	0800a901 	.word	0x0800a901
 800a86c:	0800a8e1 	.word	0x0800a8e1
 800a870:	0800a901 	.word	0x0800a901
 800a874:	0800a901 	.word	0x0800a901
 800a878:	0800a901 	.word	0x0800a901
 800a87c:	0800a901 	.word	0x0800a901
 800a880:	0800a901 	.word	0x0800a901
 800a884:	0800a901 	.word	0x0800a901
 800a888:	0800a901 	.word	0x0800a901
 800a88c:	0800a8e9 	.word	0x0800a8e9
 800a890:	0800a901 	.word	0x0800a901
 800a894:	0800a901 	.word	0x0800a901
 800a898:	0800a901 	.word	0x0800a901
 800a89c:	0800a901 	.word	0x0800a901
 800a8a0:	0800a901 	.word	0x0800a901
 800a8a4:	0800a901 	.word	0x0800a901
 800a8a8:	0800a901 	.word	0x0800a901
 800a8ac:	0800a8f1 	.word	0x0800a8f1
 800a8b0:	0800a901 	.word	0x0800a901
 800a8b4:	0800a901 	.word	0x0800a901
 800a8b8:	0800a901 	.word	0x0800a901
 800a8bc:	0800a901 	.word	0x0800a901
 800a8c0:	0800a901 	.word	0x0800a901
 800a8c4:	0800a901 	.word	0x0800a901
 800a8c8:	0800a901 	.word	0x0800a901
 800a8cc:	0800a8f9 	.word	0x0800a8f9
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8d6:	e326      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a8d8:	2304      	movs	r3, #4
 800a8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8de:	e322      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a8e0:	2308      	movs	r3, #8
 800a8e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8e6:	e31e      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a8e8:	2310      	movs	r3, #16
 800a8ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8ee:	e31a      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a8f0:	2320      	movs	r3, #32
 800a8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8f6:	e316      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a8f8:	2340      	movs	r3, #64	; 0x40
 800a8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a8fe:	e312      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a900:	2380      	movs	r3, #128	; 0x80
 800a902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a906:	e30e      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a69      	ldr	r2, [pc, #420]	; (800aab4 <UART_SetConfig+0x33c>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d130      	bne.n	800a974 <UART_SetConfig+0x1fc>
 800a912:	4b67      	ldr	r3, [pc, #412]	; (800aab0 <UART_SetConfig+0x338>)
 800a914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a916:	f003 0307 	and.w	r3, r3, #7
 800a91a:	2b05      	cmp	r3, #5
 800a91c:	d826      	bhi.n	800a96c <UART_SetConfig+0x1f4>
 800a91e:	a201      	add	r2, pc, #4	; (adr r2, 800a924 <UART_SetConfig+0x1ac>)
 800a920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a924:	0800a93d 	.word	0x0800a93d
 800a928:	0800a945 	.word	0x0800a945
 800a92c:	0800a94d 	.word	0x0800a94d
 800a930:	0800a955 	.word	0x0800a955
 800a934:	0800a95d 	.word	0x0800a95d
 800a938:	0800a965 	.word	0x0800a965
 800a93c:	2300      	movs	r3, #0
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a942:	e2f0      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a944:	2304      	movs	r3, #4
 800a946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a94a:	e2ec      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a94c:	2308      	movs	r3, #8
 800a94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a952:	e2e8      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a954:	2310      	movs	r3, #16
 800a956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a95a:	e2e4      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a95c:	2320      	movs	r3, #32
 800a95e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a962:	e2e0      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a964:	2340      	movs	r3, #64	; 0x40
 800a966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a96a:	e2dc      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a96c:	2380      	movs	r3, #128	; 0x80
 800a96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a972:	e2d8      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a4f      	ldr	r2, [pc, #316]	; (800aab8 <UART_SetConfig+0x340>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d130      	bne.n	800a9e0 <UART_SetConfig+0x268>
 800a97e:	4b4c      	ldr	r3, [pc, #304]	; (800aab0 <UART_SetConfig+0x338>)
 800a980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a982:	f003 0307 	and.w	r3, r3, #7
 800a986:	2b05      	cmp	r3, #5
 800a988:	d826      	bhi.n	800a9d8 <UART_SetConfig+0x260>
 800a98a:	a201      	add	r2, pc, #4	; (adr r2, 800a990 <UART_SetConfig+0x218>)
 800a98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a990:	0800a9a9 	.word	0x0800a9a9
 800a994:	0800a9b1 	.word	0x0800a9b1
 800a998:	0800a9b9 	.word	0x0800a9b9
 800a99c:	0800a9c1 	.word	0x0800a9c1
 800a9a0:	0800a9c9 	.word	0x0800a9c9
 800a9a4:	0800a9d1 	.word	0x0800a9d1
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ae:	e2ba      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a9b0:	2304      	movs	r3, #4
 800a9b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9b6:	e2b6      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a9b8:	2308      	movs	r3, #8
 800a9ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9be:	e2b2      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a9c0:	2310      	movs	r3, #16
 800a9c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9c6:	e2ae      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a9c8:	2320      	movs	r3, #32
 800a9ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9ce:	e2aa      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a9d0:	2340      	movs	r3, #64	; 0x40
 800a9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9d6:	e2a6      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a9d8:	2380      	movs	r3, #128	; 0x80
 800a9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a9de:	e2a2      	b.n	800af26 <UART_SetConfig+0x7ae>
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a35      	ldr	r2, [pc, #212]	; (800aabc <UART_SetConfig+0x344>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d130      	bne.n	800aa4c <UART_SetConfig+0x2d4>
 800a9ea:	4b31      	ldr	r3, [pc, #196]	; (800aab0 <UART_SetConfig+0x338>)
 800a9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ee:	f003 0307 	and.w	r3, r3, #7
 800a9f2:	2b05      	cmp	r3, #5
 800a9f4:	d826      	bhi.n	800aa44 <UART_SetConfig+0x2cc>
 800a9f6:	a201      	add	r2, pc, #4	; (adr r2, 800a9fc <UART_SetConfig+0x284>)
 800a9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9fc:	0800aa15 	.word	0x0800aa15
 800aa00:	0800aa1d 	.word	0x0800aa1d
 800aa04:	0800aa25 	.word	0x0800aa25
 800aa08:	0800aa2d 	.word	0x0800aa2d
 800aa0c:	0800aa35 	.word	0x0800aa35
 800aa10:	0800aa3d 	.word	0x0800aa3d
 800aa14:	2300      	movs	r3, #0
 800aa16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa1a:	e284      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aa1c:	2304      	movs	r3, #4
 800aa1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa22:	e280      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aa24:	2308      	movs	r3, #8
 800aa26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa2a:	e27c      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aa2c:	2310      	movs	r3, #16
 800aa2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa32:	e278      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aa34:	2320      	movs	r3, #32
 800aa36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa3a:	e274      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aa3c:	2340      	movs	r3, #64	; 0x40
 800aa3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa42:	e270      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aa44:	2380      	movs	r3, #128	; 0x80
 800aa46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa4a:	e26c      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a1b      	ldr	r2, [pc, #108]	; (800aac0 <UART_SetConfig+0x348>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d142      	bne.n	800aadc <UART_SetConfig+0x364>
 800aa56:	4b16      	ldr	r3, [pc, #88]	; (800aab0 <UART_SetConfig+0x338>)
 800aa58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa5a:	f003 0307 	and.w	r3, r3, #7
 800aa5e:	2b05      	cmp	r3, #5
 800aa60:	d838      	bhi.n	800aad4 <UART_SetConfig+0x35c>
 800aa62:	a201      	add	r2, pc, #4	; (adr r2, 800aa68 <UART_SetConfig+0x2f0>)
 800aa64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa68:	0800aa81 	.word	0x0800aa81
 800aa6c:	0800aa89 	.word	0x0800aa89
 800aa70:	0800aa91 	.word	0x0800aa91
 800aa74:	0800aa99 	.word	0x0800aa99
 800aa78:	0800aac5 	.word	0x0800aac5
 800aa7c:	0800aacd 	.word	0x0800aacd
 800aa80:	2300      	movs	r3, #0
 800aa82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa86:	e24e      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aa88:	2304      	movs	r3, #4
 800aa8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa8e:	e24a      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aa90:	2308      	movs	r3, #8
 800aa92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa96:	e246      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aa98:	2310      	movs	r3, #16
 800aa9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aa9e:	e242      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aaa0:	cfff69f3 	.word	0xcfff69f3
 800aaa4:	58000c00 	.word	0x58000c00
 800aaa8:	11fff4ff 	.word	0x11fff4ff
 800aaac:	40011000 	.word	0x40011000
 800aab0:	58024400 	.word	0x58024400
 800aab4:	40004400 	.word	0x40004400
 800aab8:	40004800 	.word	0x40004800
 800aabc:	40004c00 	.word	0x40004c00
 800aac0:	40005000 	.word	0x40005000
 800aac4:	2320      	movs	r3, #32
 800aac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aaca:	e22c      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aacc:	2340      	movs	r3, #64	; 0x40
 800aace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aad2:	e228      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aad4:	2380      	movs	r3, #128	; 0x80
 800aad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aada:	e224      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4ab1      	ldr	r2, [pc, #708]	; (800ada8 <UART_SetConfig+0x630>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d176      	bne.n	800abd4 <UART_SetConfig+0x45c>
 800aae6:	4bb1      	ldr	r3, [pc, #708]	; (800adac <UART_SetConfig+0x634>)
 800aae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aaee:	2b28      	cmp	r3, #40	; 0x28
 800aaf0:	d86c      	bhi.n	800abcc <UART_SetConfig+0x454>
 800aaf2:	a201      	add	r2, pc, #4	; (adr r2, 800aaf8 <UART_SetConfig+0x380>)
 800aaf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaf8:	0800ab9d 	.word	0x0800ab9d
 800aafc:	0800abcd 	.word	0x0800abcd
 800ab00:	0800abcd 	.word	0x0800abcd
 800ab04:	0800abcd 	.word	0x0800abcd
 800ab08:	0800abcd 	.word	0x0800abcd
 800ab0c:	0800abcd 	.word	0x0800abcd
 800ab10:	0800abcd 	.word	0x0800abcd
 800ab14:	0800abcd 	.word	0x0800abcd
 800ab18:	0800aba5 	.word	0x0800aba5
 800ab1c:	0800abcd 	.word	0x0800abcd
 800ab20:	0800abcd 	.word	0x0800abcd
 800ab24:	0800abcd 	.word	0x0800abcd
 800ab28:	0800abcd 	.word	0x0800abcd
 800ab2c:	0800abcd 	.word	0x0800abcd
 800ab30:	0800abcd 	.word	0x0800abcd
 800ab34:	0800abcd 	.word	0x0800abcd
 800ab38:	0800abad 	.word	0x0800abad
 800ab3c:	0800abcd 	.word	0x0800abcd
 800ab40:	0800abcd 	.word	0x0800abcd
 800ab44:	0800abcd 	.word	0x0800abcd
 800ab48:	0800abcd 	.word	0x0800abcd
 800ab4c:	0800abcd 	.word	0x0800abcd
 800ab50:	0800abcd 	.word	0x0800abcd
 800ab54:	0800abcd 	.word	0x0800abcd
 800ab58:	0800abb5 	.word	0x0800abb5
 800ab5c:	0800abcd 	.word	0x0800abcd
 800ab60:	0800abcd 	.word	0x0800abcd
 800ab64:	0800abcd 	.word	0x0800abcd
 800ab68:	0800abcd 	.word	0x0800abcd
 800ab6c:	0800abcd 	.word	0x0800abcd
 800ab70:	0800abcd 	.word	0x0800abcd
 800ab74:	0800abcd 	.word	0x0800abcd
 800ab78:	0800abbd 	.word	0x0800abbd
 800ab7c:	0800abcd 	.word	0x0800abcd
 800ab80:	0800abcd 	.word	0x0800abcd
 800ab84:	0800abcd 	.word	0x0800abcd
 800ab88:	0800abcd 	.word	0x0800abcd
 800ab8c:	0800abcd 	.word	0x0800abcd
 800ab90:	0800abcd 	.word	0x0800abcd
 800ab94:	0800abcd 	.word	0x0800abcd
 800ab98:	0800abc5 	.word	0x0800abc5
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aba2:	e1c0      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aba4:	2304      	movs	r3, #4
 800aba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abaa:	e1bc      	b.n	800af26 <UART_SetConfig+0x7ae>
 800abac:	2308      	movs	r3, #8
 800abae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abb2:	e1b8      	b.n	800af26 <UART_SetConfig+0x7ae>
 800abb4:	2310      	movs	r3, #16
 800abb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abba:	e1b4      	b.n	800af26 <UART_SetConfig+0x7ae>
 800abbc:	2320      	movs	r3, #32
 800abbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abc2:	e1b0      	b.n	800af26 <UART_SetConfig+0x7ae>
 800abc4:	2340      	movs	r3, #64	; 0x40
 800abc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abca:	e1ac      	b.n	800af26 <UART_SetConfig+0x7ae>
 800abcc:	2380      	movs	r3, #128	; 0x80
 800abce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800abd2:	e1a8      	b.n	800af26 <UART_SetConfig+0x7ae>
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a75      	ldr	r2, [pc, #468]	; (800adb0 <UART_SetConfig+0x638>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d130      	bne.n	800ac40 <UART_SetConfig+0x4c8>
 800abde:	4b73      	ldr	r3, [pc, #460]	; (800adac <UART_SetConfig+0x634>)
 800abe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abe2:	f003 0307 	and.w	r3, r3, #7
 800abe6:	2b05      	cmp	r3, #5
 800abe8:	d826      	bhi.n	800ac38 <UART_SetConfig+0x4c0>
 800abea:	a201      	add	r2, pc, #4	; (adr r2, 800abf0 <UART_SetConfig+0x478>)
 800abec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf0:	0800ac09 	.word	0x0800ac09
 800abf4:	0800ac11 	.word	0x0800ac11
 800abf8:	0800ac19 	.word	0x0800ac19
 800abfc:	0800ac21 	.word	0x0800ac21
 800ac00:	0800ac29 	.word	0x0800ac29
 800ac04:	0800ac31 	.word	0x0800ac31
 800ac08:	2300      	movs	r3, #0
 800ac0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac0e:	e18a      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ac10:	2304      	movs	r3, #4
 800ac12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac16:	e186      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ac18:	2308      	movs	r3, #8
 800ac1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac1e:	e182      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ac20:	2310      	movs	r3, #16
 800ac22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac26:	e17e      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ac28:	2320      	movs	r3, #32
 800ac2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac2e:	e17a      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ac30:	2340      	movs	r3, #64	; 0x40
 800ac32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac36:	e176      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ac38:	2380      	movs	r3, #128	; 0x80
 800ac3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac3e:	e172      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a5b      	ldr	r2, [pc, #364]	; (800adb4 <UART_SetConfig+0x63c>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d130      	bne.n	800acac <UART_SetConfig+0x534>
 800ac4a:	4b58      	ldr	r3, [pc, #352]	; (800adac <UART_SetConfig+0x634>)
 800ac4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac4e:	f003 0307 	and.w	r3, r3, #7
 800ac52:	2b05      	cmp	r3, #5
 800ac54:	d826      	bhi.n	800aca4 <UART_SetConfig+0x52c>
 800ac56:	a201      	add	r2, pc, #4	; (adr r2, 800ac5c <UART_SetConfig+0x4e4>)
 800ac58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac5c:	0800ac75 	.word	0x0800ac75
 800ac60:	0800ac7d 	.word	0x0800ac7d
 800ac64:	0800ac85 	.word	0x0800ac85
 800ac68:	0800ac8d 	.word	0x0800ac8d
 800ac6c:	0800ac95 	.word	0x0800ac95
 800ac70:	0800ac9d 	.word	0x0800ac9d
 800ac74:	2300      	movs	r3, #0
 800ac76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac7a:	e154      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ac7c:	2304      	movs	r3, #4
 800ac7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac82:	e150      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ac84:	2308      	movs	r3, #8
 800ac86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac8a:	e14c      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ac8c:	2310      	movs	r3, #16
 800ac8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac92:	e148      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ac94:	2320      	movs	r3, #32
 800ac96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ac9a:	e144      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ac9c:	2340      	movs	r3, #64	; 0x40
 800ac9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aca2:	e140      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aca4:	2380      	movs	r3, #128	; 0x80
 800aca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acaa:	e13c      	b.n	800af26 <UART_SetConfig+0x7ae>
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	4a41      	ldr	r2, [pc, #260]	; (800adb8 <UART_SetConfig+0x640>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	f040 8082 	bne.w	800adbc <UART_SetConfig+0x644>
 800acb8:	4b3c      	ldr	r3, [pc, #240]	; (800adac <UART_SetConfig+0x634>)
 800acba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acc0:	2b28      	cmp	r3, #40	; 0x28
 800acc2:	d86d      	bhi.n	800ada0 <UART_SetConfig+0x628>
 800acc4:	a201      	add	r2, pc, #4	; (adr r2, 800accc <UART_SetConfig+0x554>)
 800acc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acca:	bf00      	nop
 800accc:	0800ad71 	.word	0x0800ad71
 800acd0:	0800ada1 	.word	0x0800ada1
 800acd4:	0800ada1 	.word	0x0800ada1
 800acd8:	0800ada1 	.word	0x0800ada1
 800acdc:	0800ada1 	.word	0x0800ada1
 800ace0:	0800ada1 	.word	0x0800ada1
 800ace4:	0800ada1 	.word	0x0800ada1
 800ace8:	0800ada1 	.word	0x0800ada1
 800acec:	0800ad79 	.word	0x0800ad79
 800acf0:	0800ada1 	.word	0x0800ada1
 800acf4:	0800ada1 	.word	0x0800ada1
 800acf8:	0800ada1 	.word	0x0800ada1
 800acfc:	0800ada1 	.word	0x0800ada1
 800ad00:	0800ada1 	.word	0x0800ada1
 800ad04:	0800ada1 	.word	0x0800ada1
 800ad08:	0800ada1 	.word	0x0800ada1
 800ad0c:	0800ad81 	.word	0x0800ad81
 800ad10:	0800ada1 	.word	0x0800ada1
 800ad14:	0800ada1 	.word	0x0800ada1
 800ad18:	0800ada1 	.word	0x0800ada1
 800ad1c:	0800ada1 	.word	0x0800ada1
 800ad20:	0800ada1 	.word	0x0800ada1
 800ad24:	0800ada1 	.word	0x0800ada1
 800ad28:	0800ada1 	.word	0x0800ada1
 800ad2c:	0800ad89 	.word	0x0800ad89
 800ad30:	0800ada1 	.word	0x0800ada1
 800ad34:	0800ada1 	.word	0x0800ada1
 800ad38:	0800ada1 	.word	0x0800ada1
 800ad3c:	0800ada1 	.word	0x0800ada1
 800ad40:	0800ada1 	.word	0x0800ada1
 800ad44:	0800ada1 	.word	0x0800ada1
 800ad48:	0800ada1 	.word	0x0800ada1
 800ad4c:	0800ad91 	.word	0x0800ad91
 800ad50:	0800ada1 	.word	0x0800ada1
 800ad54:	0800ada1 	.word	0x0800ada1
 800ad58:	0800ada1 	.word	0x0800ada1
 800ad5c:	0800ada1 	.word	0x0800ada1
 800ad60:	0800ada1 	.word	0x0800ada1
 800ad64:	0800ada1 	.word	0x0800ada1
 800ad68:	0800ada1 	.word	0x0800ada1
 800ad6c:	0800ad99 	.word	0x0800ad99
 800ad70:	2301      	movs	r3, #1
 800ad72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad76:	e0d6      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ad78:	2304      	movs	r3, #4
 800ad7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad7e:	e0d2      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ad80:	2308      	movs	r3, #8
 800ad82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad86:	e0ce      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ad88:	2310      	movs	r3, #16
 800ad8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad8e:	e0ca      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ad90:	2320      	movs	r3, #32
 800ad92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad96:	e0c6      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ad98:	2340      	movs	r3, #64	; 0x40
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad9e:	e0c2      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ada0:	2380      	movs	r3, #128	; 0x80
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ada6:	e0be      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ada8:	40011400 	.word	0x40011400
 800adac:	58024400 	.word	0x58024400
 800adb0:	40007800 	.word	0x40007800
 800adb4:	40007c00 	.word	0x40007c00
 800adb8:	40011800 	.word	0x40011800
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4aad      	ldr	r2, [pc, #692]	; (800b078 <UART_SetConfig+0x900>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d176      	bne.n	800aeb4 <UART_SetConfig+0x73c>
 800adc6:	4bad      	ldr	r3, [pc, #692]	; (800b07c <UART_SetConfig+0x904>)
 800adc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adce:	2b28      	cmp	r3, #40	; 0x28
 800add0:	d86c      	bhi.n	800aeac <UART_SetConfig+0x734>
 800add2:	a201      	add	r2, pc, #4	; (adr r2, 800add8 <UART_SetConfig+0x660>)
 800add4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add8:	0800ae7d 	.word	0x0800ae7d
 800addc:	0800aead 	.word	0x0800aead
 800ade0:	0800aead 	.word	0x0800aead
 800ade4:	0800aead 	.word	0x0800aead
 800ade8:	0800aead 	.word	0x0800aead
 800adec:	0800aead 	.word	0x0800aead
 800adf0:	0800aead 	.word	0x0800aead
 800adf4:	0800aead 	.word	0x0800aead
 800adf8:	0800ae85 	.word	0x0800ae85
 800adfc:	0800aead 	.word	0x0800aead
 800ae00:	0800aead 	.word	0x0800aead
 800ae04:	0800aead 	.word	0x0800aead
 800ae08:	0800aead 	.word	0x0800aead
 800ae0c:	0800aead 	.word	0x0800aead
 800ae10:	0800aead 	.word	0x0800aead
 800ae14:	0800aead 	.word	0x0800aead
 800ae18:	0800ae8d 	.word	0x0800ae8d
 800ae1c:	0800aead 	.word	0x0800aead
 800ae20:	0800aead 	.word	0x0800aead
 800ae24:	0800aead 	.word	0x0800aead
 800ae28:	0800aead 	.word	0x0800aead
 800ae2c:	0800aead 	.word	0x0800aead
 800ae30:	0800aead 	.word	0x0800aead
 800ae34:	0800aead 	.word	0x0800aead
 800ae38:	0800ae95 	.word	0x0800ae95
 800ae3c:	0800aead 	.word	0x0800aead
 800ae40:	0800aead 	.word	0x0800aead
 800ae44:	0800aead 	.word	0x0800aead
 800ae48:	0800aead 	.word	0x0800aead
 800ae4c:	0800aead 	.word	0x0800aead
 800ae50:	0800aead 	.word	0x0800aead
 800ae54:	0800aead 	.word	0x0800aead
 800ae58:	0800ae9d 	.word	0x0800ae9d
 800ae5c:	0800aead 	.word	0x0800aead
 800ae60:	0800aead 	.word	0x0800aead
 800ae64:	0800aead 	.word	0x0800aead
 800ae68:	0800aead 	.word	0x0800aead
 800ae6c:	0800aead 	.word	0x0800aead
 800ae70:	0800aead 	.word	0x0800aead
 800ae74:	0800aead 	.word	0x0800aead
 800ae78:	0800aea5 	.word	0x0800aea5
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae82:	e050      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ae84:	2304      	movs	r3, #4
 800ae86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae8a:	e04c      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ae8c:	2308      	movs	r3, #8
 800ae8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae92:	e048      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ae94:	2310      	movs	r3, #16
 800ae96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae9a:	e044      	b.n	800af26 <UART_SetConfig+0x7ae>
 800ae9c:	2320      	movs	r3, #32
 800ae9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aea2:	e040      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aea4:	2340      	movs	r3, #64	; 0x40
 800aea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeaa:	e03c      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aeac:	2380      	movs	r3, #128	; 0x80
 800aeae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeb2:	e038      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a71      	ldr	r2, [pc, #452]	; (800b080 <UART_SetConfig+0x908>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d130      	bne.n	800af20 <UART_SetConfig+0x7a8>
 800aebe:	4b6f      	ldr	r3, [pc, #444]	; (800b07c <UART_SetConfig+0x904>)
 800aec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aec2:	f003 0307 	and.w	r3, r3, #7
 800aec6:	2b05      	cmp	r3, #5
 800aec8:	d826      	bhi.n	800af18 <UART_SetConfig+0x7a0>
 800aeca:	a201      	add	r2, pc, #4	; (adr r2, 800aed0 <UART_SetConfig+0x758>)
 800aecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed0:	0800aee9 	.word	0x0800aee9
 800aed4:	0800aef1 	.word	0x0800aef1
 800aed8:	0800aef9 	.word	0x0800aef9
 800aedc:	0800af01 	.word	0x0800af01
 800aee0:	0800af09 	.word	0x0800af09
 800aee4:	0800af11 	.word	0x0800af11
 800aee8:	2302      	movs	r3, #2
 800aeea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeee:	e01a      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aef0:	2304      	movs	r3, #4
 800aef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aef6:	e016      	b.n	800af26 <UART_SetConfig+0x7ae>
 800aef8:	2308      	movs	r3, #8
 800aefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aefe:	e012      	b.n	800af26 <UART_SetConfig+0x7ae>
 800af00:	2310      	movs	r3, #16
 800af02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af06:	e00e      	b.n	800af26 <UART_SetConfig+0x7ae>
 800af08:	2320      	movs	r3, #32
 800af0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af0e:	e00a      	b.n	800af26 <UART_SetConfig+0x7ae>
 800af10:	2340      	movs	r3, #64	; 0x40
 800af12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af16:	e006      	b.n	800af26 <UART_SetConfig+0x7ae>
 800af18:	2380      	movs	r3, #128	; 0x80
 800af1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af1e:	e002      	b.n	800af26 <UART_SetConfig+0x7ae>
 800af20:	2380      	movs	r3, #128	; 0x80
 800af22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a55      	ldr	r2, [pc, #340]	; (800b080 <UART_SetConfig+0x908>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	f040 80f8 	bne.w	800b122 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800af32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800af36:	2b20      	cmp	r3, #32
 800af38:	dc46      	bgt.n	800afc8 <UART_SetConfig+0x850>
 800af3a:	2b02      	cmp	r3, #2
 800af3c:	db75      	blt.n	800b02a <UART_SetConfig+0x8b2>
 800af3e:	3b02      	subs	r3, #2
 800af40:	2b1e      	cmp	r3, #30
 800af42:	d872      	bhi.n	800b02a <UART_SetConfig+0x8b2>
 800af44:	a201      	add	r2, pc, #4	; (adr r2, 800af4c <UART_SetConfig+0x7d4>)
 800af46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af4a:	bf00      	nop
 800af4c:	0800afcf 	.word	0x0800afcf
 800af50:	0800b02b 	.word	0x0800b02b
 800af54:	0800afd7 	.word	0x0800afd7
 800af58:	0800b02b 	.word	0x0800b02b
 800af5c:	0800b02b 	.word	0x0800b02b
 800af60:	0800b02b 	.word	0x0800b02b
 800af64:	0800afe7 	.word	0x0800afe7
 800af68:	0800b02b 	.word	0x0800b02b
 800af6c:	0800b02b 	.word	0x0800b02b
 800af70:	0800b02b 	.word	0x0800b02b
 800af74:	0800b02b 	.word	0x0800b02b
 800af78:	0800b02b 	.word	0x0800b02b
 800af7c:	0800b02b 	.word	0x0800b02b
 800af80:	0800b02b 	.word	0x0800b02b
 800af84:	0800aff7 	.word	0x0800aff7
 800af88:	0800b02b 	.word	0x0800b02b
 800af8c:	0800b02b 	.word	0x0800b02b
 800af90:	0800b02b 	.word	0x0800b02b
 800af94:	0800b02b 	.word	0x0800b02b
 800af98:	0800b02b 	.word	0x0800b02b
 800af9c:	0800b02b 	.word	0x0800b02b
 800afa0:	0800b02b 	.word	0x0800b02b
 800afa4:	0800b02b 	.word	0x0800b02b
 800afa8:	0800b02b 	.word	0x0800b02b
 800afac:	0800b02b 	.word	0x0800b02b
 800afb0:	0800b02b 	.word	0x0800b02b
 800afb4:	0800b02b 	.word	0x0800b02b
 800afb8:	0800b02b 	.word	0x0800b02b
 800afbc:	0800b02b 	.word	0x0800b02b
 800afc0:	0800b02b 	.word	0x0800b02b
 800afc4:	0800b01d 	.word	0x0800b01d
 800afc8:	2b40      	cmp	r3, #64	; 0x40
 800afca:	d02a      	beq.n	800b022 <UART_SetConfig+0x8aa>
 800afcc:	e02d      	b.n	800b02a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800afce:	f7fe fd23 	bl	8009a18 <HAL_RCCEx_GetD3PCLK1Freq>
 800afd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800afd4:	e02f      	b.n	800b036 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fe fd32 	bl	8009a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800afe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afe4:	e027      	b.n	800b036 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afe6:	f107 0318 	add.w	r3, r7, #24
 800afea:	4618      	mov	r0, r3
 800afec:	f7fe fe7e 	bl	8009cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aff0:	69fb      	ldr	r3, [r7, #28]
 800aff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aff4:	e01f      	b.n	800b036 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aff6:	4b21      	ldr	r3, [pc, #132]	; (800b07c <UART_SetConfig+0x904>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f003 0320 	and.w	r3, r3, #32
 800affe:	2b00      	cmp	r3, #0
 800b000:	d009      	beq.n	800b016 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b002:	4b1e      	ldr	r3, [pc, #120]	; (800b07c <UART_SetConfig+0x904>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	08db      	lsrs	r3, r3, #3
 800b008:	f003 0303 	and.w	r3, r3, #3
 800b00c:	4a1d      	ldr	r2, [pc, #116]	; (800b084 <UART_SetConfig+0x90c>)
 800b00e:	fa22 f303 	lsr.w	r3, r2, r3
 800b012:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b014:	e00f      	b.n	800b036 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b016:	4b1b      	ldr	r3, [pc, #108]	; (800b084 <UART_SetConfig+0x90c>)
 800b018:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b01a:	e00c      	b.n	800b036 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b01c:	4b1a      	ldr	r3, [pc, #104]	; (800b088 <UART_SetConfig+0x910>)
 800b01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b020:	e009      	b.n	800b036 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b026:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b028:	e005      	b.n	800b036 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b02a:	2300      	movs	r3, #0
 800b02c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b034:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f000 81ee 	beq.w	800b41a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b042:	4a12      	ldr	r2, [pc, #72]	; (800b08c <UART_SetConfig+0x914>)
 800b044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b048:	461a      	mov	r2, r3
 800b04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b04c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b050:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	685a      	ldr	r2, [r3, #4]
 800b056:	4613      	mov	r3, r2
 800b058:	005b      	lsls	r3, r3, #1
 800b05a:	4413      	add	r3, r2
 800b05c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b05e:	429a      	cmp	r2, r3
 800b060:	d305      	bcc.n	800b06e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d910      	bls.n	800b090 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b074:	e1d1      	b.n	800b41a <UART_SetConfig+0xca2>
 800b076:	bf00      	nop
 800b078:	40011c00 	.word	0x40011c00
 800b07c:	58024400 	.word	0x58024400
 800b080:	58000c00 	.word	0x58000c00
 800b084:	03d09000 	.word	0x03d09000
 800b088:	003d0900 	.word	0x003d0900
 800b08c:	08012a88 	.word	0x08012a88
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b092:	2200      	movs	r2, #0
 800b094:	60bb      	str	r3, [r7, #8]
 800b096:	60fa      	str	r2, [r7, #12]
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b09c:	4ac0      	ldr	r2, [pc, #768]	; (800b3a0 <UART_SetConfig+0xc28>)
 800b09e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	603b      	str	r3, [r7, #0]
 800b0a8:	607a      	str	r2, [r7, #4]
 800b0aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b0b2:	f7f5 f987 	bl	80003c4 <__aeabi_uldivmod>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	4610      	mov	r0, r2
 800b0bc:	4619      	mov	r1, r3
 800b0be:	f04f 0200 	mov.w	r2, #0
 800b0c2:	f04f 0300 	mov.w	r3, #0
 800b0c6:	020b      	lsls	r3, r1, #8
 800b0c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b0cc:	0202      	lsls	r2, r0, #8
 800b0ce:	6979      	ldr	r1, [r7, #20]
 800b0d0:	6849      	ldr	r1, [r1, #4]
 800b0d2:	0849      	lsrs	r1, r1, #1
 800b0d4:	2000      	movs	r0, #0
 800b0d6:	460c      	mov	r4, r1
 800b0d8:	4605      	mov	r5, r0
 800b0da:	eb12 0804 	adds.w	r8, r2, r4
 800b0de:	eb43 0905 	adc.w	r9, r3, r5
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	469a      	mov	sl, r3
 800b0ea:	4693      	mov	fp, r2
 800b0ec:	4652      	mov	r2, sl
 800b0ee:	465b      	mov	r3, fp
 800b0f0:	4640      	mov	r0, r8
 800b0f2:	4649      	mov	r1, r9
 800b0f4:	f7f5 f966 	bl	80003c4 <__aeabi_uldivmod>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b106:	d308      	bcc.n	800b11a <UART_SetConfig+0x9a2>
 800b108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b10e:	d204      	bcs.n	800b11a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b116:	60da      	str	r2, [r3, #12]
 800b118:	e17f      	b.n	800b41a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b11a:	2301      	movs	r3, #1
 800b11c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b120:	e17b      	b.n	800b41a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	69db      	ldr	r3, [r3, #28]
 800b126:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b12a:	f040 80bd 	bne.w	800b2a8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b12e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b132:	2b20      	cmp	r3, #32
 800b134:	dc48      	bgt.n	800b1c8 <UART_SetConfig+0xa50>
 800b136:	2b00      	cmp	r3, #0
 800b138:	db7b      	blt.n	800b232 <UART_SetConfig+0xaba>
 800b13a:	2b20      	cmp	r3, #32
 800b13c:	d879      	bhi.n	800b232 <UART_SetConfig+0xaba>
 800b13e:	a201      	add	r2, pc, #4	; (adr r2, 800b144 <UART_SetConfig+0x9cc>)
 800b140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b144:	0800b1cf 	.word	0x0800b1cf
 800b148:	0800b1d7 	.word	0x0800b1d7
 800b14c:	0800b233 	.word	0x0800b233
 800b150:	0800b233 	.word	0x0800b233
 800b154:	0800b1df 	.word	0x0800b1df
 800b158:	0800b233 	.word	0x0800b233
 800b15c:	0800b233 	.word	0x0800b233
 800b160:	0800b233 	.word	0x0800b233
 800b164:	0800b1ef 	.word	0x0800b1ef
 800b168:	0800b233 	.word	0x0800b233
 800b16c:	0800b233 	.word	0x0800b233
 800b170:	0800b233 	.word	0x0800b233
 800b174:	0800b233 	.word	0x0800b233
 800b178:	0800b233 	.word	0x0800b233
 800b17c:	0800b233 	.word	0x0800b233
 800b180:	0800b233 	.word	0x0800b233
 800b184:	0800b1ff 	.word	0x0800b1ff
 800b188:	0800b233 	.word	0x0800b233
 800b18c:	0800b233 	.word	0x0800b233
 800b190:	0800b233 	.word	0x0800b233
 800b194:	0800b233 	.word	0x0800b233
 800b198:	0800b233 	.word	0x0800b233
 800b19c:	0800b233 	.word	0x0800b233
 800b1a0:	0800b233 	.word	0x0800b233
 800b1a4:	0800b233 	.word	0x0800b233
 800b1a8:	0800b233 	.word	0x0800b233
 800b1ac:	0800b233 	.word	0x0800b233
 800b1b0:	0800b233 	.word	0x0800b233
 800b1b4:	0800b233 	.word	0x0800b233
 800b1b8:	0800b233 	.word	0x0800b233
 800b1bc:	0800b233 	.word	0x0800b233
 800b1c0:	0800b233 	.word	0x0800b233
 800b1c4:	0800b225 	.word	0x0800b225
 800b1c8:	2b40      	cmp	r3, #64	; 0x40
 800b1ca:	d02e      	beq.n	800b22a <UART_SetConfig+0xab2>
 800b1cc:	e031      	b.n	800b232 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1ce:	f7fc fd85 	bl	8007cdc <HAL_RCC_GetPCLK1Freq>
 800b1d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1d4:	e033      	b.n	800b23e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1d6:	f7fc fd97 	bl	8007d08 <HAL_RCC_GetPCLK2Freq>
 800b1da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b1dc:	e02f      	b.n	800b23e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b1de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7fe fc2e 	bl	8009a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1ec:	e027      	b.n	800b23e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1ee:	f107 0318 	add.w	r3, r7, #24
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fe fd7a 	bl	8009cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1fc:	e01f      	b.n	800b23e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1fe:	4b69      	ldr	r3, [pc, #420]	; (800b3a4 <UART_SetConfig+0xc2c>)
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f003 0320 	and.w	r3, r3, #32
 800b206:	2b00      	cmp	r3, #0
 800b208:	d009      	beq.n	800b21e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b20a:	4b66      	ldr	r3, [pc, #408]	; (800b3a4 <UART_SetConfig+0xc2c>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	08db      	lsrs	r3, r3, #3
 800b210:	f003 0303 	and.w	r3, r3, #3
 800b214:	4a64      	ldr	r2, [pc, #400]	; (800b3a8 <UART_SetConfig+0xc30>)
 800b216:	fa22 f303 	lsr.w	r3, r2, r3
 800b21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b21c:	e00f      	b.n	800b23e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b21e:	4b62      	ldr	r3, [pc, #392]	; (800b3a8 <UART_SetConfig+0xc30>)
 800b220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b222:	e00c      	b.n	800b23e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b224:	4b61      	ldr	r3, [pc, #388]	; (800b3ac <UART_SetConfig+0xc34>)
 800b226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b228:	e009      	b.n	800b23e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b22a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b230:	e005      	b.n	800b23e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b232:	2300      	movs	r3, #0
 800b234:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b236:	2301      	movs	r3, #1
 800b238:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b23c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b23e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b240:	2b00      	cmp	r3, #0
 800b242:	f000 80ea 	beq.w	800b41a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24a:	4a55      	ldr	r2, [pc, #340]	; (800b3a0 <UART_SetConfig+0xc28>)
 800b24c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b250:	461a      	mov	r2, r3
 800b252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b254:	fbb3 f3f2 	udiv	r3, r3, r2
 800b258:	005a      	lsls	r2, r3, #1
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	085b      	lsrs	r3, r3, #1
 800b260:	441a      	add	r2, r3
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	fbb2 f3f3 	udiv	r3, r2, r3
 800b26a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b26c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26e:	2b0f      	cmp	r3, #15
 800b270:	d916      	bls.n	800b2a0 <UART_SetConfig+0xb28>
 800b272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b278:	d212      	bcs.n	800b2a0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	f023 030f 	bic.w	r3, r3, #15
 800b282:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b286:	085b      	lsrs	r3, r3, #1
 800b288:	b29b      	uxth	r3, r3
 800b28a:	f003 0307 	and.w	r3, r3, #7
 800b28e:	b29a      	uxth	r2, r3
 800b290:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b292:	4313      	orrs	r3, r2
 800b294:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b29c:	60da      	str	r2, [r3, #12]
 800b29e:	e0bc      	b.n	800b41a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b2a6:	e0b8      	b.n	800b41a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b2a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b2ac:	2b20      	cmp	r3, #32
 800b2ae:	dc4b      	bgt.n	800b348 <UART_SetConfig+0xbd0>
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f2c0 8087 	blt.w	800b3c4 <UART_SetConfig+0xc4c>
 800b2b6:	2b20      	cmp	r3, #32
 800b2b8:	f200 8084 	bhi.w	800b3c4 <UART_SetConfig+0xc4c>
 800b2bc:	a201      	add	r2, pc, #4	; (adr r2, 800b2c4 <UART_SetConfig+0xb4c>)
 800b2be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c2:	bf00      	nop
 800b2c4:	0800b34f 	.word	0x0800b34f
 800b2c8:	0800b357 	.word	0x0800b357
 800b2cc:	0800b3c5 	.word	0x0800b3c5
 800b2d0:	0800b3c5 	.word	0x0800b3c5
 800b2d4:	0800b35f 	.word	0x0800b35f
 800b2d8:	0800b3c5 	.word	0x0800b3c5
 800b2dc:	0800b3c5 	.word	0x0800b3c5
 800b2e0:	0800b3c5 	.word	0x0800b3c5
 800b2e4:	0800b36f 	.word	0x0800b36f
 800b2e8:	0800b3c5 	.word	0x0800b3c5
 800b2ec:	0800b3c5 	.word	0x0800b3c5
 800b2f0:	0800b3c5 	.word	0x0800b3c5
 800b2f4:	0800b3c5 	.word	0x0800b3c5
 800b2f8:	0800b3c5 	.word	0x0800b3c5
 800b2fc:	0800b3c5 	.word	0x0800b3c5
 800b300:	0800b3c5 	.word	0x0800b3c5
 800b304:	0800b37f 	.word	0x0800b37f
 800b308:	0800b3c5 	.word	0x0800b3c5
 800b30c:	0800b3c5 	.word	0x0800b3c5
 800b310:	0800b3c5 	.word	0x0800b3c5
 800b314:	0800b3c5 	.word	0x0800b3c5
 800b318:	0800b3c5 	.word	0x0800b3c5
 800b31c:	0800b3c5 	.word	0x0800b3c5
 800b320:	0800b3c5 	.word	0x0800b3c5
 800b324:	0800b3c5 	.word	0x0800b3c5
 800b328:	0800b3c5 	.word	0x0800b3c5
 800b32c:	0800b3c5 	.word	0x0800b3c5
 800b330:	0800b3c5 	.word	0x0800b3c5
 800b334:	0800b3c5 	.word	0x0800b3c5
 800b338:	0800b3c5 	.word	0x0800b3c5
 800b33c:	0800b3c5 	.word	0x0800b3c5
 800b340:	0800b3c5 	.word	0x0800b3c5
 800b344:	0800b3b7 	.word	0x0800b3b7
 800b348:	2b40      	cmp	r3, #64	; 0x40
 800b34a:	d037      	beq.n	800b3bc <UART_SetConfig+0xc44>
 800b34c:	e03a      	b.n	800b3c4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b34e:	f7fc fcc5 	bl	8007cdc <HAL_RCC_GetPCLK1Freq>
 800b352:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b354:	e03c      	b.n	800b3d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b356:	f7fc fcd7 	bl	8007d08 <HAL_RCC_GetPCLK2Freq>
 800b35a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b35c:	e038      	b.n	800b3d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b35e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b362:	4618      	mov	r0, r3
 800b364:	f7fe fb6e 	bl	8009a44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b36c:	e030      	b.n	800b3d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b36e:	f107 0318 	add.w	r3, r7, #24
 800b372:	4618      	mov	r0, r3
 800b374:	f7fe fcba 	bl	8009cec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b37c:	e028      	b.n	800b3d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b37e:	4b09      	ldr	r3, [pc, #36]	; (800b3a4 <UART_SetConfig+0xc2c>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 0320 	and.w	r3, r3, #32
 800b386:	2b00      	cmp	r3, #0
 800b388:	d012      	beq.n	800b3b0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b38a:	4b06      	ldr	r3, [pc, #24]	; (800b3a4 <UART_SetConfig+0xc2c>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	08db      	lsrs	r3, r3, #3
 800b390:	f003 0303 	and.w	r3, r3, #3
 800b394:	4a04      	ldr	r2, [pc, #16]	; (800b3a8 <UART_SetConfig+0xc30>)
 800b396:	fa22 f303 	lsr.w	r3, r2, r3
 800b39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b39c:	e018      	b.n	800b3d0 <UART_SetConfig+0xc58>
 800b39e:	bf00      	nop
 800b3a0:	08012a88 	.word	0x08012a88
 800b3a4:	58024400 	.word	0x58024400
 800b3a8:	03d09000 	.word	0x03d09000
 800b3ac:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b3b0:	4b24      	ldr	r3, [pc, #144]	; (800b444 <UART_SetConfig+0xccc>)
 800b3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3b4:	e00c      	b.n	800b3d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b3b6:	4b24      	ldr	r3, [pc, #144]	; (800b448 <UART_SetConfig+0xcd0>)
 800b3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3ba:	e009      	b.n	800b3d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3c2:	e005      	b.n	800b3d0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b3ce:	bf00      	nop
    }

    if (pclk != 0U)
 800b3d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d021      	beq.n	800b41a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3da:	4a1c      	ldr	r2, [pc, #112]	; (800b44c <UART_SetConfig+0xcd4>)
 800b3dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3e4:	fbb3 f2f2 	udiv	r2, r3, r2
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	085b      	lsrs	r3, r3, #1
 800b3ee:	441a      	add	r2, r3
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	685b      	ldr	r3, [r3, #4]
 800b3f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3f8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3fc:	2b0f      	cmp	r3, #15
 800b3fe:	d909      	bls.n	800b414 <UART_SetConfig+0xc9c>
 800b400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b406:	d205      	bcs.n	800b414 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40a:	b29a      	uxth	r2, r3
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	60da      	str	r2, [r3, #12]
 800b412:	e002      	b.n	800b41a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	2201      	movs	r2, #1
 800b41e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	2201      	movs	r2, #1
 800b426:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	2200      	movs	r2, #0
 800b42e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	2200      	movs	r2, #0
 800b434:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b436:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3748      	adds	r7, #72	; 0x48
 800b43e:	46bd      	mov	sp, r7
 800b440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b444:	03d09000 	.word	0x03d09000
 800b448:	003d0900 	.word	0x003d0900
 800b44c:	08012a88 	.word	0x08012a88

0800b450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b45c:	f003 0308 	and.w	r3, r3, #8
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00a      	beq.n	800b47a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	430a      	orrs	r2, r1
 800b478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b47e:	f003 0301 	and.w	r3, r3, #1
 800b482:	2b00      	cmp	r3, #0
 800b484:	d00a      	beq.n	800b49c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	430a      	orrs	r2, r1
 800b49a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4a0:	f003 0302 	and.w	r3, r3, #2
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d00a      	beq.n	800b4be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	430a      	orrs	r2, r1
 800b4bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4c2:	f003 0304 	and.w	r3, r3, #4
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00a      	beq.n	800b4e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	430a      	orrs	r2, r1
 800b4de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4e4:	f003 0310 	and.w	r3, r3, #16
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00a      	beq.n	800b502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	689b      	ldr	r3, [r3, #8]
 800b4f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	430a      	orrs	r2, r1
 800b500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b506:	f003 0320 	and.w	r3, r3, #32
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00a      	beq.n	800b524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	430a      	orrs	r2, r1
 800b522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d01a      	beq.n	800b566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	430a      	orrs	r2, r1
 800b544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b54a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b54e:	d10a      	bne.n	800b566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	430a      	orrs	r2, r1
 800b564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b56a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00a      	beq.n	800b588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	430a      	orrs	r2, r1
 800b586:	605a      	str	r2, [r3, #4]
  }
}
 800b588:	bf00      	nop
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b098      	sub	sp, #96	; 0x60
 800b598:	af02      	add	r7, sp, #8
 800b59a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5a4:	f7f6 f9ea 	bl	800197c <HAL_GetTick>
 800b5a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f003 0308 	and.w	r3, r3, #8
 800b5b4:	2b08      	cmp	r3, #8
 800b5b6:	d12f      	bne.n	800b618 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b5bc:	9300      	str	r3, [sp, #0]
 800b5be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f88e 	bl	800b6e8 <UART_WaitOnFlagUntilTimeout>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d022      	beq.n	800b618 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5da:	e853 3f00 	ldrex	r3, [r3]
 800b5de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b5e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5e6:	653b      	str	r3, [r7, #80]	; 0x50
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5f0:	647b      	str	r3, [r7, #68]	; 0x44
 800b5f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b5f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5f8:	e841 2300 	strex	r3, r2, [r1]
 800b5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b5fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b600:	2b00      	cmp	r3, #0
 800b602:	d1e6      	bne.n	800b5d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2220      	movs	r2, #32
 800b608:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2200      	movs	r2, #0
 800b610:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b614:	2303      	movs	r3, #3
 800b616:	e063      	b.n	800b6e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f003 0304 	and.w	r3, r3, #4
 800b622:	2b04      	cmp	r3, #4
 800b624:	d149      	bne.n	800b6ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b626:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b62a:	9300      	str	r3, [sp, #0]
 800b62c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b62e:	2200      	movs	r2, #0
 800b630:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 f857 	bl	800b6e8 <UART_WaitOnFlagUntilTimeout>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d03c      	beq.n	800b6ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b648:	e853 3f00 	ldrex	r3, [r3]
 800b64c:	623b      	str	r3, [r7, #32]
   return(result);
 800b64e:	6a3b      	ldr	r3, [r7, #32]
 800b650:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b654:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	461a      	mov	r2, r3
 800b65c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b65e:	633b      	str	r3, [r7, #48]	; 0x30
 800b660:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b666:	e841 2300 	strex	r3, r2, [r1]
 800b66a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1e6      	bne.n	800b640 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	3308      	adds	r3, #8
 800b678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	e853 3f00 	ldrex	r3, [r3]
 800b680:	60fb      	str	r3, [r7, #12]
   return(result);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f023 0301 	bic.w	r3, r3, #1
 800b688:	64bb      	str	r3, [r7, #72]	; 0x48
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	3308      	adds	r3, #8
 800b690:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b692:	61fa      	str	r2, [r7, #28]
 800b694:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b696:	69b9      	ldr	r1, [r7, #24]
 800b698:	69fa      	ldr	r2, [r7, #28]
 800b69a:	e841 2300 	strex	r3, r2, [r1]
 800b69e:	617b      	str	r3, [r7, #20]
   return(result);
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d1e5      	bne.n	800b672 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2220      	movs	r2, #32
 800b6aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	e012      	b.n	800b6e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2220      	movs	r2, #32
 800b6be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2220      	movs	r2, #32
 800b6c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3758      	adds	r7, #88	; 0x58
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	603b      	str	r3, [r7, #0]
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6f8:	e04f      	b.n	800b79a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b700:	d04b      	beq.n	800b79a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b702:	f7f6 f93b 	bl	800197c <HAL_GetTick>
 800b706:	4602      	mov	r2, r0
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	1ad3      	subs	r3, r2, r3
 800b70c:	69ba      	ldr	r2, [r7, #24]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d302      	bcc.n	800b718 <UART_WaitOnFlagUntilTimeout+0x30>
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d101      	bne.n	800b71c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b718:	2303      	movs	r3, #3
 800b71a:	e04e      	b.n	800b7ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 0304 	and.w	r3, r3, #4
 800b726:	2b00      	cmp	r3, #0
 800b728:	d037      	beq.n	800b79a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	2b80      	cmp	r3, #128	; 0x80
 800b72e:	d034      	beq.n	800b79a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	2b40      	cmp	r3, #64	; 0x40
 800b734:	d031      	beq.n	800b79a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	69db      	ldr	r3, [r3, #28]
 800b73c:	f003 0308 	and.w	r3, r3, #8
 800b740:	2b08      	cmp	r3, #8
 800b742:	d110      	bne.n	800b766 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	2208      	movs	r2, #8
 800b74a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f000 f95b 	bl	800ba08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2208      	movs	r2, #8
 800b756:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	e029      	b.n	800b7ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	69db      	ldr	r3, [r3, #28]
 800b76c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b774:	d111      	bne.n	800b79a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b77e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	f000 f941 	bl	800ba08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2220      	movs	r2, #32
 800b78a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b796:	2303      	movs	r3, #3
 800b798:	e00f      	b.n	800b7ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	69da      	ldr	r2, [r3, #28]
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	bf0c      	ite	eq
 800b7aa:	2301      	moveq	r3, #1
 800b7ac:	2300      	movne	r3, #0
 800b7ae:	b2db      	uxtb	r3, r3
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	79fb      	ldrb	r3, [r7, #7]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d0a0      	beq.n	800b6fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
	...

0800b7c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b0a3      	sub	sp, #140	; 0x8c
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	68ba      	ldr	r2, [r7, #8]
 800b7d6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	88fa      	ldrh	r2, [r7, #6]
 800b7dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	88fa      	ldrh	r2, [r7, #6]
 800b7e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7f6:	d10e      	bne.n	800b816 <UART_Start_Receive_IT+0x52>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	691b      	ldr	r3, [r3, #16]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d105      	bne.n	800b80c <UART_Start_Receive_IT+0x48>
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b806:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b80a:	e02d      	b.n	800b868 <UART_Start_Receive_IT+0xa4>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	22ff      	movs	r2, #255	; 0xff
 800b810:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b814:	e028      	b.n	800b868 <UART_Start_Receive_IT+0xa4>
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10d      	bne.n	800b83a <UART_Start_Receive_IT+0x76>
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	691b      	ldr	r3, [r3, #16]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d104      	bne.n	800b830 <UART_Start_Receive_IT+0x6c>
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	22ff      	movs	r2, #255	; 0xff
 800b82a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b82e:	e01b      	b.n	800b868 <UART_Start_Receive_IT+0xa4>
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	227f      	movs	r2, #127	; 0x7f
 800b834:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b838:	e016      	b.n	800b868 <UART_Start_Receive_IT+0xa4>
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b842:	d10d      	bne.n	800b860 <UART_Start_Receive_IT+0x9c>
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d104      	bne.n	800b856 <UART_Start_Receive_IT+0x92>
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	227f      	movs	r2, #127	; 0x7f
 800b850:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b854:	e008      	b.n	800b868 <UART_Start_Receive_IT+0xa4>
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	223f      	movs	r2, #63	; 0x3f
 800b85a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b85e:	e003      	b.n	800b868 <UART_Start_Receive_IT+0xa4>
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2200      	movs	r2, #0
 800b864:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	2222      	movs	r2, #34	; 0x22
 800b874:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	3308      	adds	r3, #8
 800b87e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b880:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b882:	e853 3f00 	ldrex	r3, [r3]
 800b886:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b888:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b88a:	f043 0301 	orr.w	r3, r3, #1
 800b88e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	3308      	adds	r3, #8
 800b898:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b89c:	673a      	str	r2, [r7, #112]	; 0x70
 800b89e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b8a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b8a4:	e841 2300 	strex	r3, r2, [r1]
 800b8a8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b8aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1e3      	bne.n	800b878 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8b8:	d14f      	bne.n	800b95a <UART_Start_Receive_IT+0x196>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b8c0:	88fa      	ldrh	r2, [r7, #6]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d349      	bcc.n	800b95a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8ce:	d107      	bne.n	800b8e0 <UART_Start_Receive_IT+0x11c>
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	691b      	ldr	r3, [r3, #16]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d103      	bne.n	800b8e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	4a47      	ldr	r2, [pc, #284]	; (800b9f8 <UART_Start_Receive_IT+0x234>)
 800b8dc:	675a      	str	r2, [r3, #116]	; 0x74
 800b8de:	e002      	b.n	800b8e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	4a46      	ldr	r2, [pc, #280]	; (800b9fc <UART_Start_Receive_IT+0x238>)
 800b8e4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	691b      	ldr	r3, [r3, #16]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d01a      	beq.n	800b924 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8f6:	e853 3f00 	ldrex	r3, [r3]
 800b8fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b8fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b902:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	461a      	mov	r2, r3
 800b90c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b910:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b912:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b914:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b916:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b918:	e841 2300 	strex	r3, r2, [r1]
 800b91c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b91e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b920:	2b00      	cmp	r3, #0
 800b922:	d1e4      	bne.n	800b8ee <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	3308      	adds	r3, #8
 800b92a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b92e:	e853 3f00 	ldrex	r3, [r3]
 800b932:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b93a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	3308      	adds	r3, #8
 800b942:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b944:	64ba      	str	r2, [r7, #72]	; 0x48
 800b946:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b948:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b94a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b94c:	e841 2300 	strex	r3, r2, [r1]
 800b950:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b954:	2b00      	cmp	r3, #0
 800b956:	d1e5      	bne.n	800b924 <UART_Start_Receive_IT+0x160>
 800b958:	e046      	b.n	800b9e8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b962:	d107      	bne.n	800b974 <UART_Start_Receive_IT+0x1b0>
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d103      	bne.n	800b974 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	4a24      	ldr	r2, [pc, #144]	; (800ba00 <UART_Start_Receive_IT+0x23c>)
 800b970:	675a      	str	r2, [r3, #116]	; 0x74
 800b972:	e002      	b.n	800b97a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	4a23      	ldr	r2, [pc, #140]	; (800ba04 <UART_Start_Receive_IT+0x240>)
 800b978:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	691b      	ldr	r3, [r3, #16]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d019      	beq.n	800b9b6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98a:	e853 3f00 	ldrex	r3, [r3]
 800b98e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b992:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b996:	677b      	str	r3, [r7, #116]	; 0x74
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	461a      	mov	r2, r3
 800b99e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9a0:	637b      	str	r3, [r7, #52]	; 0x34
 800b9a2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b9a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9a8:	e841 2300 	strex	r3, r2, [r1]
 800b9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1e6      	bne.n	800b982 <UART_Start_Receive_IT+0x1be>
 800b9b4:	e018      	b.n	800b9e8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	e853 3f00 	ldrex	r3, [r3]
 800b9c2:	613b      	str	r3, [r7, #16]
   return(result);
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	f043 0320 	orr.w	r3, r3, #32
 800b9ca:	67bb      	str	r3, [r7, #120]	; 0x78
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9d4:	623b      	str	r3, [r7, #32]
 800b9d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d8:	69f9      	ldr	r1, [r7, #28]
 800b9da:	6a3a      	ldr	r2, [r7, #32]
 800b9dc:	e841 2300 	strex	r3, r2, [r1]
 800b9e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800b9e2:	69bb      	ldr	r3, [r7, #24]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d1e6      	bne.n	800b9b6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b9e8:	2300      	movs	r3, #0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	378c      	adds	r7, #140	; 0x8c
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	0800c4e9 	.word	0x0800c4e9
 800b9fc:	0800c189 	.word	0x0800c189
 800ba00:	0800bfd1 	.word	0x0800bfd1
 800ba04:	0800be19 	.word	0x0800be19

0800ba08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b095      	sub	sp, #84	; 0x54
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba18:	e853 3f00 	ldrex	r3, [r3]
 800ba1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ba1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ba24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba2e:	643b      	str	r3, [r7, #64]	; 0x40
 800ba30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ba34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ba36:	e841 2300 	strex	r3, r2, [r1]
 800ba3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1e6      	bne.n	800ba10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	3308      	adds	r3, #8
 800ba48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	e853 3f00 	ldrex	r3, [r3]
 800ba50:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba52:	69fa      	ldr	r2, [r7, #28]
 800ba54:	4b1e      	ldr	r3, [pc, #120]	; (800bad0 <UART_EndRxTransfer+0xc8>)
 800ba56:	4013      	ands	r3, r2
 800ba58:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	3308      	adds	r3, #8
 800ba60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba62:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ba64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba6a:	e841 2300 	strex	r3, r2, [r1]
 800ba6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1e5      	bne.n	800ba42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d118      	bne.n	800bab0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	e853 3f00 	ldrex	r3, [r3]
 800ba8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	f023 0310 	bic.w	r3, r3, #16
 800ba92:	647b      	str	r3, [r7, #68]	; 0x44
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba9c:	61bb      	str	r3, [r7, #24]
 800ba9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa0:	6979      	ldr	r1, [r7, #20]
 800baa2:	69ba      	ldr	r2, [r7, #24]
 800baa4:	e841 2300 	strex	r3, r2, [r1]
 800baa8:	613b      	str	r3, [r7, #16]
   return(result);
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d1e6      	bne.n	800ba7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2220      	movs	r2, #32
 800bab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2200      	movs	r2, #0
 800babc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800bac4:	bf00      	nop
 800bac6:	3754      	adds	r7, #84	; 0x54
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr
 800bad0:	effffffe 	.word	0xeffffffe

0800bad4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b08f      	sub	sp, #60	; 0x3c
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bae2:	2b21      	cmp	r3, #33	; 0x21
 800bae4:	d14c      	bne.n	800bb80 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800baec:	b29b      	uxth	r3, r3
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d132      	bne.n	800bb58 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf8:	6a3b      	ldr	r3, [r7, #32]
 800bafa:	e853 3f00 	ldrex	r3, [r3]
 800bafe:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb06:	637b      	str	r3, [r7, #52]	; 0x34
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb12:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb18:	e841 2300 	strex	r3, r2, [r1]
 800bb1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d1e6      	bne.n	800baf2 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	e853 3f00 	ldrex	r3, [r3]
 800bb30:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb38:	633b      	str	r3, [r7, #48]	; 0x30
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	461a      	mov	r2, r3
 800bb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb42:	61bb      	str	r3, [r7, #24]
 800bb44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb46:	6979      	ldr	r1, [r7, #20]
 800bb48:	69ba      	ldr	r2, [r7, #24]
 800bb4a:	e841 2300 	strex	r3, r2, [r1]
 800bb4e:	613b      	str	r3, [r7, #16]
   return(result);
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1e6      	bne.n	800bb24 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bb56:	e013      	b.n	800bb80 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb5c:	781a      	ldrb	r2, [r3, #0]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb68:	1c5a      	adds	r2, r3, #1
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	3b01      	subs	r3, #1
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800bb80:	bf00      	nop
 800bb82:	373c      	adds	r7, #60	; 0x3c
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b091      	sub	sp, #68	; 0x44
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb9a:	2b21      	cmp	r3, #33	; 0x21
 800bb9c:	d151      	bne.n	800bc42 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d132      	bne.n	800bc10 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb2:	e853 3f00 	ldrex	r3, [r3]
 800bbb6:	623b      	str	r3, [r7, #32]
   return(result);
 800bbb8:	6a3b      	ldr	r3, [r7, #32]
 800bbba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bbbe:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc8:	633b      	str	r3, [r7, #48]	; 0x30
 800bbca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbd0:	e841 2300 	strex	r3, r2, [r1]
 800bbd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1e6      	bne.n	800bbaa <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	e853 3f00 	ldrex	r3, [r3]
 800bbe8:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbf0:	637b      	str	r3, [r7, #52]	; 0x34
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbfa:	61fb      	str	r3, [r7, #28]
 800bbfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbfe:	69b9      	ldr	r1, [r7, #24]
 800bc00:	69fa      	ldr	r2, [r7, #28]
 800bc02:	e841 2300 	strex	r3, r2, [r1]
 800bc06:	617b      	str	r3, [r7, #20]
   return(result);
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d1e6      	bne.n	800bbdc <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bc0e:	e018      	b.n	800bc42 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc14:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bc16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc18:	881b      	ldrh	r3, [r3, #0]
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc24:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc2a:	1c9a      	adds	r2, r3, #2
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	b29a      	uxth	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800bc42:	bf00      	nop
 800bc44:	3744      	adds	r7, #68	; 0x44
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b091      	sub	sp, #68	; 0x44
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc5c:	2b21      	cmp	r3, #33	; 0x21
 800bc5e:	d160      	bne.n	800bd22 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bc66:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800bc68:	e057      	b.n	800bd1a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d133      	bne.n	800bcde <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	3308      	adds	r3, #8
 800bc7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc80:	e853 3f00 	ldrex	r3, [r3]
 800bc84:	623b      	str	r3, [r7, #32]
   return(result);
 800bc86:	6a3b      	ldr	r3, [r7, #32]
 800bc88:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bc8c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	3308      	adds	r3, #8
 800bc94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc96:	633a      	str	r2, [r7, #48]	; 0x30
 800bc98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc9e:	e841 2300 	strex	r3, r2, [r1]
 800bca2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1e5      	bne.n	800bc76 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	e853 3f00 	ldrex	r3, [r3]
 800bcb6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcbe:	637b      	str	r3, [r7, #52]	; 0x34
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc8:	61fb      	str	r3, [r7, #28]
 800bcca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bccc:	69b9      	ldr	r1, [r7, #24]
 800bcce:	69fa      	ldr	r2, [r7, #28]
 800bcd0:	e841 2300 	strex	r3, r2, [r1]
 800bcd4:	617b      	str	r3, [r7, #20]
   return(result);
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d1e6      	bne.n	800bcaa <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800bcdc:	e021      	b.n	800bd22 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	69db      	ldr	r3, [r3, #28]
 800bce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d013      	beq.n	800bd14 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcf0:	781a      	ldrb	r2, [r3, #0]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcfc:	1c5a      	adds	r2, r3, #1
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	b29a      	uxth	r2, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bd14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bd16:	3b01      	subs	r3, #1
 800bd18:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800bd1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d1a4      	bne.n	800bc6a <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800bd20:	e7ff      	b.n	800bd22 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800bd22:	bf00      	nop
 800bd24:	3744      	adds	r7, #68	; 0x44
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bd2e:	b480      	push	{r7}
 800bd30:	b091      	sub	sp, #68	; 0x44
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd3c:	2b21      	cmp	r3, #33	; 0x21
 800bd3e:	d165      	bne.n	800be0c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800bd46:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800bd48:	e05c      	b.n	800be04 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d133      	bne.n	800bdbe <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	3308      	adds	r3, #8
 800bd5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5e:	6a3b      	ldr	r3, [r7, #32]
 800bd60:	e853 3f00 	ldrex	r3, [r3]
 800bd64:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd66:	69fb      	ldr	r3, [r7, #28]
 800bd68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bd6c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3308      	adds	r3, #8
 800bd74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd76:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd7e:	e841 2300 	strex	r3, r2, [r1]
 800bd82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1e5      	bne.n	800bd56 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	e853 3f00 	ldrex	r3, [r3]
 800bd96:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd9e:	633b      	str	r3, [r7, #48]	; 0x30
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	461a      	mov	r2, r3
 800bda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda8:	61bb      	str	r3, [r7, #24]
 800bdaa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdac:	6979      	ldr	r1, [r7, #20]
 800bdae:	69ba      	ldr	r2, [r7, #24]
 800bdb0:	e841 2300 	strex	r3, r2, [r1]
 800bdb4:	613b      	str	r3, [r7, #16]
   return(result);
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d1e6      	bne.n	800bd8a <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800bdbc:	e026      	b.n	800be0c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	69db      	ldr	r3, [r3, #28]
 800bdc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d018      	beq.n	800bdfe <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdd0:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd4:	881b      	ldrh	r3, [r3, #0]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bde0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde6:	1c9a      	adds	r2, r3, #2
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	b29a      	uxth	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800bdfe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800be00:	3b01      	subs	r3, #1
 800be02:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800be04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800be06:	2b00      	cmp	r3, #0
 800be08:	d19f      	bne.n	800bd4a <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800be0a:	e7ff      	b.n	800be0c <UART_TxISR_16BIT_FIFOEN+0xde>
 800be0c:	bf00      	nop
 800be0e:	3744      	adds	r7, #68	; 0x44
 800be10:	46bd      	mov	sp, r7
 800be12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be16:	4770      	bx	lr

0800be18 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b09c      	sub	sp, #112	; 0x70
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be26:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be30:	2b22      	cmp	r3, #34	; 0x22
 800be32:	f040 80be 	bne.w	800bfb2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800be40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800be44:	b2d9      	uxtb	r1, r3
 800be46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800be4a:	b2da      	uxtb	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be50:	400a      	ands	r2, r1
 800be52:	b2d2      	uxtb	r2, r2
 800be54:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be5a:	1c5a      	adds	r2, r3, #1
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be66:	b29b      	uxth	r3, r3
 800be68:	3b01      	subs	r3, #1
 800be6a:	b29a      	uxth	r2, r3
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be78:	b29b      	uxth	r3, r3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f040 80a1 	bne.w	800bfc2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be88:	e853 3f00 	ldrex	r3, [r3]
 800be8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800be8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800be94:	66bb      	str	r3, [r7, #104]	; 0x68
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	461a      	mov	r2, r3
 800be9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be9e:	65bb      	str	r3, [r7, #88]	; 0x58
 800bea0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bea4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bea6:	e841 2300 	strex	r3, r2, [r1]
 800beaa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800beac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1e6      	bne.n	800be80 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	3308      	adds	r3, #8
 800beb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebc:	e853 3f00 	ldrex	r3, [r3]
 800bec0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec4:	f023 0301 	bic.w	r3, r3, #1
 800bec8:	667b      	str	r3, [r7, #100]	; 0x64
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	3308      	adds	r3, #8
 800bed0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bed2:	647a      	str	r2, [r7, #68]	; 0x44
 800bed4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800beda:	e841 2300 	strex	r3, r2, [r1]
 800bede:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1e5      	bne.n	800beb2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2220      	movs	r2, #32
 800beea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2200      	movs	r2, #0
 800bef2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2200      	movs	r2, #0
 800bef8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4a33      	ldr	r2, [pc, #204]	; (800bfcc <UART_RxISR_8BIT+0x1b4>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d01f      	beq.n	800bf44 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d018      	beq.n	800bf44 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1a:	e853 3f00 	ldrex	r3, [r3]
 800bf1e:	623b      	str	r3, [r7, #32]
   return(result);
 800bf20:	6a3b      	ldr	r3, [r7, #32]
 800bf22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bf26:	663b      	str	r3, [r7, #96]	; 0x60
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf30:	633b      	str	r3, [r7, #48]	; 0x30
 800bf32:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf38:	e841 2300 	strex	r3, r2, [r1]
 800bf3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1e6      	bne.n	800bf12 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d12e      	bne.n	800bfaa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	e853 3f00 	ldrex	r3, [r3]
 800bf5e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	f023 0310 	bic.w	r3, r3, #16
 800bf66:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf70:	61fb      	str	r3, [r7, #28]
 800bf72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf74:	69b9      	ldr	r1, [r7, #24]
 800bf76:	69fa      	ldr	r2, [r7, #28]
 800bf78:	e841 2300 	strex	r3, r2, [r1]
 800bf7c:	617b      	str	r3, [r7, #20]
   return(result);
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1e6      	bne.n	800bf52 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	69db      	ldr	r3, [r3, #28]
 800bf8a:	f003 0310 	and.w	r3, r3, #16
 800bf8e:	2b10      	cmp	r3, #16
 800bf90:	d103      	bne.n	800bf9a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	2210      	movs	r2, #16
 800bf98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f7fe fbdc 	bl	800a760 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bfa8:	e00b      	b.n	800bfc2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f006 f8c2 	bl	8012134 <HAL_UART_RxCpltCallback>
}
 800bfb0:	e007      	b.n	800bfc2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	699a      	ldr	r2, [r3, #24]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	f042 0208 	orr.w	r2, r2, #8
 800bfc0:	619a      	str	r2, [r3, #24]
}
 800bfc2:	bf00      	nop
 800bfc4:	3770      	adds	r7, #112	; 0x70
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	58000c00 	.word	0x58000c00

0800bfd0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b09c      	sub	sp, #112	; 0x70
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bfde:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bfe8:	2b22      	cmp	r3, #34	; 0x22
 800bfea:	f040 80be 	bne.w	800c16a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bffc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800bffe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c002:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c006:	4013      	ands	r3, r2
 800c008:	b29a      	uxth	r2, r3
 800c00a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c00c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c012:	1c9a      	adds	r2, r3, #2
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c01e:	b29b      	uxth	r3, r3
 800c020:	3b01      	subs	r3, #1
 800c022:	b29a      	uxth	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c030:	b29b      	uxth	r3, r3
 800c032:	2b00      	cmp	r3, #0
 800c034:	f040 80a1 	bne.w	800c17a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c03e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c040:	e853 3f00 	ldrex	r3, [r3]
 800c044:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c04c:	667b      	str	r3, [r7, #100]	; 0x64
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	461a      	mov	r2, r3
 800c054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c056:	657b      	str	r3, [r7, #84]	; 0x54
 800c058:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c05c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c05e:	e841 2300 	strex	r3, r2, [r1]
 800c062:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1e6      	bne.n	800c038 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	3308      	adds	r3, #8
 800c070:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c074:	e853 3f00 	ldrex	r3, [r3]
 800c078:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07c:	f023 0301 	bic.w	r3, r3, #1
 800c080:	663b      	str	r3, [r7, #96]	; 0x60
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	3308      	adds	r3, #8
 800c088:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c08a:	643a      	str	r2, [r7, #64]	; 0x40
 800c08c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c08e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c090:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c092:	e841 2300 	strex	r3, r2, [r1]
 800c096:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d1e5      	bne.n	800c06a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2220      	movs	r2, #32
 800c0a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a33      	ldr	r2, [pc, #204]	; (800c184 <UART_RxISR_16BIT+0x1b4>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d01f      	beq.n	800c0fc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d018      	beq.n	800c0fc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d0:	6a3b      	ldr	r3, [r7, #32]
 800c0d2:	e853 3f00 	ldrex	r3, [r3]
 800c0d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c0de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	461a      	mov	r2, r3
 800c0e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0ea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0f0:	e841 2300 	strex	r3, r2, [r1]
 800c0f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1e6      	bne.n	800c0ca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c100:	2b01      	cmp	r3, #1
 800c102:	d12e      	bne.n	800c162 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	e853 3f00 	ldrex	r3, [r3]
 800c116:	60bb      	str	r3, [r7, #8]
   return(result);
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	f023 0310 	bic.w	r3, r3, #16
 800c11e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	461a      	mov	r2, r3
 800c126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c128:	61bb      	str	r3, [r7, #24]
 800c12a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12c:	6979      	ldr	r1, [r7, #20]
 800c12e:	69ba      	ldr	r2, [r7, #24]
 800c130:	e841 2300 	strex	r3, r2, [r1]
 800c134:	613b      	str	r3, [r7, #16]
   return(result);
 800c136:	693b      	ldr	r3, [r7, #16]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d1e6      	bne.n	800c10a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	69db      	ldr	r3, [r3, #28]
 800c142:	f003 0310 	and.w	r3, r3, #16
 800c146:	2b10      	cmp	r3, #16
 800c148:	d103      	bne.n	800c152 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2210      	movs	r2, #16
 800c150:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c158:	4619      	mov	r1, r3
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f7fe fb00 	bl	800a760 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c160:	e00b      	b.n	800c17a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f005 ffe6 	bl	8012134 <HAL_UART_RxCpltCallback>
}
 800c168:	e007      	b.n	800c17a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	699a      	ldr	r2, [r3, #24]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f042 0208 	orr.w	r2, r2, #8
 800c178:	619a      	str	r2, [r3, #24]
}
 800c17a:	bf00      	nop
 800c17c:	3770      	adds	r7, #112	; 0x70
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	58000c00 	.word	0x58000c00

0800c188 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b0ac      	sub	sp, #176	; 0xb0
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c196:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	69db      	ldr	r3, [r3, #28]
 800c1a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	689b      	ldr	r3, [r3, #8]
 800c1b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1be:	2b22      	cmp	r3, #34	; 0x22
 800c1c0:	f040 8180 	bne.w	800c4c4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c1ca:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c1ce:	e123      	b.n	800c418 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c1da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c1de:	b2d9      	uxtb	r1, r3
 800c1e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c1e4:	b2da      	uxtb	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1ea:	400a      	ands	r2, r1
 800c1ec:	b2d2      	uxtb	r2, r2
 800c1ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1f4:	1c5a      	adds	r2, r3, #1
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c200:	b29b      	uxth	r3, r3
 800c202:	3b01      	subs	r3, #1
 800c204:	b29a      	uxth	r2, r3
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	69db      	ldr	r3, [r3, #28]
 800c212:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c21a:	f003 0307 	and.w	r3, r3, #7
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d053      	beq.n	800c2ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c226:	f003 0301 	and.w	r3, r3, #1
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d011      	beq.n	800c252 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c22e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00b      	beq.n	800c252 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2201      	movs	r2, #1
 800c240:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c248:	f043 0201 	orr.w	r2, r3, #1
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c256:	f003 0302 	and.w	r3, r3, #2
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d011      	beq.n	800c282 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c25e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c262:	f003 0301 	and.w	r3, r3, #1
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00b      	beq.n	800c282 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2202      	movs	r2, #2
 800c270:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c278:	f043 0204 	orr.w	r2, r3, #4
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c282:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c286:	f003 0304 	and.w	r3, r3, #4
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d011      	beq.n	800c2b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c28e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c292:	f003 0301 	and.w	r3, r3, #1
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00b      	beq.n	800c2b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	2204      	movs	r2, #4
 800c2a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2a8:	f043 0202 	orr.w	r2, r3, #2
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d006      	beq.n	800c2ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f005 ff45 	bl	801214c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	f040 80a0 	bne.w	800c418 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2e0:	e853 3f00 	ldrex	r3, [r3]
 800c2e4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c2e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c2e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c2fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c2fc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c300:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c302:	e841 2300 	strex	r3, r2, [r1]
 800c306:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c308:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1e4      	bne.n	800c2d8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	3308      	adds	r3, #8
 800c314:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c318:	e853 3f00 	ldrex	r3, [r3]
 800c31c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c31e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c320:	4b6e      	ldr	r3, [pc, #440]	; (800c4dc <UART_RxISR_8BIT_FIFOEN+0x354>)
 800c322:	4013      	ands	r3, r2
 800c324:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	3308      	adds	r3, #8
 800c32e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c332:	66ba      	str	r2, [r7, #104]	; 0x68
 800c334:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c336:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c338:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c33a:	e841 2300 	strex	r3, r2, [r1]
 800c33e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c342:	2b00      	cmp	r3, #0
 800c344:	d1e3      	bne.n	800c30e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2220      	movs	r2, #32
 800c34a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2200      	movs	r2, #0
 800c352:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a60      	ldr	r2, [pc, #384]	; (800c4e0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d021      	beq.n	800c3a8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d01a      	beq.n	800c3a8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c37a:	e853 3f00 	ldrex	r3, [r3]
 800c37e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c382:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c386:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	461a      	mov	r2, r3
 800c390:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c394:	657b      	str	r3, [r7, #84]	; 0x54
 800c396:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c398:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c39a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c39c:	e841 2300 	strex	r3, r2, [r1]
 800c3a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c3a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d1e4      	bne.n	800c372 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d130      	bne.n	800c412 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3be:	e853 3f00 	ldrex	r3, [r3]
 800c3c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c6:	f023 0310 	bic.w	r3, r3, #16
 800c3ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c3d8:	643b      	str	r3, [r7, #64]	; 0x40
 800c3da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c3de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c3e0:	e841 2300 	strex	r3, r2, [r1]
 800c3e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d1e4      	bne.n	800c3b6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	69db      	ldr	r3, [r3, #28]
 800c3f2:	f003 0310 	and.w	r3, r3, #16
 800c3f6:	2b10      	cmp	r3, #16
 800c3f8:	d103      	bne.n	800c402 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2210      	movs	r2, #16
 800c400:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c408:	4619      	mov	r1, r3
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f7fe f9a8 	bl	800a760 <HAL_UARTEx_RxEventCallback>
 800c410:	e002      	b.n	800c418 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c412:	6878      	ldr	r0, [r7, #4]
 800c414:	f005 fe8e 	bl	8012134 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c418:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d006      	beq.n	800c42e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800c420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c424:	f003 0320 	and.w	r3, r3, #32
 800c428:	2b00      	cmp	r3, #0
 800c42a:	f47f aed1 	bne.w	800c1d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c434:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c438:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d049      	beq.n	800c4d4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c446:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c44a:	429a      	cmp	r2, r3
 800c44c:	d242      	bcs.n	800c4d4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	3308      	adds	r3, #8
 800c454:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c456:	6a3b      	ldr	r3, [r7, #32]
 800c458:	e853 3f00 	ldrex	r3, [r3]
 800c45c:	61fb      	str	r3, [r7, #28]
   return(result);
 800c45e:	69fb      	ldr	r3, [r7, #28]
 800c460:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	3308      	adds	r3, #8
 800c46e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c472:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c474:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c476:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c478:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c47a:	e841 2300 	strex	r3, r2, [r1]
 800c47e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c482:	2b00      	cmp	r3, #0
 800c484:	d1e3      	bne.n	800c44e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a16      	ldr	r2, [pc, #88]	; (800c4e4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c48a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	e853 3f00 	ldrex	r3, [r3]
 800c498:	60bb      	str	r3, [r7, #8]
   return(result);
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	f043 0320 	orr.w	r3, r3, #32
 800c4a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	461a      	mov	r2, r3
 800c4aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c4ae:	61bb      	str	r3, [r7, #24]
 800c4b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b2:	6979      	ldr	r1, [r7, #20]
 800c4b4:	69ba      	ldr	r2, [r7, #24]
 800c4b6:	e841 2300 	strex	r3, r2, [r1]
 800c4ba:	613b      	str	r3, [r7, #16]
   return(result);
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d1e4      	bne.n	800c48c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c4c2:	e007      	b.n	800c4d4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	699a      	ldr	r2, [r3, #24]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f042 0208 	orr.w	r2, r2, #8
 800c4d2:	619a      	str	r2, [r3, #24]
}
 800c4d4:	bf00      	nop
 800c4d6:	37b0      	adds	r7, #176	; 0xb0
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	effffffe 	.word	0xeffffffe
 800c4e0:	58000c00 	.word	0x58000c00
 800c4e4:	0800be19 	.word	0x0800be19

0800c4e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b0ae      	sub	sp, #184	; 0xb8
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4f6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	69db      	ldr	r3, [r3, #28]
 800c500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	689b      	ldr	r3, [r3, #8]
 800c514:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c51e:	2b22      	cmp	r3, #34	; 0x22
 800c520:	f040 8184 	bne.w	800c82c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c52a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c52e:	e127      	b.n	800c780 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c536:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c53e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800c542:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800c546:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800c54a:	4013      	ands	r3, r2
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c552:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c558:	1c9a      	adds	r2, r3, #2
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c564:	b29b      	uxth	r3, r3
 800c566:	3b01      	subs	r3, #1
 800c568:	b29a      	uxth	r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	69db      	ldr	r3, [r3, #28]
 800c576:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c57a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c57e:	f003 0307 	and.w	r3, r3, #7
 800c582:	2b00      	cmp	r3, #0
 800c584:	d053      	beq.n	800c62e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c586:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c58a:	f003 0301 	and.w	r3, r3, #1
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d011      	beq.n	800c5b6 <UART_RxISR_16BIT_FIFOEN+0xce>
 800c592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00b      	beq.n	800c5b6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5ac:	f043 0201 	orr.w	r2, r3, #1
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c5ba:	f003 0302 	and.w	r3, r3, #2
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d011      	beq.n	800c5e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800c5c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c5c6:	f003 0301 	and.w	r3, r3, #1
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00b      	beq.n	800c5e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2202      	movs	r2, #2
 800c5d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5dc:	f043 0204 	orr.w	r2, r3, #4
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c5ea:	f003 0304 	and.w	r3, r3, #4
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d011      	beq.n	800c616 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800c5f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c5f6:	f003 0301 	and.w	r3, r3, #1
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00b      	beq.n	800c616 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2204      	movs	r2, #4
 800c604:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c60c:	f043 0202 	orr.w	r2, r3, #2
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d006      	beq.n	800c62e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f005 fd93 	bl	801214c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c634:	b29b      	uxth	r3, r3
 800c636:	2b00      	cmp	r3, #0
 800c638:	f040 80a2 	bne.w	800c780 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c644:	e853 3f00 	ldrex	r3, [r3]
 800c648:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c64a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c64c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c650:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	461a      	mov	r2, r3
 800c65a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c65e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c662:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c664:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c666:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c66a:	e841 2300 	strex	r3, r2, [r1]
 800c66e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c672:	2b00      	cmp	r3, #0
 800c674:	d1e2      	bne.n	800c63c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3308      	adds	r3, #8
 800c67c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c67e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c680:	e853 3f00 	ldrex	r3, [r3]
 800c684:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c686:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c688:	4b6e      	ldr	r3, [pc, #440]	; (800c844 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800c68a:	4013      	ands	r3, r2
 800c68c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3308      	adds	r3, #8
 800c696:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800c69a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c69c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c69e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c6a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c6a2:	e841 2300 	strex	r3, r2, [r1]
 800c6a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c6a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d1e3      	bne.n	800c676 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2220      	movs	r2, #32
 800c6b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a60      	ldr	r2, [pc, #384]	; (800c848 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d021      	beq.n	800c710 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d01a      	beq.n	800c710 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6e2:	e853 3f00 	ldrex	r3, [r3]
 800c6e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c6e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c6ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	461a      	mov	r2, r3
 800c6f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c6fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800c6fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c700:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c702:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c704:	e841 2300 	strex	r3, r2, [r1]
 800c708:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c70a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d1e4      	bne.n	800c6da <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c714:	2b01      	cmp	r3, #1
 800c716:	d130      	bne.n	800c77a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c726:	e853 3f00 	ldrex	r3, [r3]
 800c72a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c72e:	f023 0310 	bic.w	r3, r3, #16
 800c732:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c740:	647b      	str	r3, [r7, #68]	; 0x44
 800c742:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c744:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c746:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c748:	e841 2300 	strex	r3, r2, [r1]
 800c74c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c74e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c750:	2b00      	cmp	r3, #0
 800c752:	d1e4      	bne.n	800c71e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	69db      	ldr	r3, [r3, #28]
 800c75a:	f003 0310 	and.w	r3, r3, #16
 800c75e:	2b10      	cmp	r3, #16
 800c760:	d103      	bne.n	800c76a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2210      	movs	r2, #16
 800c768:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c770:	4619      	mov	r1, r3
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f7fd fff4 	bl	800a760 <HAL_UARTEx_RxEventCallback>
 800c778:	e002      	b.n	800c780 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f005 fcda 	bl	8012134 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c780:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800c784:	2b00      	cmp	r3, #0
 800c786:	d006      	beq.n	800c796 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800c788:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c78c:	f003 0320 	and.w	r3, r3, #32
 800c790:	2b00      	cmp	r3, #0
 800c792:	f47f aecd 	bne.w	800c530 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c79c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c7a0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d049      	beq.n	800c83c <UART_RxISR_16BIT_FIFOEN+0x354>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c7ae:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d242      	bcs.n	800c83c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	3308      	adds	r3, #8
 800c7bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c0:	e853 3f00 	ldrex	r3, [r3]
 800c7c4:	623b      	str	r3, [r7, #32]
   return(result);
 800c7c6:	6a3b      	ldr	r3, [r7, #32]
 800c7c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	3308      	adds	r3, #8
 800c7d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800c7da:	633a      	str	r2, [r7, #48]	; 0x30
 800c7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c7e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7e2:	e841 2300 	strex	r3, r2, [r1]
 800c7e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d1e3      	bne.n	800c7b6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a16      	ldr	r2, [pc, #88]	; (800c84c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800c7f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	e853 3f00 	ldrex	r3, [r3]
 800c800:	60fb      	str	r3, [r7, #12]
   return(result);
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f043 0320 	orr.w	r3, r3, #32
 800c808:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	461a      	mov	r2, r3
 800c812:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c816:	61fb      	str	r3, [r7, #28]
 800c818:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c81a:	69b9      	ldr	r1, [r7, #24]
 800c81c:	69fa      	ldr	r2, [r7, #28]
 800c81e:	e841 2300 	strex	r3, r2, [r1]
 800c822:	617b      	str	r3, [r7, #20]
   return(result);
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1e4      	bne.n	800c7f4 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c82a:	e007      	b.n	800c83c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	699a      	ldr	r2, [r3, #24]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f042 0208 	orr.w	r2, r2, #8
 800c83a:	619a      	str	r2, [r3, #24]
}
 800c83c:	bf00      	nop
 800c83e:	37b8      	adds	r7, #184	; 0xb8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	effffffe 	.word	0xeffffffe
 800c848:	58000c00 	.word	0x58000c00
 800c84c:	0800bfd1 	.word	0x0800bfd1

0800c850 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c850:	b480      	push	{r7}
 800c852:	b085      	sub	sp, #20
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d101      	bne.n	800c866 <HAL_UARTEx_DisableFifoMode+0x16>
 800c862:	2302      	movs	r3, #2
 800c864:	e027      	b.n	800c8b6 <HAL_UARTEx_DisableFifoMode+0x66>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2201      	movs	r2, #1
 800c86a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2224      	movs	r2, #36	; 0x24
 800c872:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f022 0201 	bic.w	r2, r2, #1
 800c88c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c894:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2200      	movs	r2, #0
 800c89a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2220      	movs	r2, #32
 800c8a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c8b4:	2300      	movs	r3, #0
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3714      	adds	r7, #20
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c8c2:	b580      	push	{r7, lr}
 800c8c4:	b084      	sub	sp, #16
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
 800c8ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d101      	bne.n	800c8da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c8d6:	2302      	movs	r3, #2
 800c8d8:	e02d      	b.n	800c936 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2224      	movs	r2, #36	; 0x24
 800c8e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	f022 0201 	bic.w	r2, r2, #1
 800c900:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	683a      	ldr	r2, [r7, #0]
 800c912:	430a      	orrs	r2, r1
 800c914:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 f850 	bl	800c9bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2220      	movs	r2, #32
 800c928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2200      	movs	r2, #0
 800c930:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c934:	2300      	movs	r3, #0
}
 800c936:	4618      	mov	r0, r3
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b084      	sub	sp, #16
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
 800c946:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d101      	bne.n	800c956 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c952:	2302      	movs	r3, #2
 800c954:	e02d      	b.n	800c9b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2201      	movs	r2, #1
 800c95a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2224      	movs	r2, #36	; 0x24
 800c962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f022 0201 	bic.w	r2, r2, #1
 800c97c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	689b      	ldr	r3, [r3, #8]
 800c984:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	683a      	ldr	r2, [r7, #0]
 800c98e:	430a      	orrs	r2, r1
 800c990:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f812 	bl	800c9bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	68fa      	ldr	r2, [r7, #12]
 800c99e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2220      	movs	r2, #32
 800c9a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c9b0:	2300      	movs	r3, #0
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3710      	adds	r7, #16
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
	...

0800c9bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d108      	bne.n	800c9de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c9dc:	e031      	b.n	800ca42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c9de:	2310      	movs	r3, #16
 800c9e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c9e2:	2310      	movs	r3, #16
 800c9e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	0e5b      	lsrs	r3, r3, #25
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	f003 0307 	and.w	r3, r3, #7
 800c9f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	0f5b      	lsrs	r3, r3, #29
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	f003 0307 	and.w	r3, r3, #7
 800ca04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca06:	7bbb      	ldrb	r3, [r7, #14]
 800ca08:	7b3a      	ldrb	r2, [r7, #12]
 800ca0a:	4911      	ldr	r1, [pc, #68]	; (800ca50 <UARTEx_SetNbDataToProcess+0x94>)
 800ca0c:	5c8a      	ldrb	r2, [r1, r2]
 800ca0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ca12:	7b3a      	ldrb	r2, [r7, #12]
 800ca14:	490f      	ldr	r1, [pc, #60]	; (800ca54 <UARTEx_SetNbDataToProcess+0x98>)
 800ca16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ca18:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca1c:	b29a      	uxth	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca24:	7bfb      	ldrb	r3, [r7, #15]
 800ca26:	7b7a      	ldrb	r2, [r7, #13]
 800ca28:	4909      	ldr	r1, [pc, #36]	; (800ca50 <UARTEx_SetNbDataToProcess+0x94>)
 800ca2a:	5c8a      	ldrb	r2, [r1, r2]
 800ca2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ca30:	7b7a      	ldrb	r2, [r7, #13]
 800ca32:	4908      	ldr	r1, [pc, #32]	; (800ca54 <UARTEx_SetNbDataToProcess+0x98>)
 800ca34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca36:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ca42:	bf00      	nop
 800ca44:	3714      	adds	r7, #20
 800ca46:	46bd      	mov	sp, r7
 800ca48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4c:	4770      	bx	lr
 800ca4e:	bf00      	nop
 800ca50:	08012aa0 	.word	0x08012aa0
 800ca54:	08012aa8 	.word	0x08012aa8

0800ca58 <msdi_openfn>:

/*
 * Open function
 */
LOCAL ER msdi_openfn( ID devid, UINT omode, T_MSDI *msdi )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	60f8      	str	r0, [r7, #12]
 800ca60:	60b9      	str	r1, [r7, #8]
 800ca62:	607a      	str	r2, [r7, #4]
	ER	err;

	if ( msdi->dmsdi.openfn == NULL ) return E_OK;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d101      	bne.n	800ca70 <msdi_openfn+0x18>
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	e011      	b.n	800ca94 <msdi_openfn+0x3c>

	Lock(&msdi->lock);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	3304      	adds	r3, #4
 800ca74:	4618      	mov	r0, r3
 800ca76:	f003 ff4f 	bl	8010918 <Lock>
	err = (*msdi->dmsdi.openfn)(devid, omode, msdi);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	68b9      	ldr	r1, [r7, #8]
 800ca82:	68f8      	ldr	r0, [r7, #12]
 800ca84:	4798      	blx	r3
 800ca86:	6178      	str	r0, [r7, #20]
	Unlock(&msdi->lock);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	3304      	adds	r3, #4
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f003 ff59 	bl	8010944 <Unlock>

	return err;
 800ca92:	697b      	ldr	r3, [r7, #20]
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3718      	adds	r7, #24
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <msdi_closefn>:

/*
 * Close cunction
 */
LOCAL ER msdi_closefn( ID devid, UINT option, T_MSDI *msdi )
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b086      	sub	sp, #24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
	ER	err;

	if ( msdi->dmsdi.closefn == NULL ) return E_OK;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800caac:	2b00      	cmp	r3, #0
 800caae:	d101      	bne.n	800cab4 <msdi_closefn+0x18>
 800cab0:	2300      	movs	r3, #0
 800cab2:	e011      	b.n	800cad8 <msdi_closefn+0x3c>

	Lock(&msdi->lock);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	3304      	adds	r3, #4
 800cab8:	4618      	mov	r0, r3
 800caba:	f003 ff2d 	bl	8010918 <Lock>
	err = (*msdi->dmsdi.closefn)(devid, option, msdi);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	68b9      	ldr	r1, [r7, #8]
 800cac6:	68f8      	ldr	r0, [r7, #12]
 800cac8:	4798      	blx	r3
 800caca:	6178      	str	r0, [r7, #20]
	Unlock(&msdi->lock);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	3304      	adds	r3, #4
 800cad0:	4618      	mov	r0, r3
 800cad2:	f003 ff37 	bl	8010944 <Unlock>

	return err;
 800cad6:	697b      	ldr	r3, [r7, #20]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3718      	adds	r7, #24
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <msdi_execfn>:

/*
 * Processing start function
 */
LOCAL ER msdi_execfn( T_DEVREQ *req, TMO tmout, T_MSDI *msdi )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b086      	sub	sp, #24
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
	INT	(*fp)( T_DEVREQ*, T_MSDI* );
	ER	err;

	fp = ( req->cmd == TDC_READ )? msdi->dmsdi.readfn: msdi->dmsdi.writefn;
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	7b1b      	ldrb	r3, [r3, #12]
 800caf0:	f003 030f 	and.w	r3, r3, #15
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d102      	bne.n	800cb00 <msdi_execfn+0x20>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cafe:	e001      	b.n	800cb04 <msdi_execfn+0x24>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb04:	617b      	str	r3, [r7, #20]
	if ( fp == NULL ) return E_NOSPT;
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d102      	bne.n	800cb12 <msdi_execfn+0x32>
 800cb0c:	f06f 0308 	mvn.w	r3, #8
 800cb10:	e01d      	b.n	800cb4e <msdi_execfn+0x6e>

	if ( req->start >= 0 && msdi->dmsdi.blksz <= 0) return E_NOSPT;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	db06      	blt.n	800cb28 <msdi_execfn+0x48>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	dc02      	bgt.n	800cb28 <msdi_execfn+0x48>
 800cb22:	f06f 0308 	mvn.w	r3, #8
 800cb26:	e012      	b.n	800cb4e <msdi_execfn+0x6e>

	/* I/O processing */
	Lock(&msdi->lock);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	3304      	adds	r3, #4
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f003 fef3 	bl	8010918 <Lock>
	err = (*fp)(req, msdi);
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	6879      	ldr	r1, [r7, #4]
 800cb36:	68f8      	ldr	r0, [r7, #12]
 800cb38:	4798      	blx	r3
 800cb3a:	6138      	str	r0, [r7, #16]
	Unlock(&msdi->lock);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	3304      	adds	r3, #4
 800cb40:	4618      	mov	r0, r3
 800cb42:	f003 feff 	bl	8010944 <Unlock>

	req->error = err;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	693a      	ldr	r2, [r7, #16]
 800cb4a:	621a      	str	r2, [r3, #32]
	return E_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3718      	adds	r7, #24
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <msdi_waitfn>:

/*
 * Wait-for-completion function
 */
LOCAL INT msdi_waitfn( T_DEVREQ *req, INT nreq, TMO tmout, T_MSDI *msdi )
{
 800cb56:	b480      	push	{r7}
 800cb58:	b085      	sub	sp, #20
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	60f8      	str	r0, [r7, #12]
 800cb5e:	60b9      	str	r1, [r7, #8]
 800cb60:	607a      	str	r2, [r7, #4]
 800cb62:	603b      	str	r3, [r7, #0]
	return 0;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3714      	adds	r7, #20
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr

0800cb72 <msdi_abortfn>:

/*
 * Abort processing function
 */
LOCAL ER msdi_abortfn( ID tskid, T_DEVREQ *req, INT nreq, T_MSDI *msdi )
{
 800cb72:	b480      	push	{r7}
 800cb74:	b085      	sub	sp, #20
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	60f8      	str	r0, [r7, #12]
 800cb7a:	60b9      	str	r1, [r7, #8]
 800cb7c:	607a      	str	r2, [r7, #4]
 800cb7e:	603b      	str	r3, [r7, #0]
	return E_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3714      	adds	r7, #20
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr

0800cb8e <msdi_eventfn>:

/*
 * Event function
 */
LOCAL INT msdi_eventfn( INT evttyp, void *evtinf, T_MSDI *msdi )
{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b086      	sub	sp, #24
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	60f8      	str	r0, [r7, #12]
 800cb96:	60b9      	str	r1, [r7, #8]
 800cb98:	607a      	str	r2, [r7, #4]
	INT	ret;

	if ( msdi->dmsdi.eventfn == NULL ) return E_OK;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d101      	bne.n	800cba6 <msdi_eventfn+0x18>
 800cba2:	2300      	movs	r3, #0
 800cba4:	e011      	b.n	800cbca <msdi_eventfn+0x3c>

	Lock(&msdi->lock);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	3304      	adds	r3, #4
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f003 feb4 	bl	8010918 <Lock>
	ret = (*msdi->dmsdi.eventfn)(evttyp, evtinf, msdi);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbb4:	687a      	ldr	r2, [r7, #4]
 800cbb6:	68b9      	ldr	r1, [r7, #8]
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	4798      	blx	r3
 800cbbc:	6178      	str	r0, [r7, #20]
	Unlock(&msdi->lock);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	3304      	adds	r3, #4
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	f003 febe 	bl	8010944 <Unlock>

	return ret;
 800cbc8:	697b      	ldr	r3, [r7, #20]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	3718      	adds	r7, #24
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
	...

0800cbd4 <msdi_def_dev>:

/*
 * SDI Device registration
 */
EXPORT ER msdi_def_dev( T_DMSDI *dmsdi, T_IDEV *idev, T_MSDI **p_msdi )
{
 800cbd4:	b5b0      	push	{r4, r5, r7, lr}
 800cbd6:	b092      	sub	sp, #72	; 0x48
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	607a      	str	r2, [r7, #4]
	T_MSDI	*msdi;
	T_DDEV	ddev;
	ER	err;

	/* Create "SDI"*/
	msdi = Kmalloc(sizeof(T_MSDI));
 800cbe0:	2044      	movs	r0, #68	; 0x44
 800cbe2:	f004 f839 	bl	8010c58 <Kmalloc>
 800cbe6:	6438      	str	r0, [r7, #64]	; 0x40
	if ( msdi == NULL ) {
 800cbe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d103      	bne.n	800cbf6 <msdi_def_dev+0x22>
		err = E_NOMEM;
 800cbee:	f06f 0320 	mvn.w	r3, #32
 800cbf2:	647b      	str	r3, [r7, #68]	; 0x44
		goto err_ret1;
 800cbf4:	e054      	b.n	800cca0 <msdi_def_dev+0xcc>
	}

	msdi->dmsdi = *dmsdi;		/* Structure Copy */
 800cbf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	f103 0410 	add.w	r4, r3, #16
 800cbfe:	4615      	mov	r5, r2
 800cc00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cc0c:	682b      	ldr	r3, [r5, #0]
 800cc0e:	6023      	str	r3, [r4, #0]

	/* Create the lock for exclusive access control */
	err = CreateLock(&msdi->lock, dmsdi->devnm);
 800cc10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc12:	1d1a      	adds	r2, r3, #4
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	3304      	adds	r3, #4
 800cc18:	4619      	mov	r1, r3
 800cc1a:	4610      	mov	r0, r2
 800cc1c:	f003 fea6 	bl	801096c <CreateLock>
 800cc20:	6478      	str	r0, [r7, #68]	; 0x44
	if ( err < E_OK ) goto err_ret2;
 800cc22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	db37      	blt.n	800cc98 <msdi_def_dev+0xc4>

	/* Device registration */
	ddev.exinf   = msdi;
 800cc28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc2a:	617b      	str	r3, [r7, #20]
	ddev.drvatr  = dmsdi->drvatr;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	691b      	ldr	r3, [r3, #16]
 800cc30:	61bb      	str	r3, [r7, #24]
	ddev.devatr  = dmsdi->devatr;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	695b      	ldr	r3, [r3, #20]
 800cc36:	61fb      	str	r3, [r7, #28]
	ddev.nsub    = dmsdi->nsub;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	699b      	ldr	r3, [r3, #24]
 800cc3c:	623b      	str	r3, [r7, #32]
	ddev.blksz   = dmsdi->blksz;
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	69db      	ldr	r3, [r3, #28]
 800cc42:	627b      	str	r3, [r7, #36]	; 0x24
	ddev.openfn  = (FP)msdi_openfn;
 800cc44:	4b19      	ldr	r3, [pc, #100]	; (800ccac <msdi_def_dev+0xd8>)
 800cc46:	62bb      	str	r3, [r7, #40]	; 0x28
	ddev.closefn = (FP)msdi_closefn;
 800cc48:	4b19      	ldr	r3, [pc, #100]	; (800ccb0 <msdi_def_dev+0xdc>)
 800cc4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	ddev.execfn  = (FP)msdi_execfn;
 800cc4c:	4b19      	ldr	r3, [pc, #100]	; (800ccb4 <msdi_def_dev+0xe0>)
 800cc4e:	633b      	str	r3, [r7, #48]	; 0x30
	ddev.waitfn  = (FP)msdi_waitfn;
 800cc50:	4b19      	ldr	r3, [pc, #100]	; (800ccb8 <msdi_def_dev+0xe4>)
 800cc52:	637b      	str	r3, [r7, #52]	; 0x34
	ddev.abortfn = (FP)msdi_abortfn;
 800cc54:	4b19      	ldr	r3, [pc, #100]	; (800ccbc <msdi_def_dev+0xe8>)
 800cc56:	63bb      	str	r3, [r7, #56]	; 0x38
	ddev.eventfn = (FP)msdi_eventfn;
 800cc58:	4b19      	ldr	r3, [pc, #100]	; (800ccc0 <msdi_def_dev+0xec>)
 800cc5a:	63fb      	str	r3, [r7, #60]	; 0x3c

	err = tk_def_dev(msdi->dmsdi.devnm, &ddev, idev);
 800cc5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc5e:	3314      	adds	r3, #20
 800cc60:	f107 0114 	add.w	r1, r7, #20
 800cc64:	68ba      	ldr	r2, [r7, #8]
 800cc66:	4618      	mov	r0, r3
 800cc68:	f000 f9c8 	bl	800cffc <tk_def_dev>
 800cc6c:	6478      	str	r0, [r7, #68]	; 0x44
	if ( err < E_OK )	goto err_ret3;
 800cc6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	db0a      	blt.n	800cc8a <msdi_def_dev+0xb6>
	
	msdi->devid = (ID)err;
 800cc74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc78:	601a      	str	r2, [r3, #0]
	if(p_msdi != NULL) {
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d002      	beq.n	800cc86 <msdi_def_dev+0xb2>
		*p_msdi = msdi;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc84:	601a      	str	r2, [r3, #0]
	}

	return E_OK;
 800cc86:	2300      	movs	r3, #0
 800cc88:	e00b      	b.n	800cca2 <msdi_def_dev+0xce>
	if ( err < E_OK )	goto err_ret3;
 800cc8a:	bf00      	nop

err_ret3:
	DeleteLock(&msdi->lock);
 800cc8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc8e:	3304      	adds	r3, #4
 800cc90:	4618      	mov	r0, r3
 800cc92:	f003 fea9 	bl	80109e8 <DeleteLock>
 800cc96:	e000      	b.n	800cc9a <msdi_def_dev+0xc6>
	if ( err < E_OK ) goto err_ret2;
 800cc98:	bf00      	nop
err_ret2:
	Kfree(msdi);
 800cc9a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800cc9c:	f003 ffe9 	bl	8010c72 <Kfree>
err_ret1:
	return err;
 800cca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3748      	adds	r7, #72	; 0x48
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bdb0      	pop	{r4, r5, r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	0800ca59 	.word	0x0800ca59
 800ccb0:	0800ca9d 	.word	0x0800ca9d
 800ccb4:	0800cae1 	.word	0x0800cae1
 800ccb8:	0800cb57 	.word	0x0800cb57
 800ccbc:	0800cb73 	.word	0x0800cb73
 800ccc0:	0800cb8f 	.word	0x0800cb8f

0800ccc4 <start_system>:
 * Start System
 *	Start each subsystem and each device driver.
 *	Return from function after starting.
 */
LOCAL ER start_system( void )
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b082      	sub	sp, #8
 800ccc8:	af00      	add	r7, sp, #0
	ER	ercd;

#if USE_DEVICE
	/* Initialize Device manager */
	ercd = knl_initialize_devmgr();
 800ccca:	f000 fac3 	bl	800d254 <knl_initialize_devmgr>
 800ccce:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) return ercd;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	da01      	bge.n	800ccda <start_system+0x16>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	e003      	b.n	800cce2 <start_system+0x1e>
#endif

	/* Start system dependent sequence */
	ercd = knl_start_device();
 800ccda:	f005 fbc3 	bl	8012464 <knl_start_device>
 800ccde:	6078      	str	r0, [r7, #4]

	return ercd;
 800cce0:	687b      	ldr	r3, [r7, #4]
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3708      	adds	r7, #8
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
	...

0800ccec <shutdown_system>:
 *		-3 : Normal re-start		(Boot -> Start)
 *
 *	fin are not always supported.
 */
LOCAL void shutdown_system( INT fin )
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b082      	sub	sp, #8
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
#if USE_SHUTDOWN
	/* Platform dependent finalize sequence */
	knl_finish_device();
 800ccf4:	f005 fbfa 	bl	80124ec <knl_finish_device>

	/* Shutdown message output */
	if ( fin >= 0 ) {
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	db02      	blt.n	800cd04 <shutdown_system+0x18>
		SYSTEM_MESSAGE("\n<< SYSTEM SHUTDOWN >>\n");
 800ccfe:	4807      	ldr	r0, [pc, #28]	; (800cd1c <shutdown_system+0x30>)
 800cd00:	f003 ffec 	bl	8010cdc <tm_putstring>
	}

	if ( fin < 0 ) {
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	da02      	bge.n	800cd10 <shutdown_system+0x24>
		/* Re-start sequence (platform dependent) */
		knl_restart_hw(fin);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f005 fc02 	bl	8012514 <knl_restart_hw>
	}

	knl_tkernel_exit();		/* Stop system */
 800cd10:	f000 f894 	bl	800ce3c <knl_tkernel_exit>
	DISABLE_INTERRUPT;
	for(;;) {
		;
	}
#endif /* USE_SHUTDOWN */
}
 800cd14:	bf00      	nop
 800cd16:	3708      	adds	r7, #8
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	080127f4 	.word	0x080127f4

0800cd20 <init_task_main>:

/*
 * Initial task main
 */
LOCAL void init_task_main(void)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af00      	add	r7, sp, #0
	INT	fin = 1;
 800cd26:	2301      	movs	r3, #1
 800cd28:	607b      	str	r3, [r7, #4]
	ER	ercd;

	ercd = start_system();		/* Start Sub-system & device driver */
 800cd2a:	f7ff ffcb 	bl	800ccc4 <start_system>
 800cd2e:	6038      	str	r0, [r7, #0]
	if(ercd  >= E_OK) {
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	db0b      	blt.n	800cd4e <init_task_main+0x2e>

#if (USE_SYSTEM_MESSAGE && USE_TMONITOR)
		tm_printf((UB*)"\n\nmicroT-Kernel Version %x.%02x\n\n", VER_MAJOR, VER_MINOR);
 800cd36:	2200      	movs	r2, #0
 800cd38:	2103      	movs	r1, #3
 800cd3a:	480a      	ldr	r0, [pc, #40]	; (800cd64 <init_task_main+0x44>)
 800cd3c:	f004 fb6c 	bl	8011418 <tm_printf>

#if USE_USERINIT
		/* Perform user defined initialization sequence */
		fin = (*(MAIN_FP)RI_USERINIT)(0, NULL);
#endif
		if ( fin > 0 ) {
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	dd06      	ble.n	800cd54 <init_task_main+0x34>
			fin = usermain();	/* User Main Program */
 800cd46:	f7f3 fdb9 	bl	80008bc <usermain>
 800cd4a:	6078      	str	r0, [r7, #4]
 800cd4c:	e002      	b.n	800cd54 <init_task_main+0x34>
		/* Perform user defined finalization sequence */
		(*(MAIN_FP)RI_USERINIT)(-1, NULL);
#endif

	} else {
		SYSTEM_MESSAGE("!ERROR! Init Task start\n");	/* Start message */
 800cd4e:	4806      	ldr	r0, [pc, #24]	; (800cd68 <init_task_main+0x48>)
 800cd50:	f003 ffc4 	bl	8010cdc <tm_putstring>
	}

	shutdown_system(fin);	/* Never return */
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f7ff ffc9 	bl	800ccec <shutdown_system>
}
 800cd5a:	bf00      	nop
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	0801280c 	.word	0x0801280c
 800cd68:	08012830 	.word	0x08012830

0800cd6c <knl_main>:
#ifndef ADD_PREFIX_KNL_TO_GLOBAL_NAME
EXPORT INT main( void )
#else
EXPORT INT knl_main( void )
#endif	/* ADD_PREFIX_KNL_TO_GLOBAL_NAME */
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
	ER	ercd;

	DISABLE_INTERRUPT;
 800cd72:	f005 fc24 	bl	80125be <disint>

#if USE_TMONITOR
	/* Initialize T-Monitor Compatible Library */
	libtm_init();
 800cd76:	f003 ff87 	bl	8010c88 <libtm_init>
#endif

#if USE_IMALLOC
	/* Initialize Internal memory allocation (Imalloc) */
	ercd = knl_init_Imalloc();
 800cd7a:	f001 fe21 	bl	800e9c0 <knl_init_Imalloc>
 800cd7e:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	da03      	bge.n	800cd8e <knl_main+0x22>
		SYSTEM_MESSAGE("!ERROR! init_Imalloc\n");
 800cd86:	4825      	ldr	r0, [pc, #148]	; (800ce1c <knl_main+0xb0>)
 800cd88:	f003 ffa8 	bl	8010cdc <tm_putstring>
		goto err_ret;
 800cd8c:	e044      	b.n	800ce18 <knl_main+0xac>
	}
#endif /* USE_IMALLOC */

	/* Initialize Device before micro T-Kernel starts */
	ercd = knl_init_device();
 800cd8e:	f005 fb61 	bl	8012454 <knl_init_device>
 800cd92:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	da03      	bge.n	800cda2 <knl_main+0x36>
		SYSTEM_MESSAGE("!ERROR! init_device\n");
 800cd9a:	4821      	ldr	r0, [pc, #132]	; (800ce20 <knl_main+0xb4>)
 800cd9c:	f003 ff9e 	bl	8010cdc <tm_putstring>
		goto err_ret;
 800cda0:	e03a      	b.n	800ce18 <knl_main+0xac>
	}

	/* Interrupt initialize */
	ercd = knl_init_interrupt();
 800cda2:	f004 fbab 	bl	80114fc <knl_init_interrupt>
 800cda6:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	da03      	bge.n	800cdb6 <knl_main+0x4a>
		SYSTEM_MESSAGE("!ERROR! init_initialize\n");
 800cdae:	481d      	ldr	r0, [pc, #116]	; (800ce24 <knl_main+0xb8>)
 800cdb0:	f003 ff94 	bl	8010cdc <tm_putstring>
		goto err_ret;
 800cdb4:	e030      	b.n	800ce18 <knl_main+0xac>
	}

	/* Initialize Kernel-objects  */
	ercd = knl_init_object();
 800cdb6:	f003 faad 	bl	8010314 <knl_init_object>
 800cdba:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	da03      	bge.n	800cdca <knl_main+0x5e>
		SYSTEM_MESSAGE("!ERROR! kernel object initialize\n");
 800cdc2:	4819      	ldr	r0, [pc, #100]	; (800ce28 <knl_main+0xbc>)
 800cdc4:	f003 ff8a 	bl	8010cdc <tm_putstring>
		goto err_ret1;
 800cdc8:	e024      	b.n	800ce14 <knl_main+0xa8>
	}

	/* Start System Timer */
	ercd = knl_timer_startup();
 800cdca:	f003 f9ab 	bl	8010124 <knl_timer_startup>
 800cdce:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	da03      	bge.n	800cdde <knl_main+0x72>
		SYSTEM_MESSAGE("!ERROR! System timer startup\n");
 800cdd6:	4815      	ldr	r0, [pc, #84]	; (800ce2c <knl_main+0xc0>)
 800cdd8:	f003 ff80 	bl	8010cdc <tm_putstring>
		goto err_ret1;
 800cddc:	e01a      	b.n	800ce14 <knl_main+0xa8>
	}

	/* Create & start initial task */
	ercd = tk_cre_tsk((CONST T_CTSK *)&knl_init_ctsk);
 800cdde:	4814      	ldr	r0, [pc, #80]	; (800ce30 <knl_main+0xc4>)
 800cde0:	f002 fdce 	bl	800f980 <tk_cre_tsk>
 800cde4:	6078      	str	r0, [r7, #4]
	if ( ercd >= E_OK ) {
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	db0e      	blt.n	800ce0a <knl_main+0x9e>
		ercd = tk_sta_tsk((ID)ercd, 0);
 800cdec:	2100      	movs	r1, #0
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f002 fe74 	bl	800fadc <tk_sta_tsk>
 800cdf4:	6078      	str	r0, [r7, #4]
		if ( ercd >= E_OK ) {
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	db02      	blt.n	800ce02 <knl_main+0x96>
			knl_force_dispatch();
 800cdfc:	f004 fb34 	bl	8011468 <knl_force_dispatch>
 800ce00:	e006      	b.n	800ce10 <knl_main+0xa4>
			/**** Start Initial Task. ****/
			/**** No return ****/
		} else {
			SYSTEM_MESSAGE("!ERROR! Initial Task can not start\n");
 800ce02:	480c      	ldr	r0, [pc, #48]	; (800ce34 <knl_main+0xc8>)
 800ce04:	f003 ff6a 	bl	8010cdc <tm_putstring>
 800ce08:	e002      	b.n	800ce10 <knl_main+0xa4>
		}
	} else {
		SYSTEM_MESSAGE("!ERROR! Initial Task can not creat\n");
 800ce0a:	480b      	ldr	r0, [pc, #44]	; (800ce38 <knl_main+0xcc>)
 800ce0c:	f003 ff66 	bl	8010cdc <tm_putstring>
	}

	/* After this, Error handling */

#if USE_SHUTDOWN
	knl_timer_shutdown();	/* Stop System timer */
 800ce10:	f003 f9a6 	bl	8010160 <knl_timer_shutdown>
err_ret1:
	knl_shutdown_hw();	/* Hardware-dependent Finalization */
 800ce14:	f005 fb79 	bl	801250a <knl_shutdown_hw>
#else
err_ret1:
#endif /* USE_SHUTDOWN */

err_ret:
	while(1);
 800ce18:	e7fe      	b.n	800ce18 <knl_main+0xac>
 800ce1a:	bf00      	nop
 800ce1c:	0801284c 	.word	0x0801284c
 800ce20:	08012864 	.word	0x08012864
 800ce24:	0801287c 	.word	0x0801287c
 800ce28:	08012898 	.word	0x08012898
 800ce2c:	080128bc 	.word	0x080128bc
 800ce30:	08012ab0 	.word	0x08012ab0
 800ce34:	080128dc 	.word	0x080128dc
 800ce38:	08012900 	.word	0x08012900

0800ce3c <knl_tkernel_exit>:
/*
 * Exit micro T-Kernel from Initial Task.
 */
#if USE_SHUTDOWN
EXPORT void knl_tkernel_exit( void )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	af00      	add	r7, sp, #0
	knl_timer_shutdown();	/* Stop System timer */
 800ce40:	f003 f98e 	bl	8010160 <knl_timer_shutdown>
	knl_shutdown_hw();	/* Hardware-dependent Finalization */
 800ce44:	f005 fb61 	bl	801250a <knl_shutdown_hw>
	/**** No return ****/

	while(1);
 800ce48:	e7fe      	b.n	800ce48 <knl_tkernel_exit+0xc>

0800ce4a <QueInit>:

/*
 * Queue initialization 
 */
Inline void QueInit( QUEUE *que )
{
 800ce4a:	b480      	push	{r7}
 800ce4c:	b083      	sub	sp, #12
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	605a      	str	r2, [r3, #4]
}
 800ce5e:	bf00      	nop
 800ce60:	370c      	adds	r7, #12
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <isQueEmpty>:

/*
 * TRUE if the queue is empty 
 */
Inline BOOL isQueEmpty( QUEUE *que )
{
 800ce6a:	b480      	push	{r7}
 800ce6c:	b083      	sub	sp, #12
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	bf0c      	ite	eq
 800ce7c:	2301      	moveq	r3, #1
 800ce7e:	2300      	movne	r3, #0
 800ce80:	b2db      	uxtb	r3, r3
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	370c      	adds	r7, #12
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr

0800ce8e <QueInsert>:
/*
 * Insert in queue 
 *	Inserts entry directly prior to que 
 */
Inline void QueInsert( QUEUE *entry, QUEUE *que )
{
 800ce8e:	b480      	push	{r7}
 800ce90:	b083      	sub	sp, #12
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	685a      	ldr	r2, [r3, #4]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	683a      	ldr	r2, [r7, #0]
 800cea4:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	605a      	str	r2, [r3, #4]
}
 800ceb4:	bf00      	nop
 800ceb6:	370c      	adds	r7, #12
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <QueRemove>:
 * Delete from queue 
 *	Deletes entry from queue 
 *	No action is performed if entry is empty. 
 */
Inline void QueRemove( QUEUE *entry )
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d009      	beq.n	800cee6 <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	6812      	ldr	r2, [r2, #0]
 800ceda:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	687a      	ldr	r2, [r7, #4]
 800cee2:	6852      	ldr	r2, [r2, #4]
 800cee4:	605a      	str	r2, [r3, #4]
	}
}
 800cee6:	bf00      	nop
 800cee8:	370c      	adds	r7, #12
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr

0800cef2 <QueRemoveNext>:
 *	Deletes the entry directly after que from the queue,
 *	and returns the deleted entry.
 *	Returns NULL if que is empty.
 */
Inline QUEUE* QueRemoveNext( QUEUE *que )
{
 800cef2:	b480      	push	{r7}
 800cef4:	b085      	sub	sp, #20
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
	QUEUE	*entry;

	if ( que->next == que ) {
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	687a      	ldr	r2, [r7, #4]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d101      	bne.n	800cf08 <QueRemoveNext+0x16>
		return NULL;
 800cf04:	2300      	movs	r3, #0
 800cf06:	e00b      	b.n	800cf20 <QueRemoveNext+0x2e>
	}

	entry = que->next;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	605a      	str	r2, [r3, #4]

	return entry;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3714      	adds	r7, #20
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <knl_searchDevCB>:

/*
 * Search registration device
 */
EXPORT DevCB* knl_searchDevCB( CONST UB *devnm )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
	QUEUE	*q;
	DevCB	*devcb;

	for ( q = knl_UsedDevCB.next; q != &knl_UsedDevCB; q = q->next ) {
 800cf34:	4b11      	ldr	r3, [pc, #68]	; (800cf7c <knl_searchDevCB+0x50>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	60fb      	str	r3, [r7, #12]
 800cf3a:	e015      	b.n	800cf68 <knl_searchDevCB+0x3c>
		devcb = (DevCB*)q;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	60bb      	str	r3, [r7, #8]

		if ( devcb->devnm[0] == devnm[0] && knl_strcmp((char*)devcb->devnm, (char*)devnm) == 0 ) {
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	7a1a      	ldrb	r2, [r3, #8]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d10a      	bne.n	800cf62 <knl_searchDevCB+0x36>
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	3308      	adds	r3, #8
 800cf50:	6879      	ldr	r1, [r7, #4]
 800cf52:	4618      	mov	r0, r3
 800cf54:	f003 fc91 	bl	801087a <knl_strcmp>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d101      	bne.n	800cf62 <knl_searchDevCB+0x36>
			return devcb; /* Found */
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	e007      	b.n	800cf72 <knl_searchDevCB+0x46>
	for ( q = knl_UsedDevCB.next; q != &knl_UsedDevCB; q = q->next ) {
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	60fb      	str	r3, [r7, #12]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	4a04      	ldr	r2, [pc, #16]	; (800cf7c <knl_searchDevCB+0x50>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d1e5      	bne.n	800cf3c <knl_searchDevCB+0x10>
		}
	}

	return NULL;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	2400138c 	.word	0x2400138c

0800cf80 <newDevCB>:

/*
 * Get DevCB for new registration
 */
LOCAL DevCB* newDevCB( CONST UB *devnm )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b084      	sub	sp, #16
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
	DevCB	*devcb;

	devcb = (DevCB*)QueRemoveNext(&knl_FreeDevCB);
 800cf88:	480f      	ldr	r0, [pc, #60]	; (800cfc8 <newDevCB+0x48>)
 800cf8a:	f7ff ffb2 	bl	800cef2 <QueRemoveNext>
 800cf8e:	60f8      	str	r0, [r7, #12]
	if ( devcb == NULL ) {
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d101      	bne.n	800cf9a <newDevCB+0x1a>
		return NULL; /* No space */
 800cf96:	2300      	movs	r3, #0
 800cf98:	e011      	b.n	800cfbe <newDevCB+0x3e>
	}

	knl_strncpy((char*)devcb->devnm, (char*)devnm, L_DEVNM+1);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	3308      	adds	r3, #8
 800cf9e:	2209      	movs	r2, #9
 800cfa0:	6879      	ldr	r1, [r7, #4]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f003 fc40 	bl	8010828 <knl_strncpy>
	QueInit(&devcb->openq);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	3340      	adds	r3, #64	; 0x40
 800cfac:	4618      	mov	r0, r3
 800cfae:	f7ff ff4c 	bl	800ce4a <QueInit>

	QueInsert(&devcb->q, &knl_UsedDevCB);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	4905      	ldr	r1, [pc, #20]	; (800cfcc <newDevCB+0x4c>)
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	f7ff ff69 	bl	800ce8e <QueInsert>

	return devcb;
 800cfbc:	68fb      	ldr	r3, [r7, #12]
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	24001394 	.word	0x24001394
 800cfcc:	2400138c 	.word	0x2400138c

0800cfd0 <delDevCB>:

/*
 * Free DevCB
 */
LOCAL void delDevCB( DevCB *devcb )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
	QueRemove(&devcb->q);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7ff ff70 	bl	800cec0 <QueRemove>
	QueInsert(&devcb->q, &knl_FreeDevCB);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	4905      	ldr	r1, [pc, #20]	; (800cff8 <delDevCB+0x28>)
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	f7ff ff52 	bl	800ce8e <QueInsert>
	devcb->devnm[0] = '\0';
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2200      	movs	r2, #0
 800cfee:	721a      	strb	r2, [r3, #8]
}
 800cff0:	bf00      	nop
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}
 800cff8:	24001394 	.word	0x24001394

0800cffc <tk_def_dev>:

/*
 * Device registration
 */
SYSCALL ID tk_def_dev( CONST UB *devnm, CONST T_DDEV *pk_ddev, T_IDEV *pk_idev )
{
 800cffc:	b5b0      	push	{r4, r5, r7, lr}
 800cffe:	b088      	sub	sp, #32
 800d000:	af00      	add	r7, sp, #0
 800d002:	60f8      	str	r0, [r7, #12]
 800d004:	60b9      	str	r1, [r7, #8]
 800d006:	607a      	str	r2, [r7, #4]
	DevCB	*devcb;
	INT	len;
	ER	ercd;

	LockREG();
 800d008:	2101      	movs	r1, #1
 800d00a:	484f      	ldr	r0, [pc, #316]	; (800d148 <tk_def_dev+0x14c>)
 800d00c:	f003 fd95 	bl	8010b3a <MLock>

	len = knl_strlen((char*)devnm);
 800d010:	68f8      	ldr	r0, [r7, #12]
 800d012:	f003 fbe1 	bl	80107d8 <knl_strlen>
 800d016:	61b8      	str	r0, [r7, #24]
	if ( len == 0 || len > L_DEVNM ) {
 800d018:	69bb      	ldr	r3, [r7, #24]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d002      	beq.n	800d024 <tk_def_dev+0x28>
 800d01e:	69bb      	ldr	r3, [r7, #24]
 800d020:	2b08      	cmp	r3, #8
 800d022:	dd03      	ble.n	800d02c <tk_def_dev+0x30>
		ercd = E_PAR;
 800d024:	f06f 0310 	mvn.w	r3, #16
 800d028:	617b      	str	r3, [r7, #20]
		goto err_ret1;
 800d02a:	e084      	b.n	800d136 <tk_def_dev+0x13a>
	}

	if ( pk_ddev != NULL ) {
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d027      	beq.n	800d082 <tk_def_dev+0x86>
		if ( pk_ddev->nsub < 0 || pk_ddev->nsub > MAX_UNIT ) {
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	68db      	ldr	r3, [r3, #12]
 800d036:	2b00      	cmp	r3, #0
 800d038:	db03      	blt.n	800d042 <tk_def_dev+0x46>
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	68db      	ldr	r3, [r3, #12]
 800d03e:	2bff      	cmp	r3, #255	; 0xff
 800d040:	dd03      	ble.n	800d04a <tk_def_dev+0x4e>
			ercd = E_PAR;
 800d042:	f06f 0310 	mvn.w	r3, #16
 800d046:	617b      	str	r3, [r7, #20]
			goto err_ret1;
 800d048:	e075      	b.n	800d136 <tk_def_dev+0x13a>
		}

		/* Make sure that the length of the logical device name
		   does not exceed the character limit */
		if ( pk_ddev->nsub > 0   ) {
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	68db      	ldr	r3, [r3, #12]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	dd02      	ble.n	800d058 <tk_def_dev+0x5c>
			++len;
 800d052:	69bb      	ldr	r3, [r7, #24]
 800d054:	3301      	adds	r3, #1
 800d056:	61bb      	str	r3, [r7, #24]
		}
		if ( pk_ddev->nsub > 10  ) {
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	2b0a      	cmp	r3, #10
 800d05e:	dd02      	ble.n	800d066 <tk_def_dev+0x6a>
			++len;
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	3301      	adds	r3, #1
 800d064:	61bb      	str	r3, [r7, #24]
		}
		if ( pk_ddev->nsub > 100 ) {
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	68db      	ldr	r3, [r3, #12]
 800d06a:	2b64      	cmp	r3, #100	; 0x64
 800d06c:	dd02      	ble.n	800d074 <tk_def_dev+0x78>
			++len;
 800d06e:	69bb      	ldr	r3, [r7, #24]
 800d070:	3301      	adds	r3, #1
 800d072:	61bb      	str	r3, [r7, #24]
		}
		if ( len > L_DEVNM ) {
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	2b08      	cmp	r3, #8
 800d078:	dd03      	ble.n	800d082 <tk_def_dev+0x86>
			ercd = E_PAR;
 800d07a:	f06f 0310 	mvn.w	r3, #16
 800d07e:	617b      	str	r3, [r7, #20]
			goto err_ret1;
 800d080:	e059      	b.n	800d136 <tk_def_dev+0x13a>
		}
	}

	LockDM();
 800d082:	2100      	movs	r1, #0
 800d084:	4830      	ldr	r0, [pc, #192]	; (800d148 <tk_def_dev+0x14c>)
 800d086:	f003 fd58 	bl	8010b3a <MLock>

	/* Search whether 'devnm' device is registered */
	devcb = knl_searchDevCB(devnm);
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f7ff ff4e 	bl	800cf2c <knl_searchDevCB>
 800d090:	61f8      	str	r0, [r7, #28]
	if ( devcb == NULL ) {
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d111      	bne.n	800d0bc <tk_def_dev+0xc0>
		if ( pk_ddev == NULL ) {
 800d098:	68bb      	ldr	r3, [r7, #8]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d103      	bne.n	800d0a6 <tk_def_dev+0xaa>
			ercd = E_NOEXS;
 800d09e:	f06f 0329 	mvn.w	r3, #41	; 0x29
 800d0a2:	617b      	str	r3, [r7, #20]
			goto err_ret2;
 800d0a4:	e043      	b.n	800d12e <tk_def_dev+0x132>
		}

		/* Get 'devcb' for new registration because it is not
		   registered */
		devcb = newDevCB(devnm);
 800d0a6:	68f8      	ldr	r0, [r7, #12]
 800d0a8:	f7ff ff6a 	bl	800cf80 <newDevCB>
 800d0ac:	61f8      	str	r0, [r7, #28]
		if ( devcb == NULL ) {
 800d0ae:	69fb      	ldr	r3, [r7, #28]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d103      	bne.n	800d0bc <tk_def_dev+0xc0>
			ercd = E_LIMIT;
 800d0b4:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800d0b8:	617b      	str	r3, [r7, #20]
			goto err_ret2;
 800d0ba:	e038      	b.n	800d12e <tk_def_dev+0x132>
		}
	}

	if ( pk_ddev != NULL ) {
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d014      	beq.n	800d0ec <tk_def_dev+0xf0>
		/* Set/update device registration information */
		devcb->ddev = *pk_ddev;
 800d0c2:	69fb      	ldr	r3, [r7, #28]
 800d0c4:	68ba      	ldr	r2, [r7, #8]
 800d0c6:	f103 0414 	add.w	r4, r3, #20
 800d0ca:	4615      	mov	r5, r2
 800d0cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d0d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d0d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d0d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		if ( pk_idev != NULL ) {
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d013      	beq.n	800d10a <tk_def_dev+0x10e>
			/* Device initial setting information */
			*pk_idev = knl_DefaultIDev;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	4a19      	ldr	r2, [pc, #100]	; (800d14c <tk_def_dev+0x150>)
 800d0e6:	6812      	ldr	r2, [r2, #0]
 800d0e8:	601a      	str	r2, [r3, #0]
 800d0ea:	e00e      	b.n	800d10a <tk_def_dev+0x10e>
		}
	} else {
		if ( !isQueEmpty(&devcb->openq) ) {
 800d0ec:	69fb      	ldr	r3, [r7, #28]
 800d0ee:	3340      	adds	r3, #64	; 0x40
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7ff feba 	bl	800ce6a <isQueEmpty>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d103      	bne.n	800d104 <tk_def_dev+0x108>
			/* In use (open) */
			ercd = E_BUSY;
 800d0fc:	f06f 0340 	mvn.w	r3, #64	; 0x40
 800d100:	617b      	str	r3, [r7, #20]
			goto err_ret2;
 800d102:	e014      	b.n	800d12e <tk_def_dev+0x132>
		}

		/* Device unregistration */
		delDevCB(devcb);
 800d104:	69f8      	ldr	r0, [r7, #28]
 800d106:	f7ff ff63 	bl	800cfd0 <delDevCB>
	}

	UnlockDM();
 800d10a:	2100      	movs	r1, #0
 800d10c:	480e      	ldr	r0, [pc, #56]	; (800d148 <tk_def_dev+0x14c>)
 800d10e:	f003 fd24 	bl	8010b5a <MUnlock>
	UnlockREG();
 800d112:	2101      	movs	r1, #1
 800d114:	480c      	ldr	r0, [pc, #48]	; (800d148 <tk_def_dev+0x14c>)
 800d116:	f003 fd20 	bl	8010b5a <MUnlock>

	return DID(devcb);
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	4a0c      	ldr	r2, [pc, #48]	; (800d150 <tk_def_dev+0x154>)
 800d11e:	1a9b      	subs	r3, r3, r2
 800d120:	10db      	asrs	r3, r3, #3
 800d122:	4a0c      	ldr	r2, [pc, #48]	; (800d154 <tk_def_dev+0x158>)
 800d124:	fb02 f303 	mul.w	r3, r2, r3
 800d128:	3301      	adds	r3, #1
 800d12a:	021b      	lsls	r3, r3, #8
 800d12c:	e008      	b.n	800d140 <tk_def_dev+0x144>

err_ret2:
	UnlockDM();
 800d12e:	2100      	movs	r1, #0
 800d130:	4805      	ldr	r0, [pc, #20]	; (800d148 <tk_def_dev+0x14c>)
 800d132:	f003 fd12 	bl	8010b5a <MUnlock>
err_ret1:
	UnlockREG();
 800d136:	2101      	movs	r1, #1
 800d138:	4803      	ldr	r0, [pc, #12]	; (800d148 <tk_def_dev+0x14c>)
 800d13a:	f003 fd0e 	bl	8010b5a <MUnlock>
	return ercd;
 800d13e:	697b      	ldr	r3, [r7, #20]
}
 800d140:	4618      	mov	r0, r3
 800d142:	3720      	adds	r7, #32
 800d144:	46bd      	mov	sp, r7
 800d146:	bdb0      	pop	{r4, r5, r7, pc}
 800d148:	24001138 	.word	0x24001138
 800d14c:	24001148 	.word	0x24001148
 800d150:	2400114c 	.word	0x2400114c
 800d154:	38e38e39 	.word	0x38e38e39

0800d158 <knl_phydevnm>:
 *	Get the subunit number (return value) 
 *	from the logical device name (ldevnm) and the physical
 *	device name (pdevnm).
 */
EXPORT INT knl_phydevnm( UB *pdevnm, CONST UB *ldevnm )
{
 800d158:	b480      	push	{r7}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
	UB	c;
	INT	unitno;

	while ( (c = *ldevnm) != '\0' ) {
 800d162:	e00d      	b.n	800d180 <knl_phydevnm+0x28>
		if ( c >= '0' && c <= '9' ) {
 800d164:	7afb      	ldrb	r3, [r7, #11]
 800d166:	2b2f      	cmp	r3, #47	; 0x2f
 800d168:	d902      	bls.n	800d170 <knl_phydevnm+0x18>
 800d16a:	7afb      	ldrb	r3, [r7, #11]
 800d16c:	2b39      	cmp	r3, #57	; 0x39
 800d16e:	d90e      	bls.n	800d18e <knl_phydevnm+0x36>
			break;
		}
		*pdevnm++ = c;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	1c5a      	adds	r2, r3, #1
 800d174:	607a      	str	r2, [r7, #4]
 800d176:	7afa      	ldrb	r2, [r7, #11]
 800d178:	701a      	strb	r2, [r3, #0]
		ldevnm++;
 800d17a:	683b      	ldr	r3, [r7, #0]
 800d17c:	3301      	adds	r3, #1
 800d17e:	603b      	str	r3, [r7, #0]
	while ( (c = *ldevnm) != '\0' ) {
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	781b      	ldrb	r3, [r3, #0]
 800d184:	72fb      	strb	r3, [r7, #11]
 800d186:	7afb      	ldrb	r3, [r7, #11]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1eb      	bne.n	800d164 <knl_phydevnm+0xc>
 800d18c:	e000      	b.n	800d190 <knl_phydevnm+0x38>
			break;
 800d18e:	bf00      	nop
	}
	*pdevnm = '\0';
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2200      	movs	r2, #0
 800d194:	701a      	strb	r2, [r3, #0]

	unitno = 0;
 800d196:	2300      	movs	r3, #0
 800d198:	60fb      	str	r3, [r7, #12]
	if (c != '\0') {
 800d19a:	7afb      	ldrb	r3, [r7, #11]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d016      	beq.n	800d1ce <knl_phydevnm+0x76>
		while ( (c = *ldevnm) != '\0' ) {
 800d1a0:	e00c      	b.n	800d1bc <knl_phydevnm+0x64>
			unitno = unitno * 10 + (c - '0');
 800d1a2:	68fa      	ldr	r2, [r7, #12]
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	009b      	lsls	r3, r3, #2
 800d1a8:	4413      	add	r3, r2
 800d1aa:	005b      	lsls	r3, r3, #1
 800d1ac:	461a      	mov	r2, r3
 800d1ae:	7afb      	ldrb	r3, [r7, #11]
 800d1b0:	3b30      	subs	r3, #48	; 0x30
 800d1b2:	4413      	add	r3, r2
 800d1b4:	60fb      	str	r3, [r7, #12]
			ldevnm++;
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	3301      	adds	r3, #1
 800d1ba:	603b      	str	r3, [r7, #0]
		while ( (c = *ldevnm) != '\0' ) {
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	781b      	ldrb	r3, [r3, #0]
 800d1c0:	72fb      	strb	r3, [r7, #11]
 800d1c2:	7afb      	ldrb	r3, [r7, #11]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d1ec      	bne.n	800d1a2 <knl_phydevnm+0x4a>
		}
		++unitno;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	60fb      	str	r3, [r7, #12]
	}

	return unitno;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3714      	adds	r7, #20
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <initDevCB>:

/*
 * Initialization of device registration information table
 */
LOCAL ER initDevCB( void )
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
	DevCB	*devcb;
	INT	num = MAX_REGDEV;
 800d1e2:	2308      	movs	r3, #8
 800d1e4:	603b      	str	r3, [r7, #0]

	QueInit(&knl_UsedDevCB);
 800d1e6:	480f      	ldr	r0, [pc, #60]	; (800d224 <initDevCB+0x48>)
 800d1e8:	f7ff fe2f 	bl	800ce4a <QueInit>
	QueInit(&knl_FreeDevCB);
 800d1ec:	480e      	ldr	r0, [pc, #56]	; (800d228 <initDevCB+0x4c>)
 800d1ee:	f7ff fe2c 	bl	800ce4a <QueInit>

	devcb = knl_DevCBtbl;
 800d1f2:	4b0e      	ldr	r3, [pc, #56]	; (800d22c <initDevCB+0x50>)
 800d1f4:	607b      	str	r3, [r7, #4]
	while ( num-- > 0 ) {
 800d1f6:	e00a      	b.n	800d20e <initDevCB+0x32>
		QueInsert(&devcb->q, &knl_FreeDevCB);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	490b      	ldr	r1, [pc, #44]	; (800d228 <initDevCB+0x4c>)
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7ff fe46 	bl	800ce8e <QueInsert>
		devcb->devnm[0] = '\0';
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2200      	movs	r2, #0
 800d206:	721a      	strb	r2, [r3, #8]
		devcb++;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	3348      	adds	r3, #72	; 0x48
 800d20c:	607b      	str	r3, [r7, #4]
	while ( num-- > 0 ) {
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	1e5a      	subs	r2, r3, #1
 800d212:	603a      	str	r2, [r7, #0]
 800d214:	2b00      	cmp	r3, #0
 800d216:	dcef      	bgt.n	800d1f8 <initDevCB+0x1c>
	}

	return E_OK;
 800d218:	2300      	movs	r3, #0
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3708      	adds	r7, #8
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	2400138c 	.word	0x2400138c
 800d228:	24001394 	.word	0x24001394
 800d22c:	2400114c 	.word	0x2400114c

0800d230 <initIDev>:

/*
 * Initialization of device initial setting information
 */
LOCAL ER initIDev( void )
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
	if ( ercd < E_OK ) {
		knl_DefaultIDev.evtmbfid = 0;
		goto err_ret;
	}
#else	/* Do not use message buffer for event notification */
	ercd = E_OK;
 800d236:	2300      	movs	r3, #0
 800d238:	607b      	str	r3, [r7, #4]
#endif
	knl_DefaultIDev.evtmbfid = ercd;
 800d23a:	4a05      	ldr	r2, [pc, #20]	; (800d250 <initIDev+0x20>)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6013      	str	r3, [r2, #0]

#if DEVT_MBFSZ0 >= 0
err_ret:
#endif
	return ercd;
 800d240:	687b      	ldr	r3, [r7, #4]
}
 800d242:	4618      	mov	r0, r3
 800d244:	370c      	adds	r7, #12
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr
 800d24e:	bf00      	nop
 800d250:	24001148 	.word	0x24001148

0800d254 <knl_initialize_devmgr>:

/*
 * Initialization of Device management
 */
EXPORT ER knl_initialize_devmgr( void )
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
	ER	ercd;

	/* Generate lock for device management exclusive control */
	ercd = CreateMLock(&knl_DevMgrLock, (UB*)OBJNAME_DMLOCK);
 800d25a:	4916      	ldr	r1, [pc, #88]	; (800d2b4 <knl_initialize_devmgr+0x60>)
 800d25c:	4816      	ldr	r0, [pc, #88]	; (800d2b8 <knl_initialize_devmgr+0x64>)
 800d25e:	f003 fc9f 	bl	8010ba0 <CreateMLock>
 800d262:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	db15      	blt.n	800d296 <knl_initialize_devmgr+0x42>
		goto err_ret;
	}

	/* Generate device registration information table */
	ercd = initDevCB();
 800d26a:	f7ff ffb7 	bl	800d1dc <initDevCB>
 800d26e:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2b00      	cmp	r3, #0
 800d274:	db11      	blt.n	800d29a <knl_initialize_devmgr+0x46>
		goto err_ret;
	}

	/* Initialization of device input/output-related */
	ercd = knl_initDevIO();
 800d276:	f000 fddd 	bl	800de34 <knl_initDevIO>
 800d27a:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	db0d      	blt.n	800d29e <knl_initialize_devmgr+0x4a>
		goto err_ret;
	}

	/* Initialization of device initial setting information */
	ercd = initIDev();
 800d282:	f7ff ffd5 	bl	800d230 <initIDev>
 800d286:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	db09      	blt.n	800d2a2 <knl_initialize_devmgr+0x4e>
		goto err_ret;
	}

	knl_devmgr_startup();
 800d28e:	f000 fd7d 	bl	800dd8c <knl_devmgr_startup>

	return E_OK;
 800d292:	2300      	movs	r3, #0
 800d294:	e009      	b.n	800d2aa <knl_initialize_devmgr+0x56>
		goto err_ret;
 800d296:	bf00      	nop
 800d298:	e004      	b.n	800d2a4 <knl_initialize_devmgr+0x50>
		goto err_ret;
 800d29a:	bf00      	nop
 800d29c:	e002      	b.n	800d2a4 <knl_initialize_devmgr+0x50>
		goto err_ret;
 800d29e:	bf00      	nop
 800d2a0:	e000      	b.n	800d2a4 <knl_initialize_devmgr+0x50>
		goto err_ret;
 800d2a2:	bf00      	nop

err_ret:
	knl_finish_devmgr();
 800d2a4:	f000 f816 	bl	800d2d4 <knl_finish_devmgr>
	return ercd;
 800d2a8:	687b      	ldr	r3, [r7, #4]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3708      	adds	r7, #8
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	08012924 	.word	0x08012924
 800d2b8:	24001138 	.word	0x24001138

0800d2bc <delIDev>:

/*
 * Unregister device initial setting information
 */
LOCAL ER delIDev( void )
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b083      	sub	sp, #12
 800d2c0:	af00      	add	r7, sp, #0
	ER	ercd = E_OK;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	607b      	str	r3, [r7, #4]
	}


#endif /* DEVT_MBFSZ0 >= 0 */

	return ercd;
 800d2c6:	687b      	ldr	r3, [r7, #4]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	370c      	adds	r7, #12
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d2:	4770      	bx	lr

0800d2d4 <knl_finish_devmgr>:

/*
 * Finalization sequence of system management 
 */
EXPORT ER knl_finish_devmgr( void )
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
	ER	ercd;

	knl_devmgr_cleanup();
 800d2da:	f000 fd6d 	bl	800ddb8 <knl_devmgr_cleanup>

	/* Unregister device initial setting information */
	ercd = delIDev();
 800d2de:	f7ff ffed 	bl	800d2bc <delIDev>
 800d2e2:	6078      	str	r0, [r7, #4]

	/* Finalization sequence of device input/output-related */
	ercd = knl_finishDevIO();
 800d2e4:	f000 fdf0 	bl	800dec8 <knl_finishDevIO>
 800d2e8:	6078      	str	r0, [r7, #4]

	/* Delete lock for device management exclusive control */
	DeleteMLock(&knl_DevMgrLock);
 800d2ea:	4804      	ldr	r0, [pc, #16]	; (800d2fc <knl_finish_devmgr+0x28>)
 800d2ec:	f003 fc96 	bl	8010c1c <DeleteMLock>

	return ercd;
 800d2f0:	687b      	ldr	r3, [r7, #4]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3708      	adds	r7, #8
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	24001138 	.word	0x24001138

0800d300 <QueInit>:
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	605a      	str	r2, [r3, #4]
}
 800d314:	bf00      	nop
 800d316:	370c      	adds	r7, #12
 800d318:	46bd      	mov	sp, r7
 800d31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31e:	4770      	bx	lr

0800d320 <isQueEmpty>:
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	687a      	ldr	r2, [r7, #4]
 800d32e:	429a      	cmp	r2, r3
 800d330:	bf0c      	ite	eq
 800d332:	2301      	moveq	r3, #1
 800d334:	2300      	movne	r3, #0
 800d336:	b2db      	uxtb	r3, r3
}
 800d338:	4618      	mov	r0, r3
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <QueInsert>:
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
 800d34c:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	685a      	ldr	r2, [r3, #4]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	683a      	ldr	r2, [r7, #0]
 800d35a:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	687a      	ldr	r2, [r7, #4]
 800d362:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	605a      	str	r2, [r3, #4]
}
 800d36a:	bf00      	nop
 800d36c:	370c      	adds	r7, #12
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr

0800d376 <QueRemove>:
{
 800d376:	b480      	push	{r7}
 800d378:	b083      	sub	sp, #12
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	429a      	cmp	r2, r3
 800d386:	d009      	beq.n	800d39c <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	6812      	ldr	r2, [r2, #0]
 800d390:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	6852      	ldr	r2, [r2, #4]
 800d39a:	605a      	str	r2, [r3, #4]
}
 800d39c:	bf00      	nop
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr

0800d3a8 <QueRemoveNext>:
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b085      	sub	sp, #20
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d101      	bne.n	800d3be <QueRemoveNext+0x16>
		return NULL;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	e00b      	b.n	800d3d6 <QueRemoveNext+0x2e>
	entry = que->next;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	605a      	str	r2, [r3, #4]
	return entry;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3714      	adds	r7, #20
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr
	...

0800d3e4 <knl_GetResCB>:

/*
 * Get resource management information
 */
EXPORT ResCB* knl_GetResCB( void )
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	af00      	add	r7, sp, #0
	LockDM();
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	4808      	ldr	r0, [pc, #32]	; (800d40c <knl_GetResCB+0x28>)
 800d3ec:	f003 fba5 	bl	8010b3a <MLock>

	/* If the startup function is not called, initialize at this point */
	if ( knl_resource_control_block.openq.next == NULL ) {
 800d3f0:	4b07      	ldr	r3, [pc, #28]	; (800d410 <knl_GetResCB+0x2c>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d102      	bne.n	800d3fe <knl_GetResCB+0x1a>
		/* Initialization of open device management queue */
		QueInit(&(knl_resource_control_block.openq));
 800d3f8:	4805      	ldr	r0, [pc, #20]	; (800d410 <knl_GetResCB+0x2c>)
 800d3fa:	f7ff ff81 	bl	800d300 <QueInit>
	}

	UnlockDM();
 800d3fe:	2100      	movs	r1, #0
 800d400:	4802      	ldr	r0, [pc, #8]	; (800d40c <knl_GetResCB+0x28>)
 800d402:	f003 fbaa 	bl	8010b5a <MUnlock>

	return &knl_resource_control_block;
 800d406:	4b02      	ldr	r3, [pc, #8]	; (800d410 <knl_GetResCB+0x2c>)
}
 800d408:	4618      	mov	r0, r3
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	24001138 	.word	0x24001138
 800d410:	24001aec 	.word	0x24001aec

0800d414 <knl_check_devdesc>:

/*
 * Verify validity of device descriptor
 */
EXPORT ER knl_check_devdesc( ID dd, UINT mode, OpnCB **p_opncb )
{
 800d414:	b480      	push	{r7}
 800d416:	b087      	sub	sp, #28
 800d418:	af00      	add	r7, sp, #0
 800d41a:	60f8      	str	r0, [r7, #12]
 800d41c:	60b9      	str	r1, [r7, #8]
 800d41e:	607a      	str	r2, [r7, #4]
	OpnCB	*opncb;

	if ( dd < 1 || dd > MAX_OPNDEV ) {
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2b00      	cmp	r3, #0
 800d424:	dd02      	ble.n	800d42c <knl_check_devdesc+0x18>
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2b10      	cmp	r3, #16
 800d42a:	dd02      	ble.n	800d432 <knl_check_devdesc+0x1e>
		return E_ID;
 800d42c:	f06f 0311 	mvn.w	r3, #17
 800d430:	e01e      	b.n	800d470 <knl_check_devdesc+0x5c>
	}
	opncb = OPNCB(dd);
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 800d438:	4413      	add	r3, r2
 800d43a:	019b      	lsls	r3, r3, #6
 800d43c:	4a0f      	ldr	r2, [pc, #60]	; (800d47c <knl_check_devdesc+0x68>)
 800d43e:	4413      	add	r3, r2
 800d440:	617b      	str	r3, [r7, #20]
	if ( opncb->resid == 0 ) {
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	691b      	ldr	r3, [r3, #16]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d102      	bne.n	800d450 <knl_check_devdesc+0x3c>
		return E_ID;
 800d44a:	f06f 0311 	mvn.w	r3, #17
 800d44e:	e00f      	b.n	800d470 <knl_check_devdesc+0x5c>
	}

	if ( mode != 0 ) {
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d008      	beq.n	800d468 <knl_check_devdesc+0x54>
		if ( (opncb->omode & mode) == 0 ) {
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	69da      	ldr	r2, [r3, #28]
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	4013      	ands	r3, r2
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d102      	bne.n	800d468 <knl_check_devdesc+0x54>
			return E_OACV;
 800d462:	f06f 031a 	mvn.w	r3, #26
 800d466:	e003      	b.n	800d470 <knl_check_devdesc+0x5c>
		}
	}

	*p_opncb = opncb;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	697a      	ldr	r2, [r7, #20]
 800d46c:	601a      	str	r2, [r3, #0]
	return E_OK;
 800d46e:	2300      	movs	r3, #0
}
 800d470:	4618      	mov	r0, r3
 800d472:	371c      	adds	r7, #28
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr
 800d47c:	2400139c 	.word	0x2400139c

0800d480 <knl_delOpnCB>:

/*
 * Free open management block
 */
EXPORT void knl_delOpnCB( OpnCB *opncb, BOOL free )
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b082      	sub	sp, #8
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	6039      	str	r1, [r7, #0]
	QueRemove(&opncb->q);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7ff ff72 	bl	800d376 <QueRemove>
	QueRemove(&opncb->resq);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	3308      	adds	r3, #8
 800d496:	4618      	mov	r0, r3
 800d498:	f7ff ff6d 	bl	800d376 <QueRemove>

	if ( free ) {
 800d49c:	683b      	ldr	r3, [r7, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d004      	beq.n	800d4ac <knl_delOpnCB+0x2c>
		QueInsert(&opncb->q, &knl_FreeOpnCB);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	4905      	ldr	r1, [pc, #20]	; (800d4bc <knl_delOpnCB+0x3c>)
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7ff ff4c 	bl	800d344 <QueInsert>
	}
	opncb->resid = 0;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	611a      	str	r2, [r3, #16]
}
 800d4b2:	bf00      	nop
 800d4b4:	3708      	adds	r7, #8
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	2400179c 	.word	0x2400179c

0800d4c0 <knl_delReqCB>:

/*
 * Free request management block
 */
EXPORT void knl_delReqCB( ReqCB *reqcb )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
	QueRemove(&reqcb->q);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7ff ff53 	bl	800d376 <QueRemove>

	QueInsert(&reqcb->q, &knl_FreeReqCB);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	4905      	ldr	r1, [pc, #20]	; (800d4e8 <knl_delReqCB+0x28>)
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7ff ff35 	bl	800d344 <QueInsert>
	reqcb->opncb = NULL;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	609a      	str	r2, [r3, #8]
}
 800d4e0:	bf00      	nop
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}
 800d4e8:	24001ae4 	.word	0x24001ae4

0800d4ec <knl_chkopen>:

/*
 * TRUE if specified device is open.
 */
EXPORT BOOL knl_chkopen( DevCB *devcb, INT unitno )
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b085      	sub	sp, #20
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
	QUEUE	*q;

	for ( q = devcb->openq.next; q != &devcb->openq; q = q->next ) {
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4fa:	60fb      	str	r3, [r7, #12]
 800d4fc:	e009      	b.n	800d512 <knl_chkopen+0x26>
		if ( ((OpnCB*)q)->unitno == unitno ) {
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	699b      	ldr	r3, [r3, #24]
 800d502:	683a      	ldr	r2, [r7, #0]
 800d504:	429a      	cmp	r2, r3
 800d506:	d101      	bne.n	800d50c <knl_chkopen+0x20>
			return TRUE;
 800d508:	2301      	movs	r3, #1
 800d50a:	e008      	b.n	800d51e <knl_chkopen+0x32>
	for ( q = devcb->openq.next; q != &devcb->openq; q = q->next ) {
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	60fb      	str	r3, [r7, #12]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	3340      	adds	r3, #64	; 0x40
 800d516:	68fa      	ldr	r2, [r7, #12]
 800d518:	429a      	cmp	r2, r3
 800d51a:	d1f0      	bne.n	800d4fe <knl_chkopen+0x12>
		}
	}
	return FALSE;
 800d51c:	2300      	movs	r3, #0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3714      	adds	r7, #20
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr
	...

0800d52c <newOpnCB>:

/*
 * Get open management block
 */
LOCAL OpnCB* newOpnCB( DevCB *devcb, INT unitno, UINT omode, ResCB *rescb )
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b086      	sub	sp, #24
 800d530:	af00      	add	r7, sp, #0
 800d532:	60f8      	str	r0, [r7, #12]
 800d534:	60b9      	str	r1, [r7, #8]
 800d536:	607a      	str	r2, [r7, #4]
 800d538:	603b      	str	r3, [r7, #0]
	OpnCB	*opncb;

	/* Get space in open management block */
	opncb = (OpnCB*)QueRemoveNext(&knl_FreeOpnCB);
 800d53a:	481b      	ldr	r0, [pc, #108]	; (800d5a8 <newOpnCB+0x7c>)
 800d53c:	f7ff ff34 	bl	800d3a8 <QueRemoveNext>
 800d540:	6178      	str	r0, [r7, #20]
	if ( opncb == NULL ) {
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d101      	bne.n	800d54c <newOpnCB+0x20>
		return NULL; /* No space */
 800d548:	2300      	movs	r3, #0
 800d54a:	e028      	b.n	800d59e <newOpnCB+0x72>
	}

	/* Register as open device */
	QueInsert(&opncb->q, &devcb->openq);
 800d54c:	697a      	ldr	r2, [r7, #20]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	3340      	adds	r3, #64	; 0x40
 800d552:	4619      	mov	r1, r3
 800d554:	4610      	mov	r0, r2
 800d556:	f7ff fef5 	bl	800d344 <QueInsert>
	QueInsert(&opncb->resq, &rescb->openq);
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	3308      	adds	r3, #8
 800d55e:	683a      	ldr	r2, [r7, #0]
 800d560:	4611      	mov	r1, r2
 800d562:	4618      	mov	r0, r3
 800d564:	f7ff feee 	bl	800d344 <QueInsert>

	opncb->devcb  = devcb;
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	68fa      	ldr	r2, [r7, #12]
 800d56c:	615a      	str	r2, [r3, #20]
	opncb->unitno = unitno;
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	68ba      	ldr	r2, [r7, #8]
 800d572:	619a      	str	r2, [r3, #24]
	opncb->omode  = omode;
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	61da      	str	r2, [r3, #28]
	QueInit(&opncb->requestq);
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	3320      	adds	r3, #32
 800d57e:	4618      	mov	r0, r3
 800d580:	f7ff febe 	bl	800d300 <QueInit>
	opncb->waitone = 0;
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	2200      	movs	r2, #0
 800d588:	851a      	strh	r2, [r3, #40]	; 0x28
	opncb->nwaireq = 0;
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	2200      	movs	r2, #0
 800d58e:	631a      	str	r2, [r3, #48]	; 0x30
	opncb->abort_tskid = 0;
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	2200      	movs	r2, #0
 800d594:	635a      	str	r2, [r3, #52]	; 0x34

	opncb->resid  = 0; /* Indicate that open processing is not completed */
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	2200      	movs	r2, #0
 800d59a:	611a      	str	r2, [r3, #16]

	return opncb;
 800d59c:	697b      	ldr	r3, [r7, #20]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3718      	adds	r7, #24
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	2400179c 	.word	0x2400179c

0800d5ac <chkopenmode>:

/*
 * Check open mode
 */
LOCAL ER chkopenmode( DevCB *devcb, INT unitno, UINT omode )
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b08b      	sub	sp, #44	; 0x2c
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	60b9      	str	r1, [r7, #8]
 800d5b6:	607a      	str	r2, [r7, #4]
	QUEUE	*q;
	OpnCB	*opncb;
	INT	read, write, rexcl, wexcl;

	if ( (omode & TD_UPDATE) == 0 ) {
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f003 0303 	and.w	r3, r3, #3
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d102      	bne.n	800d5c8 <chkopenmode+0x1c>
		return E_PAR;
 800d5c2:	f06f 0310 	mvn.w	r3, #16
 800d5c6:	e072      	b.n	800d6ae <chkopenmode+0x102>
	}

	/* Check current open state */
	read = write = rexcl = wexcl = 0;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	617b      	str	r3, [r7, #20]
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	61bb      	str	r3, [r7, #24]
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	61fb      	str	r3, [r7, #28]
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	623b      	str	r3, [r7, #32]
	for ( q = devcb->openq.next; q != &devcb->openq; q = q->next ) {
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5dc:	627b      	str	r3, [r7, #36]	; 0x24
 800d5de:	e034      	b.n	800d64a <chkopenmode+0x9e>
		opncb = (OpnCB*)q;
 800d5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e2:	613b      	str	r3, [r7, #16]

		if ( unitno == 0 || opncb->unitno == 0 || opncb->unitno == unitno ) {
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d008      	beq.n	800d5fc <chkopenmode+0x50>
 800d5ea:	693b      	ldr	r3, [r7, #16]
 800d5ec:	699b      	ldr	r3, [r3, #24]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d004      	beq.n	800d5fc <chkopenmode+0x50>
 800d5f2:	693b      	ldr	r3, [r7, #16]
 800d5f4:	699b      	ldr	r3, [r3, #24]
 800d5f6:	68ba      	ldr	r2, [r7, #8]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d123      	bne.n	800d644 <chkopenmode+0x98>
			if ( (opncb->omode & TD_READ)  != 0 ) {
 800d5fc:	693b      	ldr	r3, [r7, #16]
 800d5fe:	69db      	ldr	r3, [r3, #28]
 800d600:	f003 0301 	and.w	r3, r3, #1
 800d604:	2b00      	cmp	r3, #0
 800d606:	d002      	beq.n	800d60e <chkopenmode+0x62>
				read++;
 800d608:	6a3b      	ldr	r3, [r7, #32]
 800d60a:	3301      	adds	r3, #1
 800d60c:	623b      	str	r3, [r7, #32]
			}
			if ( (opncb->omode & TD_WRITE) != 0 ) {
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	69db      	ldr	r3, [r3, #28]
 800d612:	f003 0302 	and.w	r3, r3, #2
 800d616:	2b00      	cmp	r3, #0
 800d618:	d002      	beq.n	800d620 <chkopenmode+0x74>
				write++;
 800d61a:	69fb      	ldr	r3, [r7, #28]
 800d61c:	3301      	adds	r3, #1
 800d61e:	61fb      	str	r3, [r7, #28]
			}
			if ( (opncb->omode & (TD_EXCL|TD_REXCL)) != 0) {
 800d620:	693b      	ldr	r3, [r7, #16]
 800d622:	69db      	ldr	r3, [r3, #28]
 800d624:	f403 63a0 	and.w	r3, r3, #1280	; 0x500
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d002      	beq.n	800d632 <chkopenmode+0x86>
				rexcl++;
 800d62c:	69bb      	ldr	r3, [r7, #24]
 800d62e:	3301      	adds	r3, #1
 800d630:	61bb      	str	r3, [r7, #24]
			}
			if ( (opncb->omode & (TD_EXCL|TD_WEXCL)) != 0) {
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	69db      	ldr	r3, [r3, #28]
 800d636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d002      	beq.n	800d644 <chkopenmode+0x98>
				wexcl++;
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	3301      	adds	r3, #1
 800d642:	617b      	str	r3, [r7, #20]
	for ( q = devcb->openq.next; q != &devcb->openq; q = q->next ) {
 800d644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	627b      	str	r3, [r7, #36]	; 0x24
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	3340      	adds	r3, #64	; 0x40
 800d64e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d650:	429a      	cmp	r2, r3
 800d652:	d1c5      	bne.n	800d5e0 <chkopenmode+0x34>
			}
		}
	}

	/* Is it able to open? */
	if ( (omode & (TD_EXCL|TD_REXCL)) != 0 && read  > 0 ) {
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f403 63a0 	and.w	r3, r3, #1280	; 0x500
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d005      	beq.n	800d66a <chkopenmode+0xbe>
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	2b00      	cmp	r3, #0
 800d662:	dd02      	ble.n	800d66a <chkopenmode+0xbe>
		return E_BUSY;
 800d664:	f06f 0340 	mvn.w	r3, #64	; 0x40
 800d668:	e021      	b.n	800d6ae <chkopenmode+0x102>
	}
	if ( (omode & (TD_EXCL|TD_WEXCL)) != 0 && write > 0 ) {
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d670:	2b00      	cmp	r3, #0
 800d672:	d005      	beq.n	800d680 <chkopenmode+0xd4>
 800d674:	69fb      	ldr	r3, [r7, #28]
 800d676:	2b00      	cmp	r3, #0
 800d678:	dd02      	ble.n	800d680 <chkopenmode+0xd4>
		return E_BUSY;
 800d67a:	f06f 0340 	mvn.w	r3, #64	; 0x40
 800d67e:	e016      	b.n	800d6ae <chkopenmode+0x102>
	}
	if ( (omode & TD_READ)  != 0 && rexcl > 0 ) {
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f003 0301 	and.w	r3, r3, #1
 800d686:	2b00      	cmp	r3, #0
 800d688:	d005      	beq.n	800d696 <chkopenmode+0xea>
 800d68a:	69bb      	ldr	r3, [r7, #24]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	dd02      	ble.n	800d696 <chkopenmode+0xea>
		return E_BUSY;
 800d690:	f06f 0340 	mvn.w	r3, #64	; 0x40
 800d694:	e00b      	b.n	800d6ae <chkopenmode+0x102>
	}
	if ( (omode & TD_WRITE) != 0 && wexcl > 0 ) {
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f003 0302 	and.w	r3, r3, #2
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d005      	beq.n	800d6ac <chkopenmode+0x100>
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	dd02      	ble.n	800d6ac <chkopenmode+0x100>
		return E_BUSY;
 800d6a6:	f06f 0340 	mvn.w	r3, #64	; 0x40
 800d6aa:	e000      	b.n	800d6ae <chkopenmode+0x102>
	}

	return E_OK;
 800d6ac:	2300      	movs	r3, #0
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	372c      	adds	r7, #44	; 0x2c
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b8:	4770      	bx	lr
	...

0800d6bc <tk_opn_dev>:

/*
 * Device open
 */
SYSCALL ID tk_opn_dev( CONST UB *devnm, UINT omode )
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b08e      	sub	sp, #56	; 0x38
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
	DevCB	*devcb;
	OpnCB	*opncb;
	ER	ercd;
	ID	semid;

	unitno = knl_phydevnm(pdevnm, devnm);
 800d6c6:	f107 030c 	add.w	r3, r7, #12
 800d6ca:	6879      	ldr	r1, [r7, #4]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7ff fd43 	bl	800d158 <knl_phydevnm>
 800d6d2:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Get resource management information */
	rescb = knl_GetResCB();
 800d6d4:	f7ff fe86 	bl	800d3e4 <knl_GetResCB>
 800d6d8:	62b8      	str	r0, [r7, #40]	; 0x28
	if ( rescb == NULL ) {
 800d6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d103      	bne.n	800d6e8 <tk_opn_dev+0x2c>
		ercd = E_CTX;
 800d6e0:	f06f 0318 	mvn.w	r3, #24
 800d6e4:	633b      	str	r3, [r7, #48]	; 0x30
		goto err_ret1;
 800d6e6:	e0ab      	b.n	800d840 <tk_opn_dev+0x184>
	}

	LockDM();
 800d6e8:	2100      	movs	r1, #0
 800d6ea:	4858      	ldr	r0, [pc, #352]	; (800d84c <tk_opn_dev+0x190>)
 800d6ec:	f003 fa25 	bl	8010b3a <MLock>

	/* Search device to open */
	devcb = knl_searchDevCB(pdevnm);
 800d6f0:	f107 030c 	add.w	r3, r7, #12
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f7ff fc19 	bl	800cf2c <knl_searchDevCB>
 800d6fa:	6278      	str	r0, [r7, #36]	; 0x24
	if ( devcb == NULL || unitno > devcb->ddev.nsub ) {
 800d6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d004      	beq.n	800d70c <tk_opn_dev+0x50>
 800d702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d704:	6a1b      	ldr	r3, [r3, #32]
 800d706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d708:	429a      	cmp	r2, r3
 800d70a:	dd03      	ble.n	800d714 <tk_opn_dev+0x58>
		ercd = E_NOEXS;
 800d70c:	f06f 0329 	mvn.w	r3, #41	; 0x29
 800d710:	633b      	str	r3, [r7, #48]	; 0x30
		goto err_ret2;
 800d712:	e091      	b.n	800d838 <tk_opn_dev+0x17c>
	}

	/* Check open mode */
	ercd = chkopenmode(devcb, unitno, omode);
 800d714:	683a      	ldr	r2, [r7, #0]
 800d716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d71a:	f7ff ff47 	bl	800d5ac <chkopenmode>
 800d71e:	6338      	str	r0, [r7, #48]	; 0x30
	if ( ercd < E_OK ) {
 800d720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d722:	2b00      	cmp	r3, #0
 800d724:	f2c0 8087 	blt.w	800d836 <tk_opn_dev+0x17a>
		goto err_ret2;
	}

	openfn = (OPNFN)devcb->ddev.openfn;
 800d728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d72c:	637b      	str	r3, [r7, #52]	; 0x34
	exinf = devcb->ddev.exinf;
 800d72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d730:	695b      	ldr	r3, [r3, #20]
 800d732:	623b      	str	r3, [r7, #32]

	/* Is device driver call required? */
	if ( knl_chkopen(devcb, unitno) && (devcb->ddev.drvatr & TDA_OPENREQ) == 0 ) {
 800d734:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d736:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d738:	f7ff fed8 	bl	800d4ec <knl_chkopen>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d007      	beq.n	800d752 <tk_opn_dev+0x96>
 800d742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d744:	699b      	ldr	r3, [r3, #24]
 800d746:	f003 0301 	and.w	r3, r3, #1
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d101      	bne.n	800d752 <tk_opn_dev+0x96>
		openfn = NULL;
 800d74e:	2300      	movs	r3, #0
 800d750:	637b      	str	r3, [r7, #52]	; 0x34
	}

	/* Get open management block */
	opncb = newOpnCB(devcb, unitno, omode, rescb);
 800d752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d754:	683a      	ldr	r2, [r7, #0]
 800d756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d75a:	f7ff fee7 	bl	800d52c <newOpnCB>
 800d75e:	61f8      	str	r0, [r7, #28]
	if ( opncb == NULL ) {
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d103      	bne.n	800d76e <tk_opn_dev+0xb2>
		ercd = E_LIMIT;
 800d766:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800d76a:	633b      	str	r3, [r7, #48]	; 0x30
		goto err_ret2;
 800d76c:	e064      	b.n	800d838 <tk_opn_dev+0x17c>
	}

	semid = tk_cre_sem(&knl_pk_csem_DM);
 800d76e:	4838      	ldr	r0, [pc, #224]	; (800d850 <tk_opn_dev+0x194>)
 800d770:	f001 fbae 	bl	800eed0 <tk_cre_sem>
 800d774:	61b8      	str	r0, [r7, #24]
	if ( semid < E_OK ) {
 800d776:	69bb      	ldr	r3, [r7, #24]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	da03      	bge.n	800d784 <tk_opn_dev+0xc8>
		ercd = E_SYS;
 800d77c:	f06f 0304 	mvn.w	r3, #4
 800d780:	633b      	str	r3, [r7, #48]	; 0x30
		goto err_ret2_5;
 800d782:	e053      	b.n	800d82c <tk_opn_dev+0x170>
	}
	opncb->abort_semid = semid;
 800d784:	69fb      	ldr	r3, [r7, #28]
 800d786:	69ba      	ldr	r2, [r7, #24]
 800d788:	63da      	str	r2, [r3, #60]	; 0x3c

	UnlockDM();
 800d78a:	2100      	movs	r1, #0
 800d78c:	482f      	ldr	r0, [pc, #188]	; (800d84c <tk_opn_dev+0x190>)
 800d78e:	f003 f9e4 	bl	8010b5a <MUnlock>

	if ( openfn != NULL ) {
 800d792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d794:	2b00      	cmp	r3, #0
 800d796:	d02e      	beq.n	800d7f6 <tk_opn_dev+0x13a>
		/* Device driver call */
		DISABLE_INTERRUPT;
 800d798:	f004 ff11 	bl	80125be <disint>
		knl_ctxtsk->sysmode++;
 800d79c:	4b2d      	ldr	r3, [pc, #180]	; (800d854 <tk_opn_dev+0x198>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800d7a4:	b292      	uxth	r2, r2
 800d7a6:	3201      	adds	r2, #1
 800d7a8:	b292      	uxth	r2, r2
 800d7aa:	b212      	sxth	r2, r2
 800d7ac:	845a      	strh	r2, [r3, #34]	; 0x22
		ENABLE_INTERRUPT;
 800d7ae:	2000      	movs	r0, #0
 800d7b0:	f004 fee9 	bl	8012586 <set_basepri>
		ercd = (*openfn)(DEVID(devcb, unitno), omode, exinf);
 800d7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b6:	4a28      	ldr	r2, [pc, #160]	; (800d858 <tk_opn_dev+0x19c>)
 800d7b8:	1a9b      	subs	r3, r3, r2
 800d7ba:	10db      	asrs	r3, r3, #3
 800d7bc:	4a27      	ldr	r2, [pc, #156]	; (800d85c <tk_opn_dev+0x1a0>)
 800d7be:	fb02 f303 	mul.w	r3, r2, r3
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	021a      	lsls	r2, r3, #8
 800d7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c8:	18d0      	adds	r0, r2, r3
 800d7ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7cc:	6a3a      	ldr	r2, [r7, #32]
 800d7ce:	6839      	ldr	r1, [r7, #0]
 800d7d0:	4798      	blx	r3
 800d7d2:	6338      	str	r0, [r7, #48]	; 0x30
		DISABLE_INTERRUPT;
 800d7d4:	f004 fef3 	bl	80125be <disint>
		knl_ctxtsk->sysmode--;
 800d7d8:	4b1e      	ldr	r3, [pc, #120]	; (800d854 <tk_opn_dev+0x198>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800d7e0:	b292      	uxth	r2, r2
 800d7e2:	3a01      	subs	r2, #1
 800d7e4:	b292      	uxth	r2, r2
 800d7e6:	b212      	sxth	r2, r2
 800d7e8:	845a      	strh	r2, [r3, #34]	; 0x22
		ENABLE_INTERRUPT;
 800d7ea:	2000      	movs	r0, #0
 800d7ec:	f004 fecb 	bl	8012586 <set_basepri>

		if ( ercd < E_OK ) {
 800d7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	db10      	blt.n	800d818 <tk_opn_dev+0x15c>
			goto err_ret3;
		}
	}

	LockDM();
 800d7f6:	2100      	movs	r1, #0
 800d7f8:	4814      	ldr	r0, [pc, #80]	; (800d84c <tk_opn_dev+0x190>)
 800d7fa:	f003 f99e 	bl	8010b3a <MLock>
	opncb->resid = 1; /* Indicate that open processing is completed */
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	2201      	movs	r2, #1
 800d802:	611a      	str	r2, [r3, #16]
	UnlockDM();
 800d804:	2100      	movs	r1, #0
 800d806:	4811      	ldr	r0, [pc, #68]	; (800d84c <tk_opn_dev+0x190>)
 800d808:	f003 f9a7 	bl	8010b5a <MUnlock>

	return DD(opncb);
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	4a14      	ldr	r2, [pc, #80]	; (800d860 <tk_opn_dev+0x1a4>)
 800d810:	1a9b      	subs	r3, r3, r2
 800d812:	119b      	asrs	r3, r3, #6
 800d814:	3301      	adds	r3, #1
 800d816:	e014      	b.n	800d842 <tk_opn_dev+0x186>
			goto err_ret3;
 800d818:	bf00      	nop

err_ret3:
	LockDM();
 800d81a:	2100      	movs	r1, #0
 800d81c:	480b      	ldr	r0, [pc, #44]	; (800d84c <tk_opn_dev+0x190>)
 800d81e:	f003 f98c 	bl	8010b3a <MLock>
	tk_del_sem(opncb->abort_semid);
 800d822:	69fb      	ldr	r3, [r7, #28]
 800d824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d826:	4618      	mov	r0, r3
 800d828:	f001 fbcc 	bl	800efc4 <tk_del_sem>
err_ret2_5:
	knl_delOpnCB(opncb, TRUE);
 800d82c:	2101      	movs	r1, #1
 800d82e:	69f8      	ldr	r0, [r7, #28]
 800d830:	f7ff fe26 	bl	800d480 <knl_delOpnCB>
 800d834:	e000      	b.n	800d838 <tk_opn_dev+0x17c>
		goto err_ret2;
 800d836:	bf00      	nop
err_ret2:
	UnlockDM();
 800d838:	2100      	movs	r1, #0
 800d83a:	4804      	ldr	r0, [pc, #16]	; (800d84c <tk_opn_dev+0x190>)
 800d83c:	f003 f98d 	bl	8010b5a <MUnlock>
err_ret1:
	return ercd;
 800d840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800d842:	4618      	mov	r0, r3
 800d844:	3738      	adds	r7, #56	; 0x38
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	24001138 	.word	0x24001138
 800d850:	08012ac8 	.word	0x08012ac8
 800d854:	24002408 	.word	0x24002408
 800d858:	2400114c 	.word	0x2400114c
 800d85c:	38e38e39 	.word	0x38e38e39
 800d860:	2400139c 	.word	0x2400139c

0800d864 <abort_allrequest>:

/*
 * Abort all requests
 */
LOCAL void abort_allrequest( OpnCB *opncb )
{
 800d864:	b590      	push	{r4, r7, lr}
 800d866:	b089      	sub	sp, #36	; 0x24
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
	DevCB	*devcb;
	ReqCB	*reqcb;
	QUEUE	*q;

	/* If 'execfn' and 'waitfn' are called, execute abort request. */
	LockDM();
 800d86c:	2100      	movs	r1, #0
 800d86e:	4876      	ldr	r0, [pc, #472]	; (800da48 <abort_allrequest+0x1e4>)
 800d870:	f003 f963 	bl	8010b3a <MLock>

	devcb = opncb->devcb;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	695b      	ldr	r3, [r3, #20]
 800d878:	61bb      	str	r3, [r7, #24]
	abortfn = (ABTFN)devcb->ddev.abortfn;
 800d87a:	69bb      	ldr	r3, [r7, #24]
 800d87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d87e:	617b      	str	r3, [r7, #20]
	waitfn  = (WAIFN)devcb->ddev.waitfn;
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d884:	613b      	str	r3, [r7, #16]
	exinf   = devcb->ddev.exinf;
 800d886:	69bb      	ldr	r3, [r7, #24]
 800d888:	695b      	ldr	r3, [r3, #20]
 800d88a:	60fb      	str	r3, [r7, #12]

	opncb->abort_tskid = tk_get_tid();
 800d88c:	f002 fa08 	bl	800fca0 <tk_get_tid>
 800d890:	4602      	mov	r2, r0
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	635a      	str	r2, [r3, #52]	; 0x34
	opncb->abort_cnt = 0;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2200      	movs	r2, #0
 800d89a:	639a      	str	r2, [r3, #56]	; 0x38

	if ( opncb->nwaireq > 0 ) {
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	dd2e      	ble.n	800d902 <abort_allrequest+0x9e>
		/* Multiple requests wait */
		reqcb = DEVREQ_REQCB(opncb->waireqlst);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a8:	3b10      	subs	r3, #16
 800d8aa:	60bb      	str	r3, [r7, #8]

		/* Device driver call */
		DISABLE_INTERRUPT;
 800d8ac:	f004 fe87 	bl	80125be <disint>
		knl_ctxtsk->sysmode++;
 800d8b0:	4b66      	ldr	r3, [pc, #408]	; (800da4c <abort_allrequest+0x1e8>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800d8b8:	b292      	uxth	r2, r2
 800d8ba:	3201      	adds	r2, #1
 800d8bc:	b292      	uxth	r2, r2
 800d8be:	b212      	sxth	r2, r2
 800d8c0:	845a      	strh	r2, [r3, #34]	; 0x22
		ENABLE_INTERRUPT;
 800d8c2:	2000      	movs	r0, #0
 800d8c4:	f004 fe5f 	bl	8012586 <set_basepri>
		(*abortfn)(reqcb->tskid, opncb->waireqlst, opncb->nwaireq, exinf);
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	68d8      	ldr	r0, [r3, #12]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d8d4:	697c      	ldr	r4, [r7, #20]
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	47a0      	blx	r4
		DISABLE_INTERRUPT;
 800d8da:	f004 fe70 	bl	80125be <disint>
		knl_ctxtsk->sysmode--;
 800d8de:	4b5b      	ldr	r3, [pc, #364]	; (800da4c <abort_allrequest+0x1e8>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800d8e6:	b292      	uxth	r2, r2
 800d8e8:	3a01      	subs	r2, #1
 800d8ea:	b292      	uxth	r2, r2
 800d8ec:	b212      	sxth	r2, r2
 800d8ee:	845a      	strh	r2, [r3, #34]	; 0x22
		ENABLE_INTERRUPT;
 800d8f0:	2000      	movs	r0, #0
 800d8f2:	f004 fe48 	bl	8012586 <set_basepri>

		opncb->abort_cnt++;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8fa:	1c5a      	adds	r2, r3, #1
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	639a      	str	r2, [r3, #56]	; 0x38
 800d900:	e042      	b.n	800d988 <abort_allrequest+0x124>
	} else {
		/* Start request or single request wait */
		for ( q = opncb->requestq.next; q != &opncb->requestq; q = q->next ) {
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6a1b      	ldr	r3, [r3, #32]
 800d906:	61fb      	str	r3, [r7, #28]
 800d908:	e039      	b.n	800d97e <abort_allrequest+0x11a>
			reqcb = (ReqCB*)q;
 800d90a:	69fb      	ldr	r3, [r7, #28]
 800d90c:	60bb      	str	r3, [r7, #8]
			if ( reqcb->tskid == 0 ) {
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d02f      	beq.n	800d976 <abort_allrequest+0x112>
				continue;
			}

			reqcb->req.abort = TRUE;
 800d916:	68ba      	ldr	r2, [r7, #8]
 800d918:	7f13      	ldrb	r3, [r2, #28]
 800d91a:	f043 0310 	orr.w	r3, r3, #16
 800d91e:	7713      	strb	r3, [r2, #28]

			/* Device driver call */
			DISABLE_INTERRUPT;
 800d920:	f004 fe4d 	bl	80125be <disint>
			knl_ctxtsk->sysmode++;
 800d924:	4b49      	ldr	r3, [pc, #292]	; (800da4c <abort_allrequest+0x1e8>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800d92c:	b292      	uxth	r2, r2
 800d92e:	3201      	adds	r2, #1
 800d930:	b292      	uxth	r2, r2
 800d932:	b212      	sxth	r2, r2
 800d934:	845a      	strh	r2, [r3, #34]	; 0x22
			ENABLE_INTERRUPT;
 800d936:	2000      	movs	r0, #0
 800d938:	f004 fe25 	bl	8012586 <set_basepri>
			(*abortfn)(reqcb->tskid, &reqcb->req, 1, exinf);
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	68d8      	ldr	r0, [r3, #12]
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	f103 0110 	add.w	r1, r3, #16
 800d946:	697c      	ldr	r4, [r7, #20]
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2201      	movs	r2, #1
 800d94c:	47a0      	blx	r4
			DISABLE_INTERRUPT;
 800d94e:	f004 fe36 	bl	80125be <disint>
			knl_ctxtsk->sysmode--;
 800d952:	4b3e      	ldr	r3, [pc, #248]	; (800da4c <abort_allrequest+0x1e8>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800d95a:	b292      	uxth	r2, r2
 800d95c:	3a01      	subs	r2, #1
 800d95e:	b292      	uxth	r2, r2
 800d960:	b212      	sxth	r2, r2
 800d962:	845a      	strh	r2, [r3, #34]	; 0x22
			ENABLE_INTERRUPT;
 800d964:	2000      	movs	r0, #0
 800d966:	f004 fe0e 	bl	8012586 <set_basepri>

			opncb->abort_cnt++;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d96e:	1c5a      	adds	r2, r3, #1
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	639a      	str	r2, [r3, #56]	; 0x38
 800d974:	e000      	b.n	800d978 <abort_allrequest+0x114>
				continue;
 800d976:	bf00      	nop
		for ( q = opncb->requestq.next; q != &opncb->requestq; q = q->next ) {
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	61fb      	str	r3, [r7, #28]
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	3320      	adds	r3, #32
 800d982:	69fa      	ldr	r2, [r7, #28]
 800d984:	429a      	cmp	r2, r3
 800d986:	d1c0      	bne.n	800d90a <abort_allrequest+0xa6>
		}
	}

	UnlockDM();
 800d988:	2100      	movs	r1, #0
 800d98a:	482f      	ldr	r0, [pc, #188]	; (800da48 <abort_allrequest+0x1e4>)
 800d98c:	f003 f8e5 	bl	8010b5a <MUnlock>

	if ( opncb->abort_cnt > 0 ) {
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d994:	2b00      	cmp	r3, #0
 800d996:	dd07      	ble.n	800d9a8 <abort_allrequest+0x144>
		/* Wait for completion of abort request processing */
		tk_wai_sem(opncb->abort_semid, 1, TMO_FEVR);
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d99c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9a0:	2101      	movs	r1, #1
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f001 fc36 	bl	800f214 <tk_wai_sem>
	}
	opncb->abort_tskid = 0;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	635a      	str	r2, [r3, #52]	; 0x34

	/* Abort remaining requests and wait for completion */
	LockDM();
 800d9ae:	2100      	movs	r1, #0
 800d9b0:	4825      	ldr	r0, [pc, #148]	; (800da48 <abort_allrequest+0x1e4>)
 800d9b2:	f003 f8c2 	bl	8010b3a <MLock>
	while ( !isQueEmpty(&opncb->requestq) ) {
 800d9b6:	e037      	b.n	800da28 <abort_allrequest+0x1c4>
		reqcb = (ReqCB*)opncb->requestq.next;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6a1b      	ldr	r3, [r3, #32]
 800d9bc:	60bb      	str	r3, [r7, #8]
		reqcb->req.abort = TRUE;
 800d9be:	68ba      	ldr	r2, [r7, #8]
 800d9c0:	7f13      	ldrb	r3, [r2, #28]
 800d9c2:	f043 0310 	orr.w	r3, r3, #16
 800d9c6:	7713      	strb	r3, [r2, #28]

		UnlockDM();
 800d9c8:	2100      	movs	r1, #0
 800d9ca:	481f      	ldr	r0, [pc, #124]	; (800da48 <abort_allrequest+0x1e4>)
 800d9cc:	f003 f8c5 	bl	8010b5a <MUnlock>

		/* Device driver call */
		DISABLE_INTERRUPT;
 800d9d0:	f004 fdf5 	bl	80125be <disint>
		knl_ctxtsk->sysmode++;
 800d9d4:	4b1d      	ldr	r3, [pc, #116]	; (800da4c <abort_allrequest+0x1e8>)
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800d9dc:	b292      	uxth	r2, r2
 800d9de:	3201      	adds	r2, #1
 800d9e0:	b292      	uxth	r2, r2
 800d9e2:	b212      	sxth	r2, r2
 800d9e4:	845a      	strh	r2, [r3, #34]	; 0x22
		ENABLE_INTERRUPT;
 800d9e6:	2000      	movs	r0, #0
 800d9e8:	f004 fdcd 	bl	8012586 <set_basepri>
		(*waitfn)(&reqcb->req, 1, TMO_FEVR, exinf);
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	f103 0010 	add.w	r0, r3, #16
 800d9f2:	693c      	ldr	r4, [r7, #16]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9fa:	2101      	movs	r1, #1
 800d9fc:	47a0      	blx	r4
		DISABLE_INTERRUPT;
 800d9fe:	f004 fdde 	bl	80125be <disint>
		knl_ctxtsk->sysmode--;
 800da02:	4b12      	ldr	r3, [pc, #72]	; (800da4c <abort_allrequest+0x1e8>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800da0a:	b292      	uxth	r2, r2
 800da0c:	3a01      	subs	r2, #1
 800da0e:	b292      	uxth	r2, r2
 800da10:	b212      	sxth	r2, r2
 800da12:	845a      	strh	r2, [r3, #34]	; 0x22
		ENABLE_INTERRUPT;
 800da14:	2000      	movs	r0, #0
 800da16:	f004 fdb6 	bl	8012586 <set_basepri>

		LockDM();
 800da1a:	2100      	movs	r1, #0
 800da1c:	480a      	ldr	r0, [pc, #40]	; (800da48 <abort_allrequest+0x1e4>)
 800da1e:	f003 f88c 	bl	8010b3a <MLock>

		/* Unregister completed request */
		knl_delReqCB(reqcb);
 800da22:	68b8      	ldr	r0, [r7, #8]
 800da24:	f7ff fd4c 	bl	800d4c0 <knl_delReqCB>
	while ( !isQueEmpty(&opncb->requestq) ) {
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	3320      	adds	r3, #32
 800da2c:	4618      	mov	r0, r3
 800da2e:	f7ff fc77 	bl	800d320 <isQueEmpty>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d0bf      	beq.n	800d9b8 <abort_allrequest+0x154>
	}
	UnlockDM();
 800da38:	2100      	movs	r1, #0
 800da3a:	4803      	ldr	r0, [pc, #12]	; (800da48 <abort_allrequest+0x1e4>)
 800da3c:	f003 f88d 	bl	8010b5a <MUnlock>
}
 800da40:	bf00      	nop
 800da42:	3724      	adds	r7, #36	; 0x24
 800da44:	46bd      	mov	sp, r7
 800da46:	bd90      	pop	{r4, r7, pc}
 800da48:	24001138 	.word	0x24001138
 800da4c:	24002408 	.word	0x24002408

0800da50 <knl_close_device>:

/*
 * Device close processing
 */
EXPORT ER knl_close_device( OpnCB *opncb, UINT option )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b088      	sub	sp, #32
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
	CLSFN	closefn;
	void	*exinf;
	ID	devid;
	DevCB	*devcb;
	INT	unitno;
	ER	ercd = E_OK;
 800da5a:	2300      	movs	r3, #0
 800da5c:	61bb      	str	r3, [r7, #24]

	/* Abort all requests during processing */
	abort_allrequest(opncb);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f7ff ff00 	bl	800d864 <abort_allrequest>

	LockDM();
 800da64:	2100      	movs	r1, #0
 800da66:	4839      	ldr	r0, [pc, #228]	; (800db4c <knl_close_device+0xfc>)
 800da68:	f003 f867 	bl	8010b3a <MLock>

	devcb  = opncb->devcb;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	695b      	ldr	r3, [r3, #20]
 800da70:	617b      	str	r3, [r7, #20]
	unitno = opncb->unitno;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	699b      	ldr	r3, [r3, #24]
 800da76:	613b      	str	r3, [r7, #16]
	closefn = (CLSFN)devcb->ddev.closefn;
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da7c:	61fb      	str	r3, [r7, #28]
	exinf = devcb->ddev.exinf;
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	695b      	ldr	r3, [r3, #20]
 800da82:	60fb      	str	r3, [r7, #12]
	devid = DEVID(devcb, unitno);
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	4a32      	ldr	r2, [pc, #200]	; (800db50 <knl_close_device+0x100>)
 800da88:	1a9b      	subs	r3, r3, r2
 800da8a:	10db      	asrs	r3, r3, #3
 800da8c:	4a31      	ldr	r2, [pc, #196]	; (800db54 <knl_close_device+0x104>)
 800da8e:	fb02 f303 	mul.w	r3, r2, r3
 800da92:	3301      	adds	r3, #1
 800da94:	021b      	lsls	r3, r3, #8
 800da96:	693a      	ldr	r2, [r7, #16]
 800da98:	4413      	add	r3, r2
 800da9a:	60bb      	str	r3, [r7, #8]

	/* Delete semaphore for completion check of abortion */
	tk_del_sem(opncb->abort_semid);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daa0:	4618      	mov	r0, r3
 800daa2:	f001 fa8f 	bl	800efc4 <tk_del_sem>

	/* Free open management block */
	knl_delOpnCB(opncb, FALSE);
 800daa6:	2100      	movs	r1, #0
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7ff fce9 	bl	800d480 <knl_delOpnCB>

	/* Is device driver call required? */
	if ( knl_chkopen(devcb, unitno) ) {
 800daae:	6939      	ldr	r1, [r7, #16]
 800dab0:	6978      	ldr	r0, [r7, #20]
 800dab2:	f7ff fd1b 	bl	800d4ec <knl_chkopen>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d00b      	beq.n	800dad4 <knl_close_device+0x84>
		option &= ~TD_EJECT;
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	f023 0301 	bic.w	r3, r3, #1
 800dac2:	603b      	str	r3, [r7, #0]
		if ( (devcb->ddev.drvatr & TDA_OPENREQ) == 0 ) {
 800dac4:	697b      	ldr	r3, [r7, #20]
 800dac6:	699b      	ldr	r3, [r3, #24]
 800dac8:	f003 0301 	and.w	r3, r3, #1
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d101      	bne.n	800dad4 <knl_close_device+0x84>
			closefn = NULL;
 800dad0:	2300      	movs	r3, #0
 800dad2:	61fb      	str	r3, [r7, #28]
		}
	}

	UnlockDM();
 800dad4:	2100      	movs	r1, #0
 800dad6:	481d      	ldr	r0, [pc, #116]	; (800db4c <knl_close_device+0xfc>)
 800dad8:	f003 f83f 	bl	8010b5a <MUnlock>

	if ( closefn != NULL ) {
 800dadc:	69fb      	ldr	r3, [r7, #28]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d021      	beq.n	800db26 <knl_close_device+0xd6>
		/* Device driver call */
		DISABLE_INTERRUPT;
 800dae2:	f004 fd6c 	bl	80125be <disint>
		knl_ctxtsk->sysmode++;
 800dae6:	4b1c      	ldr	r3, [pc, #112]	; (800db58 <knl_close_device+0x108>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800daee:	b292      	uxth	r2, r2
 800daf0:	3201      	adds	r2, #1
 800daf2:	b292      	uxth	r2, r2
 800daf4:	b212      	sxth	r2, r2
 800daf6:	845a      	strh	r2, [r3, #34]	; 0x22
		ENABLE_INTERRUPT;
 800daf8:	2000      	movs	r0, #0
 800dafa:	f004 fd44 	bl	8012586 <set_basepri>
		ercd = (*closefn)(devid, option, exinf);
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	68fa      	ldr	r2, [r7, #12]
 800db02:	6839      	ldr	r1, [r7, #0]
 800db04:	68b8      	ldr	r0, [r7, #8]
 800db06:	4798      	blx	r3
 800db08:	61b8      	str	r0, [r7, #24]
		DISABLE_INTERRUPT;
 800db0a:	f004 fd58 	bl	80125be <disint>
		knl_ctxtsk->sysmode--;
 800db0e:	4b12      	ldr	r3, [pc, #72]	; (800db58 <knl_close_device+0x108>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800db16:	b292      	uxth	r2, r2
 800db18:	3a01      	subs	r2, #1
 800db1a:	b292      	uxth	r2, r2
 800db1c:	b212      	sxth	r2, r2
 800db1e:	845a      	strh	r2, [r3, #34]	; 0x22
		ENABLE_INTERRUPT;
 800db20:	2000      	movs	r0, #0
 800db22:	f004 fd30 	bl	8012586 <set_basepri>
	}

	LockDM();
 800db26:	2100      	movs	r1, #0
 800db28:	4808      	ldr	r0, [pc, #32]	; (800db4c <knl_close_device+0xfc>)
 800db2a:	f003 f806 	bl	8010b3a <MLock>
	/* Return open management block to FreeQue */
	QueInsert(&opncb->q, &knl_FreeOpnCB);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	490a      	ldr	r1, [pc, #40]	; (800db5c <knl_close_device+0x10c>)
 800db32:	4618      	mov	r0, r3
 800db34:	f7ff fc06 	bl	800d344 <QueInsert>
	UnlockDM();
 800db38:	2100      	movs	r1, #0
 800db3a:	4804      	ldr	r0, [pc, #16]	; (800db4c <knl_close_device+0xfc>)
 800db3c:	f003 f80d 	bl	8010b5a <MUnlock>

	return ercd;
 800db40:	69bb      	ldr	r3, [r7, #24]
}
 800db42:	4618      	mov	r0, r3
 800db44:	3720      	adds	r7, #32
 800db46:	46bd      	mov	sp, r7
 800db48:	bd80      	pop	{r7, pc}
 800db4a:	bf00      	nop
 800db4c:	24001138 	.word	0x24001138
 800db50:	2400114c 	.word	0x2400114c
 800db54:	38e38e39 	.word	0x38e38e39
 800db58:	24002408 	.word	0x24002408
 800db5c:	2400179c 	.word	0x2400179c

0800db60 <newReqCB>:

/*
 * Get request management block
 */
LOCAL ReqCB* newReqCB( OpnCB *opncb )
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
	ReqCB	*reqcb;

	/* Get space in request management block */
	reqcb = (ReqCB*)QueRemoveNext(&knl_FreeReqCB);
 800db68:	480b      	ldr	r0, [pc, #44]	; (800db98 <newReqCB+0x38>)
 800db6a:	f7ff fc1d 	bl	800d3a8 <QueRemoveNext>
 800db6e:	60f8      	str	r0, [r7, #12]
	if ( reqcb == NULL ) {
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d101      	bne.n	800db7a <newReqCB+0x1a>
		return NULL; /* No space */
 800db76:	2300      	movs	r3, #0
 800db78:	e00a      	b.n	800db90 <newReqCB+0x30>
	}

	/* Register as requested open device */
	QueInsert(&reqcb->q, &opncb->requestq);
 800db7a:	68fa      	ldr	r2, [r7, #12]
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	3320      	adds	r3, #32
 800db80:	4619      	mov	r1, r3
 800db82:	4610      	mov	r0, r2
 800db84:	f7ff fbde 	bl	800d344 <QueInsert>

	reqcb->opncb = opncb;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	609a      	str	r2, [r3, #8]

	return reqcb;
 800db8e:	68fb      	ldr	r3, [r7, #12]
}
 800db90:	4618      	mov	r0, r3
 800db92:	3710      	adds	r7, #16
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	24001ae4 	.word	0x24001ae4

0800db9c <knl_request>:

/*
 * Request for starting input/output to device
 */
EXPORT ID knl_request( ID dd, W start, void *buf, W size, TMO tmout, INT cmd )
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b08c      	sub	sp, #48	; 0x30
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	60b9      	str	r1, [r7, #8]
 800dba6:	607a      	str	r2, [r7, #4]
 800dba8:	603b      	str	r3, [r7, #0]
	DevCB	*devcb;
	ReqCB	*reqcb;
	UINT	m;
	ER	ercd;

	LockDM();
 800dbaa:	2100      	movs	r1, #0
 800dbac:	4865      	ldr	r0, [pc, #404]	; (800dd44 <knl_request+0x1a8>)
 800dbae:	f002 ffc4 	bl	8010b3a <MLock>

	if ( start <= -0x00010000 && start >= -0x7fffffff ) {
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dbb8:	dc06      	bgt.n	800dbc8 <knl_request+0x2c>
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbc0:	d002      	beq.n	800dbc8 <knl_request+0x2c>
		m = 0; /* Ignore open mode */
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dbc6:	e006      	b.n	800dbd6 <knl_request+0x3a>
	} else {
		m = ( cmd == TDC_READ )? TD_READ: TD_WRITE;
 800dbc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbca:	2b01      	cmp	r3, #1
 800dbcc:	d101      	bne.n	800dbd2 <knl_request+0x36>
 800dbce:	2301      	movs	r3, #1
 800dbd0:	e000      	b.n	800dbd4 <knl_request+0x38>
 800dbd2:	2302      	movs	r3, #2
 800dbd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	ercd = knl_check_devdesc(dd, m, &opncb);
 800dbd6:	f107 0314 	add.w	r3, r7, #20
 800dbda:	461a      	mov	r2, r3
 800dbdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f7ff fc18 	bl	800d414 <knl_check_devdesc>
 800dbe4:	62b8      	str	r0, [r7, #40]	; 0x28
	if ( ercd < E_OK ) {
 800dbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	f2c0 80a1 	blt.w	800dd30 <knl_request+0x194>
		goto err_ret1;
	}

	devcb = opncb->devcb;
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	695b      	ldr	r3, [r3, #20]
 800dbf2:	627b      	str	r3, [r7, #36]	; 0x24
	execfn = (EXCFN)devcb->ddev.execfn;
 800dbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbf8:	623b      	str	r3, [r7, #32]
	exinf = devcb->ddev.exinf;
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfc:	695b      	ldr	r3, [r3, #20]
 800dbfe:	61fb      	str	r3, [r7, #28]

	/* Get request management block */
	reqcb = newReqCB(opncb);
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7ff ffac 	bl	800db60 <newReqCB>
 800dc08:	61b8      	str	r0, [r7, #24]
	if ( reqcb == NULL ) {
 800dc0a:	69bb      	ldr	r3, [r7, #24]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d103      	bne.n	800dc18 <knl_request+0x7c>
		ercd = E_LIMIT;
 800dc10:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800dc14:	62bb      	str	r3, [r7, #40]	; 0x28
		goto err_ret1;
 800dc16:	e08c      	b.n	800dd32 <knl_request+0x196>
	}

	/* Set request packet */
	reqcb->req.next   = NULL;
 800dc18:	69bb      	ldr	r3, [r7, #24]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	611a      	str	r2, [r3, #16]
	reqcb->req.exinf  = NULL;
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	2200      	movs	r2, #0
 800dc22:	615a      	str	r2, [r3, #20]
	reqcb->req.devid  = DEVID(devcb, opncb->unitno);
 800dc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc26:	4a48      	ldr	r2, [pc, #288]	; (800dd48 <knl_request+0x1ac>)
 800dc28:	1a9b      	subs	r3, r3, r2
 800dc2a:	10db      	asrs	r3, r3, #3
 800dc2c:	4a47      	ldr	r2, [pc, #284]	; (800dd4c <knl_request+0x1b0>)
 800dc2e:	fb02 f303 	mul.w	r3, r2, r3
 800dc32:	3301      	adds	r3, #1
 800dc34:	021a      	lsls	r2, r3, #8
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	699b      	ldr	r3, [r3, #24]
 800dc3a:	441a      	add	r2, r3
 800dc3c:	69bb      	ldr	r3, [r7, #24]
 800dc3e:	619a      	str	r2, [r3, #24]
	reqcb->req.cmd    = cmd;
 800dc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc42:	011b      	lsls	r3, r3, #4
 800dc44:	b25b      	sxtb	r3, r3
 800dc46:	111b      	asrs	r3, r3, #4
 800dc48:	b259      	sxtb	r1, r3
 800dc4a:	69ba      	ldr	r2, [r7, #24]
 800dc4c:	7f13      	ldrb	r3, [r2, #28]
 800dc4e:	f361 0303 	bfi	r3, r1, #0, #4
 800dc52:	7713      	strb	r3, [r2, #28]
	reqcb->req.abort  = FALSE;
 800dc54:	69ba      	ldr	r2, [r7, #24]
 800dc56:	7f13      	ldrb	r3, [r2, #28]
 800dc58:	f36f 1304 	bfc	r3, #4, #1
 800dc5c:	7713      	strb	r3, [r2, #28]
	reqcb->req.start  = start;
 800dc5e:	69bb      	ldr	r3, [r7, #24]
 800dc60:	68ba      	ldr	r2, [r7, #8]
 800dc62:	621a      	str	r2, [r3, #32]
	reqcb->req.size   = size;
 800dc64:	69bb      	ldr	r3, [r7, #24]
 800dc66:	683a      	ldr	r2, [r7, #0]
 800dc68:	625a      	str	r2, [r3, #36]	; 0x24
	reqcb->req.buf    = buf;
 800dc6a:	69bb      	ldr	r3, [r7, #24]
 800dc6c:	687a      	ldr	r2, [r7, #4]
 800dc6e:	629a      	str	r2, [r3, #40]	; 0x28
	reqcb->req.asize  = 0;
 800dc70:	69bb      	ldr	r3, [r7, #24]
 800dc72:	2200      	movs	r2, #0
 800dc74:	62da      	str	r2, [r3, #44]	; 0x2c
	reqcb->req.error  = 0;
 800dc76:	69bb      	ldr	r3, [r7, #24]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	631a      	str	r2, [r3, #48]	; 0x30

	/* Indicate that it is during processing */
	reqcb->tskid = tk_get_tid();
 800dc7c:	f002 f810 	bl	800fca0 <tk_get_tid>
 800dc80:	4602      	mov	r2, r0
 800dc82:	69bb      	ldr	r3, [r7, #24]
 800dc84:	60da      	str	r2, [r3, #12]

	UnlockDM();
 800dc86:	2100      	movs	r1, #0
 800dc88:	482e      	ldr	r0, [pc, #184]	; (800dd44 <knl_request+0x1a8>)
 800dc8a:	f002 ff66 	bl	8010b5a <MUnlock>

	/* Device driver call */
	DISABLE_INTERRUPT;
 800dc8e:	f004 fc96 	bl	80125be <disint>
	knl_ctxtsk->sysmode++;
 800dc92:	4b2f      	ldr	r3, [pc, #188]	; (800dd50 <knl_request+0x1b4>)
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800dc9a:	b292      	uxth	r2, r2
 800dc9c:	3201      	adds	r2, #1
 800dc9e:	b292      	uxth	r2, r2
 800dca0:	b212      	sxth	r2, r2
 800dca2:	845a      	strh	r2, [r3, #34]	; 0x22
	ENABLE_INTERRUPT;
 800dca4:	2000      	movs	r0, #0
 800dca6:	f004 fc6e 	bl	8012586 <set_basepri>
	ercd = (*execfn)(&reqcb->req, tmout, exinf);
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	f103 0010 	add.w	r0, r3, #16
 800dcb0:	6a3b      	ldr	r3, [r7, #32]
 800dcb2:	69fa      	ldr	r2, [r7, #28]
 800dcb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dcb6:	4798      	blx	r3
 800dcb8:	62b8      	str	r0, [r7, #40]	; 0x28
	DISABLE_INTERRUPT;
 800dcba:	f004 fc80 	bl	80125be <disint>
	knl_ctxtsk->sysmode--;
 800dcbe:	4b24      	ldr	r3, [pc, #144]	; (800dd50 <knl_request+0x1b4>)
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 800dcc6:	b292      	uxth	r2, r2
 800dcc8:	3a01      	subs	r2, #1
 800dcca:	b292      	uxth	r2, r2
 800dccc:	b212      	sxth	r2, r2
 800dcce:	845a      	strh	r2, [r3, #34]	; 0x22
	ENABLE_INTERRUPT;
 800dcd0:	2000      	movs	r0, #0
 800dcd2:	f004 fc58 	bl	8012586 <set_basepri>

	LockDM();
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	481a      	ldr	r0, [pc, #104]	; (800dd44 <knl_request+0x1a8>)
 800dcda:	f002 ff2e 	bl	8010b3a <MLock>

	/* Indicate that it is not during processing */
	reqcb->tskid = 0;
 800dcde:	69bb      	ldr	r3, [r7, #24]
 800dce0:	2200      	movs	r2, #0
 800dce2:	60da      	str	r2, [r3, #12]

	/* If there is an abort completion wait task,
	   notify abort completion */
	if ( opncb->abort_tskid > 0 && --opncb->abort_cnt == 0 ) {
 800dce4:	697b      	ldr	r3, [r7, #20]
 800dce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	dd0c      	ble.n	800dd06 <knl_request+0x16a>
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcf0:	3a01      	subs	r2, #1
 800dcf2:	639a      	str	r2, [r3, #56]	; 0x38
 800dcf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d105      	bne.n	800dd06 <knl_request+0x16a>
		tk_sig_sem(opncb->abort_semid, 1);
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcfe:	2101      	movs	r1, #1
 800dd00:	4618      	mov	r0, r3
 800dd02:	f001 f9af 	bl	800f064 <tk_sig_sem>
	}

	if ( ercd < E_OK ) {
 800dd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	db0c      	blt.n	800dd26 <knl_request+0x18a>
		goto err_ret2;
	}

	UnlockDM();
 800dd0c:	2100      	movs	r1, #0
 800dd0e:	480d      	ldr	r0, [pc, #52]	; (800dd44 <knl_request+0x1a8>)
 800dd10:	f002 ff23 	bl	8010b5a <MUnlock>

	return REQID(reqcb);
 800dd14:	69bb      	ldr	r3, [r7, #24]
 800dd16:	4a0f      	ldr	r2, [pc, #60]	; (800dd54 <knl_request+0x1b8>)
 800dd18:	1a9b      	subs	r3, r3, r2
 800dd1a:	109b      	asrs	r3, r3, #2
 800dd1c:	4a0e      	ldr	r2, [pc, #56]	; (800dd58 <knl_request+0x1bc>)
 800dd1e:	fb02 f303 	mul.w	r3, r2, r3
 800dd22:	3301      	adds	r3, #1
 800dd24:	e00a      	b.n	800dd3c <knl_request+0x1a0>
		goto err_ret2;
 800dd26:	bf00      	nop

err_ret2:
	knl_delReqCB(reqcb);
 800dd28:	69b8      	ldr	r0, [r7, #24]
 800dd2a:	f7ff fbc9 	bl	800d4c0 <knl_delReqCB>
 800dd2e:	e000      	b.n	800dd32 <knl_request+0x196>
		goto err_ret1;
 800dd30:	bf00      	nop
err_ret1:
	UnlockDM();
 800dd32:	2100      	movs	r1, #0
 800dd34:	4803      	ldr	r0, [pc, #12]	; (800dd44 <knl_request+0x1a8>)
 800dd36:	f002 ff10 	bl	8010b5a <MUnlock>
	return ercd;
 800dd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3730      	adds	r7, #48	; 0x30
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	24001138 	.word	0x24001138
 800dd48:	2400114c 	.word	0x2400114c
 800dd4c:	38e38e39 	.word	0x38e38e39
 800dd50:	24002408 	.word	0x24002408
 800dd54:	240017a4 	.word	0x240017a4
 800dd58:	c4ec4ec5 	.word	0xc4ec4ec5

0800dd5c <tk_rea_dev>:

/*
 * Start reading from device
 */
SYSCALL ID tk_rea_dev( ID dd, W start, void *buf, SZ size, TMO tmout )
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b088      	sub	sp, #32
 800dd60:	af02      	add	r7, sp, #8
 800dd62:	60f8      	str	r0, [r7, #12]
 800dd64:	60b9      	str	r1, [r7, #8]
 800dd66:	607a      	str	r2, [r7, #4]
 800dd68:	603b      	str	r3, [r7, #0]
	ER	ercd;

	ercd = knl_request(dd, start, buf, size, tmout, TDC_READ);
 800dd6a:	2301      	movs	r3, #1
 800dd6c:	9301      	str	r3, [sp, #4]
 800dd6e:	6a3b      	ldr	r3, [r7, #32]
 800dd70:	9300      	str	r3, [sp, #0]
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	68b9      	ldr	r1, [r7, #8]
 800dd78:	68f8      	ldr	r0, [r7, #12]
 800dd7a:	f7ff ff0f 	bl	800db9c <knl_request>
 800dd7e:	6178      	str	r0, [r7, #20]

	return ercd;
 800dd80:	697b      	ldr	r3, [r7, #20]
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3718      	adds	r7, #24
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
	...

0800dd8c <knl_devmgr_startup>:

/*
 * Device management startup function
 */
EXPORT void knl_devmgr_startup( void )
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	af00      	add	r7, sp, #0
	LockDM();
 800dd90:	2100      	movs	r1, #0
 800dd92:	4807      	ldr	r0, [pc, #28]	; (800ddb0 <knl_devmgr_startup+0x24>)
 800dd94:	f002 fed1 	bl	8010b3a <MLock>

	/* Initialization of open device management queue */
	QueInit(&(knl_resource_control_block.openq));
 800dd98:	4806      	ldr	r0, [pc, #24]	; (800ddb4 <knl_devmgr_startup+0x28>)
 800dd9a:	f7ff fab1 	bl	800d300 <QueInit>
	knl_resource_control_block.dissus = 0;
 800dd9e:	4b05      	ldr	r3, [pc, #20]	; (800ddb4 <knl_devmgr_startup+0x28>)
 800dda0:	2200      	movs	r2, #0
 800dda2:	609a      	str	r2, [r3, #8]
	
	UnlockDM();
 800dda4:	2100      	movs	r1, #0
 800dda6:	4802      	ldr	r0, [pc, #8]	; (800ddb0 <knl_devmgr_startup+0x24>)
 800dda8:	f002 fed7 	bl	8010b5a <MUnlock>

	return;
 800ddac:	bf00      	nop
}
 800ddae:	bd80      	pop	{r7, pc}
 800ddb0:	24001138 	.word	0x24001138
 800ddb4:	24001aec 	.word	0x24001aec

0800ddb8 <knl_devmgr_cleanup>:

/*
 * Device management cleanup function
 */
EXPORT void knl_devmgr_cleanup( void )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
	OpnCB	*opncb;

	/* Do nothing if it is not used even once */
	if ( knl_resource_control_block.openq.next == NULL ) {
 800ddbe:	4b1a      	ldr	r3, [pc, #104]	; (800de28 <knl_devmgr_cleanup+0x70>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d02c      	beq.n	800de20 <knl_devmgr_cleanup+0x68>
		return;
	}

	LockDM();
 800ddc6:	2100      	movs	r1, #0
 800ddc8:	4818      	ldr	r0, [pc, #96]	; (800de2c <knl_devmgr_cleanup+0x74>)
 800ddca:	f002 feb6 	bl	8010b3a <MLock>

	/* Free suspend disable request */
	knl_DisSusCnt -= knl_resource_control_block.dissus;
 800ddce:	4b18      	ldr	r3, [pc, #96]	; (800de30 <knl_devmgr_cleanup+0x78>)
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	4b15      	ldr	r3, [pc, #84]	; (800de28 <knl_devmgr_cleanup+0x70>)
 800ddd4:	689b      	ldr	r3, [r3, #8]
 800ddd6:	1ad3      	subs	r3, r2, r3
 800ddd8:	4a15      	ldr	r2, [pc, #84]	; (800de30 <knl_devmgr_cleanup+0x78>)
 800ddda:	6013      	str	r3, [r2, #0]
	knl_resource_control_block.dissus = 0;
 800dddc:	4b12      	ldr	r3, [pc, #72]	; (800de28 <knl_devmgr_cleanup+0x70>)
 800ddde:	2200      	movs	r2, #0
 800dde0:	609a      	str	r2, [r3, #8]

	/* Close all open devices */
	while ( !isQueEmpty(&(knl_resource_control_block.openq)) ) {
 800dde2:	e012      	b.n	800de0a <knl_devmgr_cleanup+0x52>
		opncb = RESQ_OPNCB(knl_resource_control_block.openq.next);
 800dde4:	4b10      	ldr	r3, [pc, #64]	; (800de28 <knl_devmgr_cleanup+0x70>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	3b08      	subs	r3, #8
 800ddea:	607b      	str	r3, [r7, #4]

		/* Indicate that it is during close processing */
		opncb->resid = 0;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	611a      	str	r2, [r3, #16]

		UnlockDM();
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	480d      	ldr	r0, [pc, #52]	; (800de2c <knl_devmgr_cleanup+0x74>)
 800ddf6:	f002 feb0 	bl	8010b5a <MUnlock>

		/* Device close processing */
		knl_close_device(opncb, 0);
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f7ff fe27 	bl	800da50 <knl_close_device>

		LockDM();
 800de02:	2100      	movs	r1, #0
 800de04:	4809      	ldr	r0, [pc, #36]	; (800de2c <knl_devmgr_cleanup+0x74>)
 800de06:	f002 fe98 	bl	8010b3a <MLock>
	while ( !isQueEmpty(&(knl_resource_control_block.openq)) ) {
 800de0a:	4807      	ldr	r0, [pc, #28]	; (800de28 <knl_devmgr_cleanup+0x70>)
 800de0c:	f7ff fa88 	bl	800d320 <isQueEmpty>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d0e6      	beq.n	800dde4 <knl_devmgr_cleanup+0x2c>
	}
	UnlockDM();
 800de16:	2100      	movs	r1, #0
 800de18:	4804      	ldr	r0, [pc, #16]	; (800de2c <knl_devmgr_cleanup+0x74>)
 800de1a:	f002 fe9e 	bl	8010b5a <MUnlock>

	return;
 800de1e:	e000      	b.n	800de22 <knl_devmgr_cleanup+0x6a>
		return;
 800de20:	bf00      	nop
}
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	24001aec 	.word	0x24001aec
 800de2c:	24001138 	.word	0x24001138
 800de30:	24000fd0 	.word	0x24000fd0

0800de34 <knl_initDevIO>:

/*
 * Initialization sequence of device input/output-related
 */
EXPORT ER knl_initDevIO( void )
{
 800de34:	b580      	push	{r7, lr}
 800de36:	b082      	sub	sp, #8
 800de38:	af00      	add	r7, sp, #0
	INT	i;

	QueInit(&knl_FreeOpnCB);
 800de3a:	481f      	ldr	r0, [pc, #124]	; (800deb8 <knl_initDevIO+0x84>)
 800de3c:	f7ff fa60 	bl	800d300 <QueInit>
	for ( i = 0; i < MAX_OPNDEV; ++i ) {
 800de40:	2300      	movs	r3, #0
 800de42:	607b      	str	r3, [r7, #4]
 800de44:	e011      	b.n	800de6a <knl_initDevIO+0x36>
		knl_OpnCBtbl[i].resid = 0;
 800de46:	4a1d      	ldr	r2, [pc, #116]	; (800debc <knl_initDevIO+0x88>)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	019b      	lsls	r3, r3, #6
 800de4c:	4413      	add	r3, r2
 800de4e:	3310      	adds	r3, #16
 800de50:	2200      	movs	r2, #0
 800de52:	601a      	str	r2, [r3, #0]
		QueInsert(&knl_OpnCBtbl[i].q, &knl_FreeOpnCB);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	019b      	lsls	r3, r3, #6
 800de58:	4a18      	ldr	r2, [pc, #96]	; (800debc <knl_initDevIO+0x88>)
 800de5a:	4413      	add	r3, r2
 800de5c:	4916      	ldr	r1, [pc, #88]	; (800deb8 <knl_initDevIO+0x84>)
 800de5e:	4618      	mov	r0, r3
 800de60:	f7ff fa70 	bl	800d344 <QueInsert>
	for ( i = 0; i < MAX_OPNDEV; ++i ) {
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	3301      	adds	r3, #1
 800de68:	607b      	str	r3, [r7, #4]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2b0f      	cmp	r3, #15
 800de6e:	ddea      	ble.n	800de46 <knl_initDevIO+0x12>
	}

	QueInit(&knl_FreeReqCB);
 800de70:	4813      	ldr	r0, [pc, #76]	; (800dec0 <knl_initDevIO+0x8c>)
 800de72:	f7ff fa45 	bl	800d300 <QueInit>
	for ( i = 0; i < MAX_REQDEV; ++i ) {
 800de76:	2300      	movs	r3, #0
 800de78:	607b      	str	r3, [r7, #4]
 800de7a:	e015      	b.n	800dea8 <knl_initDevIO+0x74>
		knl_ReqCBtbl[i].opncb = NULL;
 800de7c:	4a11      	ldr	r2, [pc, #68]	; (800dec4 <knl_initDevIO+0x90>)
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2134      	movs	r1, #52	; 0x34
 800de82:	fb01 f303 	mul.w	r3, r1, r3
 800de86:	4413      	add	r3, r2
 800de88:	3308      	adds	r3, #8
 800de8a:	2200      	movs	r2, #0
 800de8c:	601a      	str	r2, [r3, #0]
		QueInsert(&knl_ReqCBtbl[i].q, &knl_FreeReqCB);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2234      	movs	r2, #52	; 0x34
 800de92:	fb02 f303 	mul.w	r3, r2, r3
 800de96:	4a0b      	ldr	r2, [pc, #44]	; (800dec4 <knl_initDevIO+0x90>)
 800de98:	4413      	add	r3, r2
 800de9a:	4909      	ldr	r1, [pc, #36]	; (800dec0 <knl_initDevIO+0x8c>)
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7ff fa51 	bl	800d344 <QueInsert>
	for ( i = 0; i < MAX_REQDEV; ++i ) {
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	3301      	adds	r3, #1
 800dea6:	607b      	str	r3, [r7, #4]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2b0f      	cmp	r3, #15
 800deac:	dde6      	ble.n	800de7c <knl_initDevIO+0x48>
	}

	return E_OK;
 800deae:	2300      	movs	r3, #0
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	2400179c 	.word	0x2400179c
 800debc:	2400139c 	.word	0x2400139c
 800dec0:	24001ae4 	.word	0x24001ae4
 800dec4:	240017a4 	.word	0x240017a4

0800dec8 <knl_finishDevIO>:

/*
 * Finalization sequence of device input/output-related
 */
EXPORT ER knl_finishDevIO( void )
{
 800dec8:	b480      	push	{r7}
 800deca:	af00      	add	r7, sp, #0
	return E_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <QueInit>:
{
 800ded8:	b480      	push	{r7}
 800deda:	b083      	sub	sp, #12
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	605a      	str	r2, [r3, #4]
}
 800deec:	bf00      	nop
 800deee:	370c      	adds	r7, #12
 800def0:	46bd      	mov	sp, r7
 800def2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def6:	4770      	bx	lr

0800def8 <isQueEmpty>:
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	429a      	cmp	r2, r3
 800df08:	bf0c      	ite	eq
 800df0a:	2301      	moveq	r3, #1
 800df0c:	2300      	movne	r3, #0
 800df0e:	b2db      	uxtb	r3, r3
}
 800df10:	4618      	mov	r0, r3
 800df12:	370c      	adds	r7, #12
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr

0800df1c <QueInsert>:
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	685a      	ldr	r2, [r3, #4]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	683a      	ldr	r2, [r7, #0]
 800df32:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	687a      	ldr	r2, [r7, #4]
 800df40:	605a      	str	r2, [r3, #4]
}
 800df42:	bf00      	nop
 800df44:	370c      	adds	r7, #12
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr

0800df4e <QueRemoveNext>:
{
 800df4e:	b480      	push	{r7}
 800df50:	b085      	sub	sp, #20
 800df52:	af00      	add	r7, sp, #0
 800df54:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	429a      	cmp	r2, r3
 800df5e:	d101      	bne.n	800df64 <QueRemoveNext+0x16>
		return NULL;
 800df60:	2300      	movs	r3, #0
 800df62:	e00b      	b.n	800df7c <QueRemoveNext+0x2e>
	entry = que->next;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681a      	ldr	r2, [r3, #0]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	687a      	ldr	r2, [r7, #4]
 800df78:	605a      	str	r2, [r3, #4]
	return entry;
 800df7a:	68fb      	ldr	r3, [r7, #12]
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3714      	adds	r7, #20
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <knl_isTaskIndependent>:

/*
 * If it is the task-independent part, TRUE
 */
Inline BOOL knl_isTaskIndependent( void )
{
 800df88:	b480      	push	{r7}
 800df8a:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 800df8c:	4b05      	ldr	r3, [pc, #20]	; (800dfa4 <knl_isTaskIndependent+0x1c>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	bfcc      	ite	gt
 800df94:	2301      	movgt	r3, #1
 800df96:	2300      	movle	r3, #0
 800df98:	b2db      	uxtb	r3, r3
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr
 800dfa4:	240010d8 	.word	0x240010d8

0800dfa8 <knl_eventflag_cond>:

/*
 * Check for event flag wait release condition
 */
Inline BOOL knl_eventflag_cond( FLGCB *flgcb, UINT waiptn, UINT wfmode )
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b085      	sub	sp, #20
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	607a      	str	r2, [r7, #4]
	if ( (wfmode & TWF_ORW) != 0 ) {
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f003 0301 	and.w	r3, r3, #1
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d009      	beq.n	800dfd2 <knl_eventflag_cond+0x2a>
		return ( (flgcb->flgptn & waiptn) != 0 );
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	695a      	ldr	r2, [r3, #20]
 800dfc2:	68bb      	ldr	r3, [r7, #8]
 800dfc4:	4013      	ands	r3, r2
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	bf14      	ite	ne
 800dfca:	2301      	movne	r3, #1
 800dfcc:	2300      	moveq	r3, #0
 800dfce:	b2db      	uxtb	r3, r3
 800dfd0:	e009      	b.n	800dfe6 <knl_eventflag_cond+0x3e>
	} else {
		return ( (flgcb->flgptn & waiptn) == waiptn );
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	695a      	ldr	r2, [r3, #20]
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	4013      	ands	r3, r2
 800dfda:	68ba      	ldr	r2, [r7, #8]
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	bf0c      	ite	eq
 800dfe0:	2301      	moveq	r3, #1
 800dfe2:	2300      	movne	r3, #0
 800dfe4:	b2db      	uxtb	r3, r3
	}
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3714      	adds	r7, #20
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr
	...

0800dff4 <knl_eventflag_initialize>:

/*
 * Initialization of event flag control block 
 */
EXPORT ER knl_eventflag_initialize( void )
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
	if ( NUM_FLGID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_flgcb);
 800dffa:	480e      	ldr	r0, [pc, #56]	; (800e034 <knl_eventflag_initialize+0x40>)
 800dffc:	f7ff ff6c 	bl	800ded8 <QueInit>
	end = knl_flgcb_table + NUM_FLGID;
 800e000:	4b0d      	ldr	r3, [pc, #52]	; (800e038 <knl_eventflag_initialize+0x44>)
 800e002:	603b      	str	r3, [r7, #0]
	for ( flgcb = knl_flgcb_table; flgcb < end; flgcb++ ) {
 800e004:	4b0d      	ldr	r3, [pc, #52]	; (800e03c <knl_eventflag_initialize+0x48>)
 800e006:	607b      	str	r3, [r7, #4]
 800e008:	e00a      	b.n	800e020 <knl_eventflag_initialize+0x2c>
		flgcb->flgid = 0;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2200      	movs	r2, #0
 800e00e:	609a      	str	r2, [r3, #8]
		QueInsert(&flgcb->wait_queue, &knl_free_flgcb);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	4908      	ldr	r1, [pc, #32]	; (800e034 <knl_eventflag_initialize+0x40>)
 800e014:	4618      	mov	r0, r3
 800e016:	f7ff ff81 	bl	800df1c <QueInsert>
	for ( flgcb = knl_flgcb_table; flgcb < end; flgcb++ ) {
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	3318      	adds	r3, #24
 800e01e:	607b      	str	r3, [r7, #4]
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	429a      	cmp	r2, r3
 800e026:	d3f0      	bcc.n	800e00a <knl_eventflag_initialize+0x16>
	}

	return E_OK;
 800e028:	2300      	movs	r3, #0
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3708      	adds	r7, #8
 800e02e:	46bd      	mov	sp, r7
 800e030:	bd80      	pop	{r7, pc}
 800e032:	bf00      	nop
 800e034:	24001c78 	.word	0x24001c78
 800e038:	24001c78 	.word	0x24001c78
 800e03c:	24001af8 	.word	0x24001af8

0800e040 <tk_cre_flg>:

/*
 * Create event flag
 */
SYSCALL ID tk_cre_flg( CONST T_CFLG *pk_cflg )
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b088      	sub	sp, #32
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_FLGATR = {
 800e048:	2309      	movs	r3, #9
 800e04a:	61bb      	str	r3, [r7, #24]
#endif
	FLGCB	*flgcb;
	ID	flgid;
	ER	ercd;

	CHECK_RSATR(pk_cflg->flgatr, VALID_FLGATR);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	685a      	ldr	r2, [r3, #4]
 800e050:	69bb      	ldr	r3, [r7, #24]
 800e052:	43db      	mvns	r3, r3
 800e054:	4013      	ands	r3, r2
 800e056:	2b00      	cmp	r3, #0
 800e058:	d002      	beq.n	800e060 <tk_cre_flg+0x20>
 800e05a:	f06f 030a 	mvn.w	r3, #10
 800e05e:	e03e      	b.n	800e0de <tk_cre_flg+0x9e>

	BEGIN_CRITICAL_SECTION;
 800e060:	f004 faad 	bl	80125be <disint>
 800e064:	6178      	str	r0, [r7, #20]
	/* Get control block from FreeQue */
	flgcb = (FLGCB*)QueRemoveNext(&knl_free_flgcb);
 800e066:	4820      	ldr	r0, [pc, #128]	; (800e0e8 <tk_cre_flg+0xa8>)
 800e068:	f7ff ff71 	bl	800df4e <QueRemoveNext>
 800e06c:	6138      	str	r0, [r7, #16]
	if ( flgcb == NULL ) {
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d103      	bne.n	800e07c <tk_cre_flg+0x3c>
		ercd = E_LIMIT;
 800e074:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800e078:	61fb      	str	r3, [r7, #28]
 800e07a:	e01d      	b.n	800e0b8 <tk_cre_flg+0x78>
	} else {
		flgid = ID_FLG(flgcb - knl_flgcb_table);
 800e07c:	693b      	ldr	r3, [r7, #16]
 800e07e:	4a1b      	ldr	r2, [pc, #108]	; (800e0ec <tk_cre_flg+0xac>)
 800e080:	1a9b      	subs	r3, r3, r2
 800e082:	10db      	asrs	r3, r3, #3
 800e084:	4a1a      	ldr	r2, [pc, #104]	; (800e0f0 <tk_cre_flg+0xb0>)
 800e086:	fb02 f303 	mul.w	r3, r2, r3
 800e08a:	3301      	adds	r3, #1
 800e08c:	60fb      	str	r3, [r7, #12]

		/* Initialize control block */
		QueInit(&flgcb->wait_queue);
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	4618      	mov	r0, r3
 800e092:	f7ff ff21 	bl	800ded8 <QueInit>
		flgcb->flgid = flgid;
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	609a      	str	r2, [r3, #8]
		flgcb->exinf = pk_cflg->exinf;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	60da      	str	r2, [r3, #12]
		flgcb->flgatr = pk_cflg->flgatr;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	685a      	ldr	r2, [r3, #4]
 800e0a8:	693b      	ldr	r3, [r7, #16]
 800e0aa:	611a      	str	r2, [r3, #16]
		flgcb->flgptn = pk_cflg->iflgptn;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	689a      	ldr	r2, [r3, #8]
 800e0b0:	693b      	ldr	r3, [r7, #16]
 800e0b2:	615a      	str	r2, [r3, #20]
		if ( (pk_cflg->flgatr & TA_DSNAME) != 0 ) {
			knl_strncpy((char*)flgcb->name, (char*)pk_cflg->dsname,
				OBJECT_NAME_LENGTH);
		}
#endif
		ercd = flgid;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	61fb      	str	r3, [r7, #28]
	}
	END_CRITICAL_SECTION;
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d10b      	bne.n	800e0d6 <tk_cre_flg+0x96>
 800e0be:	4b0d      	ldr	r3, [pc, #52]	; (800e0f4 <tk_cre_flg+0xb4>)
 800e0c0:	681a      	ldr	r2, [r3, #0]
 800e0c2:	4b0d      	ldr	r3, [pc, #52]	; (800e0f8 <tk_cre_flg+0xb8>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d005      	beq.n	800e0d6 <tk_cre_flg+0x96>
 800e0ca:	4b0c      	ldr	r3, [pc, #48]	; (800e0fc <tk_cre_flg+0xbc>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d101      	bne.n	800e0d6 <tk_cre_flg+0x96>
 800e0d2:	f003 f9e1 	bl	8011498 <knl_dispatch>
 800e0d6:	6978      	ldr	r0, [r7, #20]
 800e0d8:	f004 fa55 	bl	8012586 <set_basepri>

	return ercd;
 800e0dc:	69fb      	ldr	r3, [r7, #28]
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3720      	adds	r7, #32
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	24001c78 	.word	0x24001c78
 800e0ec:	24001af8 	.word	0x24001af8
 800e0f0:	aaaaaaab 	.word	0xaaaaaaab
 800e0f4:	24002408 	.word	0x24002408
 800e0f8:	2400240c 	.word	0x2400240c
 800e0fc:	24002404 	.word	0x24002404

0800e100 <tk_del_flg>:
#ifdef USE_FUNC_TK_DEL_FLG
/*
 * Delete event flag
 */
SYSCALL ER tk_del_flg( ID flgid )
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
	FLGCB	*flgcb;
	ER	ercd = E_OK;
 800e108:	2300      	movs	r3, #0
 800e10a:	617b      	str	r3, [r7, #20]

	CHECK_FLGID(flgid);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	dd02      	ble.n	800e118 <tk_del_flg+0x18>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2b10      	cmp	r3, #16
 800e116:	dd02      	ble.n	800e11e <tk_del_flg+0x1e>
 800e118:	f06f 0311 	mvn.w	r3, #17
 800e11c:	e032      	b.n	800e184 <tk_del_flg+0x84>

	flgcb = get_flgcb(flgid);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	1e5a      	subs	r2, r3, #1
 800e122:	4613      	mov	r3, r2
 800e124:	005b      	lsls	r3, r3, #1
 800e126:	4413      	add	r3, r2
 800e128:	00db      	lsls	r3, r3, #3
 800e12a:	4a18      	ldr	r2, [pc, #96]	; (800e18c <tk_del_flg+0x8c>)
 800e12c:	4413      	add	r3, r2
 800e12e:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800e130:	f004 fa45 	bl	80125be <disint>
 800e134:	60f8      	str	r0, [r7, #12]
	if ( flgcb->flgid == 0 ) {
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	689b      	ldr	r3, [r3, #8]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d103      	bne.n	800e146 <tk_del_flg+0x46>
		ercd = E_NOEXS;
 800e13e:	f06f 0329 	mvn.w	r3, #41	; 0x29
 800e142:	617b      	str	r3, [r7, #20]
 800e144:	e00b      	b.n	800e15e <tk_del_flg+0x5e>
	} else {
		/* Release wait state of task (E_DLT) */
		knl_wait_delete(&flgcb->wait_queue);
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	4618      	mov	r0, r3
 800e14a:	f002 fa6d 	bl	8010628 <knl_wait_delete>

		/* Return to FreeQue */
		QueInsert(&flgcb->wait_queue, &knl_free_flgcb);
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	490f      	ldr	r1, [pc, #60]	; (800e190 <tk_del_flg+0x90>)
 800e152:	4618      	mov	r0, r3
 800e154:	f7ff fee2 	bl	800df1c <QueInsert>
		flgcb->flgid = 0;
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	2200      	movs	r2, #0
 800e15c:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d10b      	bne.n	800e17c <tk_del_flg+0x7c>
 800e164:	4b0b      	ldr	r3, [pc, #44]	; (800e194 <tk_del_flg+0x94>)
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	4b0b      	ldr	r3, [pc, #44]	; (800e198 <tk_del_flg+0x98>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	429a      	cmp	r2, r3
 800e16e:	d005      	beq.n	800e17c <tk_del_flg+0x7c>
 800e170:	4b0a      	ldr	r3, [pc, #40]	; (800e19c <tk_del_flg+0x9c>)
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <tk_del_flg+0x7c>
 800e178:	f003 f98e 	bl	8011498 <knl_dispatch>
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f004 fa02 	bl	8012586 <set_basepri>

	return ercd;
 800e182:	697b      	ldr	r3, [r7, #20]
}
 800e184:	4618      	mov	r0, r3
 800e186:	3718      	adds	r7, #24
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	24001af8 	.word	0x24001af8
 800e190:	24001c78 	.word	0x24001c78
 800e194:	24002408 	.word	0x24002408
 800e198:	2400240c 	.word	0x2400240c
 800e19c:	24002404 	.word	0x24002404

0800e1a0 <tk_set_flg>:

/*
 * Event flag set
 */
SYSCALL ER tk_set_flg( ID flgid, UINT setptn )
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b08a      	sub	sp, #40	; 0x28
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6039      	str	r1, [r7, #0]
	FLGCB	*flgcb;
	TCB	*tcb;
	QUEUE	*queue;
	UINT	wfmode, waiptn;
	ER	ercd = E_OK;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	623b      	str	r3, [r7, #32]

	CHECK_FLGID(flgid);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	dd02      	ble.n	800e1ba <tk_set_flg+0x1a>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b10      	cmp	r3, #16
 800e1b8:	dd02      	ble.n	800e1c0 <tk_set_flg+0x20>
 800e1ba:	f06f 0311 	mvn.w	r3, #17
 800e1be:	e06a      	b.n	800e296 <tk_set_flg+0xf6>

	flgcb = get_flgcb(flgid);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	1e5a      	subs	r2, r3, #1
 800e1c4:	4613      	mov	r3, r2
 800e1c6:	005b      	lsls	r3, r3, #1
 800e1c8:	4413      	add	r3, r2
 800e1ca:	00db      	lsls	r3, r3, #3
 800e1cc:	4a34      	ldr	r2, [pc, #208]	; (800e2a0 <tk_set_flg+0x100>)
 800e1ce:	4413      	add	r3, r2
 800e1d0:	61fb      	str	r3, [r7, #28]

	BEGIN_CRITICAL_SECTION;
 800e1d2:	f004 f9f4 	bl	80125be <disint>
 800e1d6:	61b8      	str	r0, [r7, #24]
	if ( flgcb->flgid == 0 ) {
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	689b      	ldr	r3, [r3, #8]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d103      	bne.n	800e1e8 <tk_set_flg+0x48>
		ercd = E_NOEXS;
 800e1e0:	f06f 0329 	mvn.w	r3, #41	; 0x29
 800e1e4:	623b      	str	r3, [r7, #32]
		goto error_exit;
 800e1e6:	e043      	b.n	800e270 <tk_set_flg+0xd0>
	}

	/* Set event flag */
	flgcb->flgptn |= setptn;
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	695a      	ldr	r2, [r3, #20]
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	431a      	orrs	r2, r3
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	615a      	str	r2, [r3, #20]

	/* Search task which should be released */
	queue = flgcb->wait_queue.next;
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	627b      	str	r3, [r7, #36]	; 0x24
	while ( queue != &flgcb->wait_queue ) {
 800e1fa:	e033      	b.n	800e264 <tk_set_flg+0xc4>
		tcb = (TCB*)queue;
 800e1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fe:	617b      	str	r3, [r7, #20]
		queue = queue->next;
 800e200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	627b      	str	r3, [r7, #36]	; 0x24

		/* Meet condition for release wait? */
		waiptn = tcb->winfo.flg.waiptn;
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e20a:	613b      	str	r3, [r7, #16]
		wfmode = tcb->winfo.flg.wfmode;
 800e20c:	697b      	ldr	r3, [r7, #20]
 800e20e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e210:	60fb      	str	r3, [r7, #12]
		if ( knl_eventflag_cond(flgcb, waiptn, wfmode) ) {
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	6939      	ldr	r1, [r7, #16]
 800e216:	69f8      	ldr	r0, [r7, #28]
 800e218:	f7ff fec6 	bl	800dfa8 <knl_eventflag_cond>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d020      	beq.n	800e264 <tk_set_flg+0xc4>

			/* Release wait */
			*tcb->winfo.flg.p_flgptn = flgcb->flgptn;
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e226:	69fa      	ldr	r2, [r7, #28]
 800e228:	6952      	ldr	r2, [r2, #20]
 800e22a:	601a      	str	r2, [r3, #0]
			knl_wait_release_ok(tcb);
 800e22c:	6978      	ldr	r0, [r7, #20]
 800e22e:	f002 f96e 	bl	801050e <knl_wait_release_ok>

			/* Clear event flag */
			if ( (wfmode & TWF_BITCLR) != 0 ) {
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	f003 0320 	and.w	r3, r3, #32
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d00a      	beq.n	800e252 <tk_set_flg+0xb2>
				if ( (flgcb->flgptn &= ~waiptn) == 0 ) {
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	695a      	ldr	r2, [r3, #20]
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	43db      	mvns	r3, r3
 800e244:	401a      	ands	r2, r3
 800e246:	69fb      	ldr	r3, [r7, #28]
 800e248:	615a      	str	r2, [r3, #20]
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	695b      	ldr	r3, [r3, #20]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00d      	beq.n	800e26e <tk_set_flg+0xce>
					break;
				}
			}
			if ( (wfmode & TWF_CLR) != 0 ) {
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	f003 0310 	and.w	r3, r3, #16
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d003      	beq.n	800e264 <tk_set_flg+0xc4>
				flgcb->flgptn = 0;
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	2200      	movs	r2, #0
 800e260:	615a      	str	r2, [r3, #20]
				break;
 800e262:	e005      	b.n	800e270 <tk_set_flg+0xd0>
	while ( queue != &flgcb->wait_queue ) {
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e268:	429a      	cmp	r2, r3
 800e26a:	d1c7      	bne.n	800e1fc <tk_set_flg+0x5c>
			}
		}
	}

    error_exit:
 800e26c:	e000      	b.n	800e270 <tk_set_flg+0xd0>
					break;
 800e26e:	bf00      	nop
	END_CRITICAL_SECTION;
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d10b      	bne.n	800e28e <tk_set_flg+0xee>
 800e276:	4b0b      	ldr	r3, [pc, #44]	; (800e2a4 <tk_set_flg+0x104>)
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	4b0b      	ldr	r3, [pc, #44]	; (800e2a8 <tk_set_flg+0x108>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	429a      	cmp	r2, r3
 800e280:	d005      	beq.n	800e28e <tk_set_flg+0xee>
 800e282:	4b0a      	ldr	r3, [pc, #40]	; (800e2ac <tk_set_flg+0x10c>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d101      	bne.n	800e28e <tk_set_flg+0xee>
 800e28a:	f003 f905 	bl	8011498 <knl_dispatch>
 800e28e:	69b8      	ldr	r0, [r7, #24]
 800e290:	f004 f979 	bl	8012586 <set_basepri>

	return ercd;
 800e294:	6a3b      	ldr	r3, [r7, #32]
}
 800e296:	4618      	mov	r0, r3
 800e298:	3728      	adds	r7, #40	; 0x28
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	24001af8 	.word	0x24001af8
 800e2a4:	24002408 	.word	0x24002408
 800e2a8:	2400240c 	.word	0x2400240c
 800e2ac:	24002404 	.word	0x24002404

0800e2b0 <tk_clr_flg>:

/*
 * Clear event flag 
 */
SYSCALL ER tk_clr_flg( ID flgid, UINT clrptn )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
	FLGCB	*flgcb;
	ER	ercd = E_OK;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	617b      	str	r3, [r7, #20]

	CHECK_FLGID(flgid);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	dd02      	ble.n	800e2ca <tk_clr_flg+0x1a>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2b10      	cmp	r3, #16
 800e2c8:	dd02      	ble.n	800e2d0 <tk_clr_flg+0x20>
 800e2ca:	f06f 0311 	mvn.w	r3, #17
 800e2ce:	e02c      	b.n	800e32a <tk_clr_flg+0x7a>

	flgcb = get_flgcb(flgid);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	1e5a      	subs	r2, r3, #1
 800e2d4:	4613      	mov	r3, r2
 800e2d6:	005b      	lsls	r3, r3, #1
 800e2d8:	4413      	add	r3, r2
 800e2da:	00db      	lsls	r3, r3, #3
 800e2dc:	4a15      	ldr	r2, [pc, #84]	; (800e334 <tk_clr_flg+0x84>)
 800e2de:	4413      	add	r3, r2
 800e2e0:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800e2e2:	f004 f96c 	bl	80125be <disint>
 800e2e6:	60f8      	str	r0, [r7, #12]
	if ( flgcb->flgid == 0 ) {
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	689b      	ldr	r3, [r3, #8]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d103      	bne.n	800e2f8 <tk_clr_flg+0x48>
		ercd = E_NOEXS;
 800e2f0:	f06f 0329 	mvn.w	r3, #41	; 0x29
 800e2f4:	617b      	str	r3, [r7, #20]
 800e2f6:	e005      	b.n	800e304 <tk_clr_flg+0x54>
	} else {
		flgcb->flgptn &= clrptn;
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	695a      	ldr	r2, [r3, #20]
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	401a      	ands	r2, r3
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	615a      	str	r2, [r3, #20]
	}
	END_CRITICAL_SECTION;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d10b      	bne.n	800e322 <tk_clr_flg+0x72>
 800e30a:	4b0b      	ldr	r3, [pc, #44]	; (800e338 <tk_clr_flg+0x88>)
 800e30c:	681a      	ldr	r2, [r3, #0]
 800e30e:	4b0b      	ldr	r3, [pc, #44]	; (800e33c <tk_clr_flg+0x8c>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	429a      	cmp	r2, r3
 800e314:	d005      	beq.n	800e322 <tk_clr_flg+0x72>
 800e316:	4b0a      	ldr	r3, [pc, #40]	; (800e340 <tk_clr_flg+0x90>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d101      	bne.n	800e322 <tk_clr_flg+0x72>
 800e31e:	f003 f8bb 	bl	8011498 <knl_dispatch>
 800e322:	68f8      	ldr	r0, [r7, #12]
 800e324:	f004 f92f 	bl	8012586 <set_basepri>

	return ercd;
 800e328:	697b      	ldr	r3, [r7, #20]
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3718      	adds	r7, #24
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	24001af8 	.word	0x24001af8
 800e338:	24002408 	.word	0x24002408
 800e33c:	2400240c 	.word	0x2400240c
 800e340:	24002404 	.word	0x24002404

0800e344 <flg_chg_pri>:

/*
 * Processing if the priority of wait task changes
 */
LOCAL void flg_chg_pri( TCB *tcb, INT oldpri )
{
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	6039      	str	r1, [r7, #0]
	FLGCB	*flgcb;

	flgcb = get_flgcb(tcb->wid);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e352:	1e5a      	subs	r2, r3, #1
 800e354:	4613      	mov	r3, r2
 800e356:	005b      	lsls	r3, r3, #1
 800e358:	4413      	add	r3, r2
 800e35a:	00db      	lsls	r3, r3, #3
 800e35c:	4a05      	ldr	r2, [pc, #20]	; (800e374 <flg_chg_pri+0x30>)
 800e35e:	4413      	add	r3, r2
 800e360:	60fb      	str	r3, [r7, #12]
	knl_gcb_change_priority((GCB*)flgcb, tcb);
 800e362:	6879      	ldr	r1, [r7, #4]
 800e364:	68f8      	ldr	r0, [r7, #12]
 800e366:	f002 f9b1 	bl	80106cc <knl_gcb_change_priority>
}
 800e36a:	bf00      	nop
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	24001af8 	.word	0x24001af8

0800e378 <tk_wai_flg>:

/*
 * Event flag wait
 */
SYSCALL ER tk_wai_flg( ID flgid, UINT waiptn, UINT wfmode, UINT *p_flgptn, TMO tmout )
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b088      	sub	sp, #32
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	607a      	str	r2, [r7, #4]
 800e384:	603b      	str	r3, [r7, #0]
	FLGCB	*flgcb;
	ER	ercd = E_OK;
 800e386:	2300      	movs	r3, #0
 800e388:	617b      	str	r3, [r7, #20]

	CHECK_FLGID(flgid);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	dd02      	ble.n	800e396 <tk_wai_flg+0x1e>
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2b10      	cmp	r3, #16
 800e394:	dd02      	ble.n	800e39c <tk_wai_flg+0x24>
 800e396:	f06f 0311 	mvn.w	r3, #17
 800e39a:	e0a3      	b.n	800e4e4 <tk_wai_flg+0x16c>
	CHECK_PAR(waiptn != 0);
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d102      	bne.n	800e3a8 <tk_wai_flg+0x30>
 800e3a2:	f06f 0310 	mvn.w	r3, #16
 800e3a6:	e09d      	b.n	800e4e4 <tk_wai_flg+0x16c>
	CHECK_PAR((wfmode & ~(TWF_ORW|TWF_CLR|TWF_BITCLR)) == 0);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f023 0331 	bic.w	r3, r3, #49	; 0x31
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d002      	beq.n	800e3b8 <tk_wai_flg+0x40>
 800e3b2:	f06f 0310 	mvn.w	r3, #16
 800e3b6:	e095      	b.n	800e4e4 <tk_wai_flg+0x16c>
	CHECK_TMOUT(tmout);
 800e3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3be:	da02      	bge.n	800e3c6 <tk_wai_flg+0x4e>
 800e3c0:	f06f 0310 	mvn.w	r3, #16
 800e3c4:	e08e      	b.n	800e4e4 <tk_wai_flg+0x16c>
	CHECK_DISPATCH();
 800e3c6:	4b49      	ldr	r3, [pc, #292]	; (800e4ec <tk_wai_flg+0x174>)
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d10d      	bne.n	800e3ea <tk_wai_flg+0x72>
 800e3ce:	f7ff fddb 	bl	800df88 <knl_isTaskIndependent>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d108      	bne.n	800e3ea <tk_wai_flg+0x72>
 800e3d8:	4b45      	ldr	r3, [pc, #276]	; (800e4f0 <tk_wai_flg+0x178>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d004      	beq.n	800e3ea <tk_wai_flg+0x72>
 800e3e0:	f004 f8e0 	bl	80125a4 <get_basepri>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d002      	beq.n	800e3f0 <tk_wai_flg+0x78>
 800e3ea:	f06f 0318 	mvn.w	r3, #24
 800e3ee:	e079      	b.n	800e4e4 <tk_wai_flg+0x16c>

	flgcb = get_flgcb(flgid);
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	1e5a      	subs	r2, r3, #1
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	005b      	lsls	r3, r3, #1
 800e3f8:	4413      	add	r3, r2
 800e3fa:	00db      	lsls	r3, r3, #3
 800e3fc:	4a3d      	ldr	r2, [pc, #244]	; (800e4f4 <tk_wai_flg+0x17c>)
 800e3fe:	4413      	add	r3, r2
 800e400:	61fb      	str	r3, [r7, #28]

	BEGIN_CRITICAL_SECTION;
 800e402:	f004 f8dc 	bl	80125be <disint>
 800e406:	61b8      	str	r0, [r7, #24]
	if ( flgcb->flgid == 0 ) {
 800e408:	69fb      	ldr	r3, [r7, #28]
 800e40a:	689b      	ldr	r3, [r3, #8]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d103      	bne.n	800e418 <tk_wai_flg+0xa0>
		ercd = E_NOEXS;
 800e410:	f06f 0329 	mvn.w	r3, #41	; 0x29
 800e414:	617b      	str	r3, [r7, #20]
		goto error_exit;
 800e416:	e052      	b.n	800e4be <tk_wai_flg+0x146>
	}
	if ( (flgcb->flgatr & TA_WMUL) == 0 && !isQueEmpty(&flgcb->wait_queue) ) {
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	691b      	ldr	r3, [r3, #16]
 800e41c:	f003 0308 	and.w	r3, r3, #8
 800e420:	2b00      	cmp	r3, #0
 800e422:	d10a      	bne.n	800e43a <tk_wai_flg+0xc2>
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	4618      	mov	r0, r3
 800e428:	f7ff fd66 	bl	800def8 <isQueEmpty>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d103      	bne.n	800e43a <tk_wai_flg+0xc2>
		/* Disable multiple tasks wait */
		ercd = E_OBJ;
 800e432:	f06f 0328 	mvn.w	r3, #40	; 0x28
 800e436:	617b      	str	r3, [r7, #20]
		goto error_exit;
 800e438:	e041      	b.n	800e4be <tk_wai_flg+0x146>
	}

	/* Meet condition for release wait? */
	if ( knl_eventflag_cond(flgcb, waiptn, wfmode) ) {
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	68b9      	ldr	r1, [r7, #8]
 800e43e:	69f8      	ldr	r0, [r7, #28]
 800e440:	f7ff fdb2 	bl	800dfa8 <knl_eventflag_cond>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d018      	beq.n	800e47c <tk_wai_flg+0x104>
		*p_flgptn = flgcb->flgptn;
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	695a      	ldr	r2, [r3, #20]
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	601a      	str	r2, [r3, #0]

		/* Clear event flag */
		if ( (wfmode & TWF_BITCLR) != 0 ) {
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f003 0320 	and.w	r3, r3, #32
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d006      	beq.n	800e46a <tk_wai_flg+0xf2>
			flgcb->flgptn &= ~waiptn;
 800e45c:	69fb      	ldr	r3, [r7, #28]
 800e45e:	695a      	ldr	r2, [r3, #20]
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	43db      	mvns	r3, r3
 800e464:	401a      	ands	r2, r3
 800e466:	69fb      	ldr	r3, [r7, #28]
 800e468:	615a      	str	r2, [r3, #20]
		}
		if ( (wfmode & TWF_CLR) != 0 ) {
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f003 0310 	and.w	r3, r3, #16
 800e470:	2b00      	cmp	r3, #0
 800e472:	d024      	beq.n	800e4be <tk_wai_flg+0x146>
			flgcb->flgptn = 0;
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	2200      	movs	r2, #0
 800e478:	615a      	str	r2, [r3, #20]
 800e47a:	e020      	b.n	800e4be <tk_wai_flg+0x146>
		}
	} else {
		/* Ready for wait */
		knl_ctxtsk->wspec = ( (flgcb->flgatr & TA_TPRI) != 0 )?
 800e47c:	69fb      	ldr	r3, [r7, #28]
 800e47e:	691b      	ldr	r3, [r3, #16]
 800e480:	f003 0301 	and.w	r3, r3, #1
					&knl_wspec_flg_tpri: &knl_wspec_flg_tfifo;
 800e484:	2b00      	cmp	r3, #0
 800e486:	d001      	beq.n	800e48c <tk_wai_flg+0x114>
 800e488:	4a1b      	ldr	r2, [pc, #108]	; (800e4f8 <tk_wai_flg+0x180>)
 800e48a:	e000      	b.n	800e48e <tk_wai_flg+0x116>
 800e48c:	4a1b      	ldr	r2, [pc, #108]	; (800e4fc <tk_wai_flg+0x184>)
		knl_ctxtsk->wspec = ( (flgcb->flgatr & TA_TPRI) != 0 )?
 800e48e:	4b18      	ldr	r3, [pc, #96]	; (800e4f0 <tk_wai_flg+0x178>)
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	62da      	str	r2, [r3, #44]	; 0x2c
		knl_ctxtsk->wercd = &ercd;
 800e494:	4b16      	ldr	r3, [pc, #88]	; (800e4f0 <tk_wai_flg+0x178>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f107 0214 	add.w	r2, r7, #20
 800e49c:	63da      	str	r2, [r3, #60]	; 0x3c
		knl_ctxtsk->winfo.flg.waiptn = waiptn;
 800e49e:	4b14      	ldr	r3, [pc, #80]	; (800e4f0 <tk_wai_flg+0x178>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	68ba      	ldr	r2, [r7, #8]
 800e4a4:	641a      	str	r2, [r3, #64]	; 0x40
		knl_ctxtsk->winfo.flg.wfmode = wfmode;
 800e4a6:	4b12      	ldr	r3, [pc, #72]	; (800e4f0 <tk_wai_flg+0x178>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	645a      	str	r2, [r3, #68]	; 0x44
		knl_ctxtsk->winfo.flg.p_flgptn = p_flgptn;
 800e4ae:	4b10      	ldr	r3, [pc, #64]	; (800e4f0 <tk_wai_flg+0x178>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	683a      	ldr	r2, [r7, #0]
 800e4b4:	649a      	str	r2, [r3, #72]	; 0x48
		knl_gcb_make_wait((GCB*)flgcb, tmout);
 800e4b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4b8:	69f8      	ldr	r0, [r7, #28]
 800e4ba:	f002 f8d1 	bl	8010660 <knl_gcb_make_wait>
	}

    error_exit:
	END_CRITICAL_SECTION;
 800e4be:	69bb      	ldr	r3, [r7, #24]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d10b      	bne.n	800e4dc <tk_wai_flg+0x164>
 800e4c4:	4b0a      	ldr	r3, [pc, #40]	; (800e4f0 <tk_wai_flg+0x178>)
 800e4c6:	681a      	ldr	r2, [r3, #0]
 800e4c8:	4b0d      	ldr	r3, [pc, #52]	; (800e500 <tk_wai_flg+0x188>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d005      	beq.n	800e4dc <tk_wai_flg+0x164>
 800e4d0:	4b06      	ldr	r3, [pc, #24]	; (800e4ec <tk_wai_flg+0x174>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d101      	bne.n	800e4dc <tk_wai_flg+0x164>
 800e4d8:	f002 ffde 	bl	8011498 <knl_dispatch>
 800e4dc:	69b8      	ldr	r0, [r7, #24]
 800e4de:	f004 f852 	bl	8012586 <set_basepri>

	return ercd;
 800e4e2:	697b      	ldr	r3, [r7, #20]
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3720      	adds	r7, #32
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	24002404 	.word	0x24002404
 800e4f0:	24002408 	.word	0x24002408
 800e4f4:	24001af8 	.word	0x24001af8
 800e4f8:	08012ae4 	.word	0x08012ae4
 800e4fc:	08012ad8 	.word	0x08012ad8
 800e500:	2400240c 	.word	0x2400240c

0800e504 <QueInit>:
{
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	605a      	str	r2, [r3, #4]
}
 800e518:	bf00      	nop
 800e51a:	370c      	adds	r7, #12
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr

0800e524 <QueInsert>:
{
 800e524:	b480      	push	{r7}
 800e526:	b083      	sub	sp, #12
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	685a      	ldr	r2, [r3, #4]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	683a      	ldr	r2, [r7, #0]
 800e53a:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	685b      	ldr	r3, [r3, #4]
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	687a      	ldr	r2, [r7, #4]
 800e548:	605a      	str	r2, [r3, #4]
}
 800e54a:	bf00      	nop
 800e54c:	370c      	adds	r7, #12
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr
	...

0800e558 <knl_mailbox_initialize>:

/*
 * Initialization of mailbox control block 
 */
EXPORT ER knl_mailbox_initialize( void )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
	if ( NUM_MBXID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mbxcb);
 800e55e:	480e      	ldr	r0, [pc, #56]	; (800e598 <knl_mailbox_initialize+0x40>)
 800e560:	f7ff ffd0 	bl	800e504 <QueInit>
	end = knl_mbxcb_table + NUM_MBXID;
 800e564:	4b0d      	ldr	r3, [pc, #52]	; (800e59c <knl_mailbox_initialize+0x44>)
 800e566:	603b      	str	r3, [r7, #0]
	for ( mbxcb = knl_mbxcb_table; mbxcb < end; mbxcb++ ) {
 800e568:	4b0d      	ldr	r3, [pc, #52]	; (800e5a0 <knl_mailbox_initialize+0x48>)
 800e56a:	607b      	str	r3, [r7, #4]
 800e56c:	e00a      	b.n	800e584 <knl_mailbox_initialize+0x2c>
		mbxcb->mbxid = 0;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	2200      	movs	r2, #0
 800e572:	609a      	str	r2, [r3, #8]
		QueInsert(&mbxcb->wait_queue, &knl_free_mbxcb);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	4908      	ldr	r1, [pc, #32]	; (800e598 <knl_mailbox_initialize+0x40>)
 800e578:	4618      	mov	r0, r3
 800e57a:	f7ff ffd3 	bl	800e524 <QueInsert>
	for ( mbxcb = knl_mbxcb_table; mbxcb < end; mbxcb++ ) {
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	331c      	adds	r3, #28
 800e582:	607b      	str	r3, [r7, #4]
 800e584:	687a      	ldr	r2, [r7, #4]
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d3f0      	bcc.n	800e56e <knl_mailbox_initialize+0x16>
	}

	return E_OK;
 800e58c:	2300      	movs	r3, #0
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	bd80      	pop	{r7, pc}
 800e596:	bf00      	nop
 800e598:	24001d60 	.word	0x24001d60
 800e59c:	24001d60 	.word	0x24001d60
 800e5a0:	24001c80 	.word	0x24001c80

0800e5a4 <QueInit>:
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b083      	sub	sp, #12
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	687a      	ldr	r2, [r7, #4]
 800e5b6:	605a      	str	r2, [r3, #4]
}
 800e5b8:	bf00      	nop
 800e5ba:	370c      	adds	r7, #12
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c2:	4770      	bx	lr

0800e5c4 <QueInsert>:
{
 800e5c4:	b480      	push	{r7}
 800e5c6:	b083      	sub	sp, #12
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
 800e5cc:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	685a      	ldr	r2, [r3, #4]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	683a      	ldr	r2, [r7, #0]
 800e5da:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	687a      	ldr	r2, [r7, #4]
 800e5e2:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	605a      	str	r2, [r3, #4]
}
 800e5ea:	bf00      	nop
 800e5ec:	370c      	adds	r7, #12
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr

0800e5f6 <QueRemove>:
{
 800e5f6:	b480      	push	{r7}
 800e5f8:	b083      	sub	sp, #12
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	687a      	ldr	r2, [r7, #4]
 800e604:	429a      	cmp	r2, r3
 800e606:	d009      	beq.n	800e61c <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	687a      	ldr	r2, [r7, #4]
 800e60e:	6812      	ldr	r2, [r2, #0]
 800e610:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	6852      	ldr	r2, [r2, #4]
 800e61a:	605a      	str	r2, [r3, #4]
}
 800e61c:	bf00      	nop
 800e61e:	370c      	adds	r7, #12
 800e620:	46bd      	mov	sp, r7
 800e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e626:	4770      	bx	lr

0800e628 <knl_searchFreeArea>:
 *	or larger than
 *      'blksz' but closest.
 *	If it does not exist, return '&imacb->freeque'.
 */
EXPORT QUEUE* knl_searchFreeArea( IMACB *imacb, W blksz )
{
 800e628:	b480      	push	{r7}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
	QUEUE	*q = &imacb->freeque;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	330c      	adds	r3, #12
 800e636:	60fb      	str	r3, [r7, #12]

	/* For area whose memory pool size is less than 1/4,
	   search from smaller size.
	   Otherwise, search from larger size. */
	if ( blksz > imacb->memsz / 4 ) {
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	da00      	bge.n	800e642 <knl_searchFreeArea+0x1a>
 800e640:	3303      	adds	r3, #3
 800e642:	109b      	asrs	r3, r3, #2
 800e644:	461a      	mov	r2, r3
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	4293      	cmp	r3, r2
 800e64a:	dd2b      	ble.n	800e6a4 <knl_searchFreeArea+0x7c>
		/* Search from larger size. */
		W fsz = 0;
 800e64c:	2300      	movs	r3, #0
 800e64e:	60bb      	str	r3, [r7, #8]
		while ( (q = q->prev) != &imacb->freeque ) {
 800e650:	e010      	b.n	800e674 <knl_searchFreeArea+0x4c>
			fsz = FreeSize(q);
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	3308      	adds	r3, #8
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	60bb      	str	r3, [r7, #8]
			if ( fsz <= blksz ) {
 800e65a:	68ba      	ldr	r2, [r7, #8]
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	429a      	cmp	r2, r3
 800e660:	dc08      	bgt.n	800e674 <knl_searchFreeArea+0x4c>
				return ( fsz < blksz )? q->next: q;
 800e662:	68ba      	ldr	r2, [r7, #8]
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	429a      	cmp	r2, r3
 800e668:	da02      	bge.n	800e670 <knl_searchFreeArea+0x48>
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	e024      	b.n	800e6ba <knl_searchFreeArea+0x92>
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	e022      	b.n	800e6ba <knl_searchFreeArea+0x92>
		while ( (q = q->prev) != &imacb->freeque ) {
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	60fb      	str	r3, [r7, #12]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	330c      	adds	r3, #12
 800e67e:	68fa      	ldr	r2, [r7, #12]
 800e680:	429a      	cmp	r2, r3
 800e682:	d1e6      	bne.n	800e652 <knl_searchFreeArea+0x2a>
			}
		}
		return ( fsz >= blksz )? q->next: q;
 800e684:	68ba      	ldr	r2, [r7, #8]
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	429a      	cmp	r2, r3
 800e68a:	db02      	blt.n	800e692 <knl_searchFreeArea+0x6a>
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	e013      	b.n	800e6ba <knl_searchFreeArea+0x92>
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	e011      	b.n	800e6ba <knl_searchFreeArea+0x92>
	} else {
		/* Search from smaller size. */
		while ( (q = q->next) != &imacb->freeque ) {
			if ( FreeSize(q) >= blksz ) {
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	3308      	adds	r3, #8
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	461a      	mov	r2, r3
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	dd08      	ble.n	800e6b6 <knl_searchFreeArea+0x8e>
		while ( (q = q->next) != &imacb->freeque ) {
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	60fb      	str	r3, [r7, #12]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	330c      	adds	r3, #12
 800e6ae:	68fa      	ldr	r2, [r7, #12]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d1f0      	bne.n	800e696 <knl_searchFreeArea+0x6e>
 800e6b4:	e000      	b.n	800e6b8 <knl_searchFreeArea+0x90>
				break;
 800e6b6:	bf00      	nop
			}
		}
		return q;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
	}
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3714      	adds	r7, #20
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr

0800e6c6 <knl_appendFreeArea>:
 *	|   +-----------------------+	    +-----------------------+
 *	|   | AreaQue		    |	    | AreaQue		    |
 *	v   +-----------------------+	    +-----------------------+
 */
EXPORT void knl_appendFreeArea( IMACB *imacb, QUEUE *aq )
{
 800e6c6:	b580      	push	{r7, lr}
 800e6c8:	b084      	sub	sp, #16
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
 800e6ce:	6039      	str	r1, [r7, #0]
	QUEUE	*fq;
	W	size = AreaSize(aq);
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	681a      	ldr	r2, [r3, #0]
 800e6d4:	683b      	ldr	r3, [r7, #0]
 800e6d6:	3308      	adds	r3, #8
 800e6d8:	1ad3      	subs	r3, r2, r3
 800e6da:	60fb      	str	r3, [r7, #12]
	/* Registration position search */
	/*  Search the free area whose size is equal to 'blksz',
	 *  or larger than 'blksz' but closest.
	 *  If it does not exist, return '&imacb->freeque'.
	 */
	fq = knl_searchFreeArea(imacb, size);
 800e6dc:	68f9      	ldr	r1, [r7, #12]
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f7ff ffa2 	bl	800e628 <knl_searchFreeArea>
 800e6e4:	60b8      	str	r0, [r7, #8]

	/* Register */
	clrAreaFlag(aq, AREA_USE);
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	f023 0301 	bic.w	r3, r3, #1
 800e6ee:	461a      	mov	r2, r3
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	605a      	str	r2, [r3, #4]
	if ( fq != &imacb->freeque && FreeSize(fq) == size ) {
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	330c      	adds	r3, #12
 800e6f8:	68ba      	ldr	r2, [r7, #8]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d027      	beq.n	800e74e <knl_appendFreeArea+0x88>
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	3308      	adds	r3, #8
 800e702:	685b      	ldr	r3, [r3, #4]
 800e704:	461a      	mov	r2, r3
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	4293      	cmp	r3, r2
 800e70a:	d120      	bne.n	800e74e <knl_appendFreeArea+0x88>
		/* FreeQue Same size */
		(aq + 2)->next = (fq + 1)->next;
 800e70c:	68bb      	ldr	r3, [r7, #8]
 800e70e:	f103 0208 	add.w	r2, r3, #8
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	3310      	adds	r3, #16
 800e716:	6812      	ldr	r2, [r2, #0]
 800e718:	601a      	str	r2, [r3, #0]
		(fq + 1)->next = aq + 2;
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	3308      	adds	r3, #8
 800e71e:	683a      	ldr	r2, [r7, #0]
 800e720:	3210      	adds	r2, #16
 800e722:	601a      	str	r2, [r3, #0]
		(aq + 2)->prev = fq + 1;
 800e724:	683b      	ldr	r3, [r7, #0]
 800e726:	3310      	adds	r3, #16
 800e728:	68ba      	ldr	r2, [r7, #8]
 800e72a:	3208      	adds	r2, #8
 800e72c:	605a      	str	r2, [r3, #4]
		if( (aq + 2)->next != NULL ) {
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	3310      	adds	r3, #16
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d005      	beq.n	800e744 <knl_appendFreeArea+0x7e>
			(aq + 2)->next->prev = aq + 2;
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	3310      	adds	r3, #16
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	683a      	ldr	r2, [r7, #0]
 800e740:	3210      	adds	r2, #16
 800e742:	605a      	str	r2, [r3, #4]
		}
		(aq + 1)->next = NULL;
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	3308      	adds	r3, #8
 800e748:	2200      	movs	r2, #0
 800e74a:	601a      	str	r2, [r3, #0]
 800e74c:	e00e      	b.n	800e76c <knl_appendFreeArea+0xa6>
	} else {
		/* FreeQue Size order */
		QueInsert(aq + 1, fq);
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	3308      	adds	r3, #8
 800e752:	68b9      	ldr	r1, [r7, #8]
 800e754:	4618      	mov	r0, r3
 800e756:	f7ff ff35 	bl	800e5c4 <QueInsert>
		(aq + 2)->next = NULL;
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	3310      	adds	r3, #16
 800e75e:	2200      	movs	r2, #0
 800e760:	601a      	str	r2, [r3, #0]
		(aq + 2)->prev = (QUEUE*)size;
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	3310      	adds	r3, #16
 800e766:	68fa      	ldr	r2, [r7, #12]
 800e768:	605a      	str	r2, [r3, #4]
	}
}
 800e76a:	bf00      	nop
 800e76c:	bf00      	nop
 800e76e:	3710      	adds	r7, #16
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}

0800e774 <knl_removeFreeQue>:

/*
 * Delete from FreeQue
 */
EXPORT void knl_removeFreeQue( QUEUE *fq )
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
	if ( fq->next == NULL ) {	/* FreeQue Same size */
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d115      	bne.n	800e7b0 <knl_removeFreeQue+0x3c>
		(fq + 1)->prev->next = (fq + 1)->next;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f103 0208 	add.w	r2, r3, #8
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	3308      	adds	r3, #8
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	6812      	ldr	r2, [r2, #0]
 800e792:	601a      	str	r2, [r3, #0]
		if ( (fq + 1)->next != NULL ) {
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	3308      	adds	r3, #8
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d020      	beq.n	800e7e0 <knl_removeFreeQue+0x6c>
			(fq + 1)->next->prev = (fq + 1)->prev;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f103 0208 	add.w	r2, r3, #8
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	3308      	adds	r3, #8
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	6852      	ldr	r2, [r2, #4]
 800e7ac:	605a      	str	r2, [r3, #4]
			QueInsert((fq + 1)->next - 1, fq);
			(fq + 1)->next->prev = (fq + 1)->prev;
		}
		QueRemove(fq);
	}
}
 800e7ae:	e017      	b.n	800e7e0 <knl_removeFreeQue+0x6c>
		if ( (fq + 1)->next != NULL ) {		/* having FreeQue Same size */
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	3308      	adds	r3, #8
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d00f      	beq.n	800e7da <knl_removeFreeQue+0x66>
			QueInsert((fq + 1)->next - 1, fq);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	3308      	adds	r3, #8
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	3b08      	subs	r3, #8
 800e7c2:	6879      	ldr	r1, [r7, #4]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7ff fefd 	bl	800e5c4 <QueInsert>
			(fq + 1)->next->prev = (fq + 1)->prev;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f103 0208 	add.w	r2, r3, #8
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	3308      	adds	r3, #8
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	6852      	ldr	r2, [r2, #4]
 800e7d8:	605a      	str	r2, [r3, #4]
		QueRemove(fq);
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7ff ff0b 	bl	800e5f6 <QueRemove>
}
 800e7e0:	bf00      	nop
 800e7e2:	3708      	adds	r7, #8
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bd80      	pop	{r7, pc}

0800e7e8 <knl_insertAreaQue>:
/*
 * Register area
 *	Insert 'ent' just after 'que.'
 */
EXPORT void knl_insertAreaQue( QUEUE *que, QUEUE *ent )
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b083      	sub	sp, #12
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
	ent->prev = que;
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	687a      	ldr	r2, [r7, #4]
 800e7f6:	605a      	str	r2, [r3, #4]
	ent->next = que->next;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	601a      	str	r2, [r3, #0]
	Assign(que->next->prev, ent);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	f003 0201 	and.w	r2, r3, #1
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	431a      	orrs	r2, r3
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	605a      	str	r2, [r3, #4]
	que->next = ent;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	683a      	ldr	r2, [r7, #0]
 800e818:	601a      	str	r2, [r3, #0]
}
 800e81a:	bf00      	nop
 800e81c:	370c      	adds	r7, #12
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr

0800e826 <knl_removeAreaQue>:

/*
 * Delete area
 */
EXPORT void knl_removeAreaQue( QUEUE *aq )
{
 800e826:	b480      	push	{r7}
 800e828:	b083      	sub	sp, #12
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]
	Mask(aq->prev)->next = aq->next;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	f023 0301 	bic.w	r3, r3, #1
 800e836:	461a      	mov	r2, r3
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	6013      	str	r3, [r2, #0]
	Assign(aq->next->prev, Mask(aq->prev));
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	f003 0201 	and.w	r2, r3, #1
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	685b      	ldr	r3, [r3, #4]
 800e84c:	f023 0301 	bic.w	r3, r3, #1
 800e850:	431a      	orrs	r2, r3
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	605a      	str	r2, [r3, #4]
}
 800e858:	bf00      	nop
 800e85a:	370c      	adds	r7, #12
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr

0800e864 <knl_Imalloc>:

/*
 * Memory allocate
 */
EXPORT void* knl_Imalloc( SZ size )
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b086      	sub	sp, #24
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
	QUEUE	*q, *aq, *aq2;
	UINT	imask;

	/* If it is smaller than the minimum fragment size,
	   allocate the minimum size to it. */
	if( size <= 0 ) {
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	dc01      	bgt.n	800e876 <knl_Imalloc+0x12>
		return (void *)NULL;
 800e872:	2300      	movs	r3, #0
 800e874:	e045      	b.n	800e902 <knl_Imalloc+0x9e>
	} else 	if ( size < MIN_FRAGMENT ) {
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2b0f      	cmp	r3, #15
 800e87a:	d802      	bhi.n	800e882 <knl_Imalloc+0x1e>
		size = MIN_FRAGMENT;
 800e87c:	2310      	movs	r3, #16
 800e87e:	607b      	str	r3, [r7, #4]
 800e880:	e004      	b.n	800e88c <knl_Imalloc+0x28>
	} else {
		size = ROUND(size);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	3307      	adds	r3, #7
 800e886:	f023 0307 	bic.w	r3, r3, #7
 800e88a:	607b      	str	r3, [r7, #4]
	}

	DI(imask);  /* Exclusive control by interrupt disable */
 800e88c:	f003 fe97 	bl	80125be <disint>
 800e890:	6138      	str	r0, [r7, #16]

	/* Search FreeQue */
	q = knl_searchFreeArea(knl_imacb, size);
 800e892:	4b1e      	ldr	r3, [pc, #120]	; (800e90c <knl_Imalloc+0xa8>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	6879      	ldr	r1, [r7, #4]
 800e898:	4618      	mov	r0, r3
 800e89a:	f7ff fec5 	bl	800e628 <knl_searchFreeArea>
 800e89e:	6178      	str	r0, [r7, #20]
	if ( q == &(knl_imacb->freeque) ) {
 800e8a0:	4b1a      	ldr	r3, [pc, #104]	; (800e90c <knl_Imalloc+0xa8>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	330c      	adds	r3, #12
 800e8a6:	697a      	ldr	r2, [r7, #20]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d102      	bne.n	800e8b2 <knl_Imalloc+0x4e>
		q = NULL; /* Insufficient memory */
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	617b      	str	r3, [r7, #20]
		goto err_ret;
 800e8b0:	e023      	b.n	800e8fa <knl_Imalloc+0x96>
	}

	/* There is free area: Split from FreeQue once */
	knl_removeFreeQue(q);
 800e8b2:	6978      	ldr	r0, [r7, #20]
 800e8b4:	f7ff ff5e 	bl	800e774 <knl_removeFreeQue>

	aq = q - 1;
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	3b08      	subs	r3, #8
 800e8bc:	60fb      	str	r3, [r7, #12]

	/* If there are fragments smaller than the minimum fragment size,
	   allocate them also */
	if ( FreeSize(q) - size >= MIN_FRAGMENT + sizeof(QUEUE) ) {
 800e8be:	697b      	ldr	r3, [r7, #20]
 800e8c0:	3308      	adds	r3, #8
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	1ad3      	subs	r3, r2, r3
 800e8ca:	2b17      	cmp	r3, #23
 800e8cc:	d90e      	bls.n	800e8ec <knl_Imalloc+0x88>

		/* Divide area into 2 */
		aq2 = (QUEUE*)((VB*)(aq + 1) + size);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	3308      	adds	r3, #8
 800e8d2:	68fa      	ldr	r2, [r7, #12]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	60bb      	str	r3, [r7, #8]
		knl_insertAreaQue(aq, aq2);
 800e8d8:	68b9      	ldr	r1, [r7, #8]
 800e8da:	68f8      	ldr	r0, [r7, #12]
 800e8dc:	f7ff ff84 	bl	800e7e8 <knl_insertAreaQue>

		/* Register remaining area to FreeQue */
		knl_appendFreeArea(knl_imacb, aq2);
 800e8e0:	4b0a      	ldr	r3, [pc, #40]	; (800e90c <knl_Imalloc+0xa8>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	68b9      	ldr	r1, [r7, #8]
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7ff feed 	bl	800e6c6 <knl_appendFreeArea>
	}
	setAreaFlag(aq, AREA_USE);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	f043 0301 	orr.w	r3, r3, #1
 800e8f4:	461a      	mov	r2, r3
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	605a      	str	r2, [r3, #4]

err_ret:
	EI(imask);
 800e8fa:	6938      	ldr	r0, [r7, #16]
 800e8fc:	f003 fe43 	bl	8012586 <set_basepri>

	return (void *)q;
 800e900:	697b      	ldr	r3, [r7, #20]
}
 800e902:	4618      	mov	r0, r3
 800e904:	3718      	adds	r7, #24
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}
 800e90a:	bf00      	nop
 800e90c:	24001d68 	.word	0x24001d68

0800e910 <knl_Ifree>:

/*
 * Free memory
 */
EXPORT void  knl_Ifree( void *ptr )
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
	QUEUE	*aq;
	UINT	imask;

	DI(imask);  /* Exclusive control by interrupt disable */
 800e918:	f003 fe51 	bl	80125be <disint>
 800e91c:	60b8      	str	r0, [r7, #8]

	aq = (QUEUE*)ptr - 1;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	3b08      	subs	r3, #8
 800e922:	60fb      	str	r3, [r7, #12]
	clrAreaFlag(aq, AREA_USE);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	f023 0301 	bic.w	r3, r3, #1
 800e92c:	461a      	mov	r2, r3
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	605a      	str	r2, [r3, #4]

	if ( !chkAreaFlag(aq->next, AREA_USE) ) {
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	685b      	ldr	r3, [r3, #4]
 800e938:	f003 0301 	and.w	r3, r3, #1
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d10a      	bne.n	800e956 <knl_Ifree+0x46>
		/* Merge with free area in after location */
		knl_removeFreeQue(aq->next + 1);
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	3308      	adds	r3, #8
 800e946:	4618      	mov	r0, r3
 800e948:	f7ff ff14 	bl	800e774 <knl_removeFreeQue>
		knl_removeAreaQue(aq->next);
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4618      	mov	r0, r3
 800e952:	f7ff ff68 	bl	800e826 <knl_removeAreaQue>
	}

	if ( !chkAreaFlag(aq->prev, AREA_USE) ) {
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	685b      	ldr	r3, [r3, #4]
 800e95c:	f003 0301 	and.w	r3, r3, #1
 800e960:	2b00      	cmp	r3, #0
 800e962:	d10c      	bne.n	800e97e <knl_Ifree+0x6e>
		/* Merge with free area in front location */
		aq = aq->prev;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	685b      	ldr	r3, [r3, #4]
 800e968:	60fb      	str	r3, [r7, #12]
		knl_removeFreeQue(aq + 1);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	3308      	adds	r3, #8
 800e96e:	4618      	mov	r0, r3
 800e970:	f7ff ff00 	bl	800e774 <knl_removeFreeQue>
		knl_removeAreaQue(aq->next);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4618      	mov	r0, r3
 800e97a:	f7ff ff54 	bl	800e826 <knl_removeAreaQue>
	}

	knl_appendFreeArea(knl_imacb, aq);
 800e97e:	4b06      	ldr	r3, [pc, #24]	; (800e998 <knl_Ifree+0x88>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	68f9      	ldr	r1, [r7, #12]
 800e984:	4618      	mov	r0, r3
 800e986:	f7ff fe9e 	bl	800e6c6 <knl_appendFreeArea>

	EI(imask);
 800e98a:	68b8      	ldr	r0, [r7, #8]
 800e98c:	f003 fdfb 	bl	8012586 <set_basepri>
}
 800e990:	bf00      	nop
 800e992:	3710      	adds	r7, #16
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}
 800e998:	24001d68 	.word	0x24001d68

0800e99c <initIMACB>:

/*
 * IMACB Initialization 
 */
LOCAL void initIMACB( void )
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	af00      	add	r7, sp, #0
	QueInit(&(knl_imacb->areaque));
 800e9a0:	4b06      	ldr	r3, [pc, #24]	; (800e9bc <initIMACB+0x20>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	3304      	adds	r3, #4
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7ff fdfc 	bl	800e5a4 <QueInit>
	QueInit(&(knl_imacb->freeque));
 800e9ac:	4b03      	ldr	r3, [pc, #12]	; (800e9bc <initIMACB+0x20>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	330c      	adds	r3, #12
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f7ff fdf6 	bl	800e5a4 <QueInit>
}
 800e9b8:	bf00      	nop
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	24001d68 	.word	0x24001d68

0800e9c0 <knl_init_Imalloc>:

/*
 * Imalloc initial setting 
 */
EXPORT ER knl_init_Imalloc( void )
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
	QUEUE	*top, *end;

	/* Align top with 4 byte unit alignment for IMACB */
	knl_lowmem_top = (void *)(((UW)knl_lowmem_top + 3) & ~0x00000003UL);
 800e9c6:	4b2e      	ldr	r3, [pc, #184]	; (800ea80 <knl_init_Imalloc+0xc0>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	3303      	adds	r3, #3
 800e9cc:	f023 0303 	bic.w	r3, r3, #3
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	4b2b      	ldr	r3, [pc, #172]	; (800ea80 <knl_init_Imalloc+0xc0>)
 800e9d4:	601a      	str	r2, [r3, #0]
	knl_imacb = (IMACB*)knl_lowmem_top;
 800e9d6:	4b2a      	ldr	r3, [pc, #168]	; (800ea80 <knl_init_Imalloc+0xc0>)
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4a2a      	ldr	r2, [pc, #168]	; (800ea84 <knl_init_Imalloc+0xc4>)
 800e9dc:	6013      	str	r3, [r2, #0]
	knl_lowmem_top = (void *)((UW)knl_lowmem_top + sizeof(IMACB));
 800e9de:	4b28      	ldr	r3, [pc, #160]	; (800ea80 <knl_init_Imalloc+0xc0>)
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	3314      	adds	r3, #20
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	4b26      	ldr	r3, [pc, #152]	; (800ea80 <knl_init_Imalloc+0xc0>)
 800e9e8:	601a      	str	r2, [r3, #0]

	/* Align top with 8 byte unit alignment */
	knl_lowmem_top = (void *)(((UW)knl_lowmem_top + 7) & ~0x00000007UL);
 800e9ea:	4b25      	ldr	r3, [pc, #148]	; (800ea80 <knl_init_Imalloc+0xc0>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	3307      	adds	r3, #7
 800e9f0:	f023 0307 	bic.w	r3, r3, #7
 800e9f4:	461a      	mov	r2, r3
 800e9f6:	4b22      	ldr	r3, [pc, #136]	; (800ea80 <knl_init_Imalloc+0xc0>)
 800e9f8:	601a      	str	r2, [r3, #0]
	top = (QUEUE*)knl_lowmem_top;
 800e9fa:	4b21      	ldr	r3, [pc, #132]	; (800ea80 <knl_init_Imalloc+0xc0>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	607b      	str	r3, [r7, #4]
	knl_imacb->memsz = (W)((UW)knl_lowmem_limit - (UW)knl_lowmem_top - sizeof(QUEUE)*2);
 800ea00:	4b21      	ldr	r3, [pc, #132]	; (800ea88 <knl_init_Imalloc+0xc8>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	461a      	mov	r2, r3
 800ea06:	4b1e      	ldr	r3, [pc, #120]	; (800ea80 <knl_init_Imalloc+0xc0>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	1ad3      	subs	r3, r2, r3
 800ea0c:	f1a3 0210 	sub.w	r2, r3, #16
 800ea10:	4b1c      	ldr	r3, [pc, #112]	; (800ea84 <knl_init_Imalloc+0xc4>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	601a      	str	r2, [r3, #0]

	knl_lowmem_top = knl_lowmem_limit;  /* Update memory free space */
 800ea16:	4b1c      	ldr	r3, [pc, #112]	; (800ea88 <knl_init_Imalloc+0xc8>)
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	4a19      	ldr	r2, [pc, #100]	; (800ea80 <knl_init_Imalloc+0xc0>)
 800ea1c:	6013      	str	r3, [r2, #0]

	initIMACB();
 800ea1e:	f7ff ffbd 	bl	800e99c <initIMACB>

	/* Register on AreaQue */
	end = (QUEUE*)((VB*)top + knl_imacb->memsz) + 1;
 800ea22:	4b18      	ldr	r3, [pc, #96]	; (800ea84 <knl_init_Imalloc+0xc4>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	3308      	adds	r3, #8
 800ea2a:	687a      	ldr	r2, [r7, #4]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	603b      	str	r3, [r7, #0]
	knl_insertAreaQue(&knl_imacb->areaque, end);
 800ea30:	4b14      	ldr	r3, [pc, #80]	; (800ea84 <knl_init_Imalloc+0xc4>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	3304      	adds	r3, #4
 800ea36:	6839      	ldr	r1, [r7, #0]
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7ff fed5 	bl	800e7e8 <knl_insertAreaQue>
	knl_insertAreaQue(&knl_imacb->areaque, top);
 800ea3e:	4b11      	ldr	r3, [pc, #68]	; (800ea84 <knl_init_Imalloc+0xc4>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	3304      	adds	r3, #4
 800ea44:	6879      	ldr	r1, [r7, #4]
 800ea46:	4618      	mov	r0, r3
 800ea48:	f7ff fece 	bl	800e7e8 <knl_insertAreaQue>
	setAreaFlag(end, AREA_USE);
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	f043 0301 	orr.w	r3, r3, #1
 800ea54:	461a      	mov	r2, r3
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	605a      	str	r2, [r3, #4]
	setAreaFlag(&knl_imacb->areaque, AREA_USE);
 800ea5a:	4b0a      	ldr	r3, [pc, #40]	; (800ea84 <knl_init_Imalloc+0xc4>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	689b      	ldr	r3, [r3, #8]
 800ea60:	f043 0201 	orr.w	r2, r3, #1
 800ea64:	4b07      	ldr	r3, [pc, #28]	; (800ea84 <knl_init_Imalloc+0xc4>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	609a      	str	r2, [r3, #8]

	knl_appendFreeArea(knl_imacb, top);
 800ea6a:	4b06      	ldr	r3, [pc, #24]	; (800ea84 <knl_init_Imalloc+0xc4>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	6879      	ldr	r1, [r7, #4]
 800ea70:	4618      	mov	r0, r3
 800ea72:	f7ff fe28 	bl	800e6c6 <knl_appendFreeArea>

	return E_OK;
 800ea76:	2300      	movs	r3, #0
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3708      	adds	r7, #8
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	240010e4 	.word	0x240010e4
 800ea84:	24001d68 	.word	0x24001d68
 800ea88:	240010e8 	.word	0x240010e8

0800ea8c <QueInit>:
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	687a      	ldr	r2, [r7, #4]
 800ea9e:	605a      	str	r2, [r3, #4]
}
 800eaa0:	bf00      	nop
 800eaa2:	370c      	adds	r7, #12
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr

0800eaac <QueInsert>:
{
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
 800eab4:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	685a      	ldr	r2, [r3, #4]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	683a      	ldr	r2, [r7, #0]
 800eac2:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	685b      	ldr	r3, [r3, #4]
 800eac8:	687a      	ldr	r2, [r7, #4]
 800eaca:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	605a      	str	r2, [r3, #4]
}
 800ead2:	bf00      	nop
 800ead4:	370c      	adds	r7, #12
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr

0800eade <knl_InitOBJLOCK>:
typedef struct objlock {
	QUEUE		wtskq;		/* Wait task queue */
} OBJLOCK;

Inline void knl_InitOBJLOCK( OBJLOCK *loc )
{
 800eade:	b480      	push	{r7}
 800eae0:	b083      	sub	sp, #12
 800eae2:	af00      	add	r7, sp, #0
 800eae4:	6078      	str	r0, [r7, #4]
	loc->wtskq.next = NULL;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2200      	movs	r2, #0
 800eaea:	601a      	str	r2, [r3, #0]
}
 800eaec:	bf00      	nop
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <knl_fix_memorypool_initialize>:

/*
 * Initialization of fixed size memory pool control block
 */
EXPORT ER knl_fix_memorypool_initialize( void )
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
	if ( NUM_MPFID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mpfcb);
 800eafe:	4810      	ldr	r0, [pc, #64]	; (800eb40 <knl_fix_memorypool_initialize+0x48>)
 800eb00:	f7ff ffc4 	bl	800ea8c <QueInit>
	end = knl_mpfcb_table + NUM_MPFID;
 800eb04:	4b0f      	ldr	r3, [pc, #60]	; (800eb44 <knl_fix_memorypool_initialize+0x4c>)
 800eb06:	603b      	str	r3, [r7, #0]
	for ( mpfcb = knl_mpfcb_table; mpfcb < end; mpfcb++ ) {
 800eb08:	4b0f      	ldr	r3, [pc, #60]	; (800eb48 <knl_fix_memorypool_initialize+0x50>)
 800eb0a:	607b      	str	r3, [r7, #4]
 800eb0c:	e00f      	b.n	800eb2e <knl_fix_memorypool_initialize+0x36>
		mpfcb->mpfid = 0;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2200      	movs	r2, #0
 800eb12:	609a      	str	r2, [r3, #8]
		knl_InitOBJLOCK(&mpfcb->lock);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	3330      	adds	r3, #48	; 0x30
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f7ff ffe0 	bl	800eade <knl_InitOBJLOCK>
		QueInsert(&mpfcb->wait_queue, &knl_free_mpfcb);
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	4907      	ldr	r1, [pc, #28]	; (800eb40 <knl_fix_memorypool_initialize+0x48>)
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7ff ffc2 	bl	800eaac <QueInsert>
	for ( mpfcb = knl_mpfcb_table; mpfcb < end; mpfcb++ ) {
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	3338      	adds	r3, #56	; 0x38
 800eb2c:	607b      	str	r3, [r7, #4]
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d3eb      	bcc.n	800eb0e <knl_fix_memorypool_initialize+0x16>
	}

	return E_OK;
 800eb36:	2300      	movs	r3, #0
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3708      	adds	r7, #8
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	24001f2c 	.word	0x24001f2c
 800eb44:	24001f2c 	.word	0x24001f2c
 800eb48:	24001d6c 	.word	0x24001d6c

0800eb4c <QueInit>:
{
 800eb4c:	b480      	push	{r7}
 800eb4e:	b083      	sub	sp, #12
 800eb50:	af00      	add	r7, sp, #0
 800eb52:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	605a      	str	r2, [r3, #4]
}
 800eb60:	bf00      	nop
 800eb62:	370c      	adds	r7, #12
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr

0800eb6c <QueInsert>:
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
 800eb74:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	685a      	ldr	r2, [r3, #4]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	683a      	ldr	r2, [r7, #0]
 800eb82:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	685b      	ldr	r3, [r3, #4]
 800eb88:	687a      	ldr	r2, [r7, #4]
 800eb8a:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	687a      	ldr	r2, [r7, #4]
 800eb90:	605a      	str	r2, [r3, #4]
}
 800eb92:	bf00      	nop
 800eb94:	370c      	adds	r7, #12
 800eb96:	46bd      	mov	sp, r7
 800eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9c:	4770      	bx	lr
	...

0800eba0 <knl_memorypool_initialize>:

/*
 * Initialization of variable size memory pool control block
 */
EXPORT ER knl_memorypool_initialize( void )
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
	if ( NUM_MPLID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mplcb);
 800eba6:	480e      	ldr	r0, [pc, #56]	; (800ebe0 <knl_memorypool_initialize+0x40>)
 800eba8:	f7ff ffd0 	bl	800eb4c <QueInit>
	end = knl_mplcb_table + NUM_MPLID;
 800ebac:	4b0d      	ldr	r3, [pc, #52]	; (800ebe4 <knl_memorypool_initialize+0x44>)
 800ebae:	603b      	str	r3, [r7, #0]
	for ( mplcb = knl_mplcb_table; mplcb < end; mplcb++ ) {
 800ebb0:	4b0d      	ldr	r3, [pc, #52]	; (800ebe8 <knl_memorypool_initialize+0x48>)
 800ebb2:	607b      	str	r3, [r7, #4]
 800ebb4:	e00a      	b.n	800ebcc <knl_memorypool_initialize+0x2c>
		mplcb->mplid = 0;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	609a      	str	r2, [r3, #8]
		QueInsert(&mplcb->wait_queue, &knl_free_mplcb);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	4908      	ldr	r1, [pc, #32]	; (800ebe0 <knl_memorypool_initialize+0x40>)
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7ff ffd3 	bl	800eb6c <QueInsert>
	for ( mplcb = knl_mplcb_table; mplcb < end; mplcb++ ) {
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	3334      	adds	r3, #52	; 0x34
 800ebca:	607b      	str	r3, [r7, #4]
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d3f0      	bcc.n	800ebb6 <knl_memorypool_initialize+0x16>
	}

	return E_OK;
 800ebd4:	2300      	movs	r3, #0
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3708      	adds	r7, #8
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	bd80      	pop	{r7, pc}
 800ebde:	bf00      	nop
 800ebe0:	24002004 	.word	0x24002004
 800ebe4:	24002004 	.word	0x24002004
 800ebe8:	24001f34 	.word	0x24001f34

0800ebec <QueInit>:
{
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	687a      	ldr	r2, [r7, #4]
 800ebf8:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	605a      	str	r2, [r3, #4]
}
 800ec00:	bf00      	nop
 800ec02:	370c      	adds	r7, #12
 800ec04:	46bd      	mov	sp, r7
 800ec06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0a:	4770      	bx	lr

0800ec0c <QueInsert>:
{
 800ec0c:	b480      	push	{r7}
 800ec0e:	b083      	sub	sp, #12
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	685a      	ldr	r2, [r3, #4]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	683a      	ldr	r2, [r7, #0]
 800ec22:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	687a      	ldr	r2, [r7, #4]
 800ec30:	605a      	str	r2, [r3, #4]
}
 800ec32:	bf00      	nop
 800ec34:	370c      	adds	r7, #12
 800ec36:	46bd      	mov	sp, r7
 800ec38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec3c:	4770      	bx	lr
	...

0800ec40 <knl_messagebuffer_initialize>:

/*
 * Initialization of message buffer control block 
 */
EXPORT ER knl_messagebuffer_initialize( void )
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
	if ( NUM_MBFID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mbfcb);
 800ec46:	480e      	ldr	r0, [pc, #56]	; (800ec80 <knl_messagebuffer_initialize+0x40>)
 800ec48:	f7ff ffd0 	bl	800ebec <QueInit>
	end = knl_mbfcb_table + NUM_MBFID;
 800ec4c:	4b0d      	ldr	r3, [pc, #52]	; (800ec84 <knl_messagebuffer_initialize+0x44>)
 800ec4e:	603b      	str	r3, [r7, #0]
	for ( mbfcb = knl_mbfcb_table; mbfcb < end; mbfcb++ ) {
 800ec50:	4b0d      	ldr	r3, [pc, #52]	; (800ec88 <knl_messagebuffer_initialize+0x48>)
 800ec52:	607b      	str	r3, [r7, #4]
 800ec54:	e00a      	b.n	800ec6c <knl_messagebuffer_initialize+0x2c>
		mbfcb->mbfid = 0;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	609a      	str	r2, [r3, #8]
		QueInsert(&mbfcb->send_queue, &knl_free_mbfcb);
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	4908      	ldr	r1, [pc, #32]	; (800ec80 <knl_messagebuffer_initialize+0x40>)
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7ff ffd3 	bl	800ec0c <QueInsert>
	for ( mbfcb = knl_mbfcb_table; mbfcb < end; mbfcb++ ) {
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	3334      	adds	r3, #52	; 0x34
 800ec6a:	607b      	str	r3, [r7, #4]
 800ec6c:	687a      	ldr	r2, [r7, #4]
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d3f0      	bcc.n	800ec56 <knl_messagebuffer_initialize+0x16>
	}

	return E_OK;
 800ec74:	2300      	movs	r3, #0
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}
 800ec7e:	bf00      	nop
 800ec80:	240021ac 	.word	0x240021ac
 800ec84:	240021ac 	.word	0x240021ac
 800ec88:	2400200c 	.word	0x2400200c

0800ec8c <QueInit>:
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	687a      	ldr	r2, [r7, #4]
 800ec9e:	605a      	str	r2, [r3, #4]
}
 800eca0:	bf00      	nop
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr

0800ecac <isQueEmpty>:
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	bf0c      	ite	eq
 800ecbe:	2301      	moveq	r3, #1
 800ecc0:	2300      	movne	r3, #0
 800ecc2:	b2db      	uxtb	r3, r3
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	370c      	adds	r7, #12
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr

0800ecd0 <QueInsert>:
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b083      	sub	sp, #12
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	685a      	ldr	r2, [r3, #4]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	683a      	ldr	r2, [r7, #0]
 800ece6:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	687a      	ldr	r2, [r7, #4]
 800ecee:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	687a      	ldr	r2, [r7, #4]
 800ecf4:	605a      	str	r2, [r3, #4]
}
 800ecf6:	bf00      	nop
 800ecf8:	370c      	adds	r7, #12
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed00:	4770      	bx	lr
	...

0800ed04 <knl_mutex_initialize>:

/*
 * Initialization of mutex control block 
 */
EXPORT ER knl_mutex_initialize(void)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
	if ( NUM_MTXID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mtxcb);
 800ed0a:	480e      	ldr	r0, [pc, #56]	; (800ed44 <knl_mutex_initialize+0x40>)
 800ed0c:	f7ff ffbe 	bl	800ec8c <QueInit>
	end = knl_mtxcb_table + NUM_MTXID;
 800ed10:	4b0d      	ldr	r3, [pc, #52]	; (800ed48 <knl_mutex_initialize+0x44>)
 800ed12:	603b      	str	r3, [r7, #0]
	for( mtxcb = knl_mtxcb_table; mtxcb < end; mtxcb++ ) {
 800ed14:	4b0d      	ldr	r3, [pc, #52]	; (800ed4c <knl_mutex_initialize+0x48>)
 800ed16:	607b      	str	r3, [r7, #4]
 800ed18:	e00a      	b.n	800ed30 <knl_mutex_initialize+0x2c>
		mtxcb->mtxid = 0;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	609a      	str	r2, [r3, #8]
		QueInsert(&mtxcb->wait_queue, &knl_free_mtxcb);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	4908      	ldr	r1, [pc, #32]	; (800ed44 <knl_mutex_initialize+0x40>)
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7ff ffd3 	bl	800ecd0 <QueInsert>
	for( mtxcb = knl_mtxcb_table; mtxcb < end; mtxcb++ ) {
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	3320      	adds	r3, #32
 800ed2e:	607b      	str	r3, [r7, #4]
 800ed30:	687a      	ldr	r2, [r7, #4]
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d3f0      	bcc.n	800ed1a <knl_mutex_initialize+0x16>
	}

	return E_OK;
 800ed38:	2300      	movs	r3, #0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	24002234 	.word	0x24002234
 800ed48:	24002234 	.word	0x24002234
 800ed4c:	240021b4 	.word	0x240021b4

0800ed50 <knl_signal_all_mutex>:
 *	Free all mutexes which the task holds.
 *	Do not need to handle mutex list and priority of terminated task.
 *	
 */
EXPORT void knl_signal_all_mutex( TCB *tcb )
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b086      	sub	sp, #24
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
	MTXCB	*mtxcb, *next_mtxcb;
	TCB	*next_tcb;

	next_mtxcb = tcb->mtxlist;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed5c:	617b      	str	r3, [r7, #20]
	while ( (mtxcb = next_mtxcb) != NULL ) {
 800ed5e:	e030      	b.n	800edc2 <knl_signal_all_mutex+0x72>
		next_mtxcb = mtxcb->mtxlist;
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	69db      	ldr	r3, [r3, #28]
 800ed64:	617b      	str	r3, [r7, #20]

		if ( mtx_waited(mtxcb) ) {
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f7ff ff9f 	bl	800ecac <isQueEmpty>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d123      	bne.n	800edbc <knl_signal_all_mutex+0x6c>
			next_tcb = (TCB*)mtxcb->wait_queue.next;
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	60fb      	str	r3, [r7, #12]

			/* Wake wait task */
			knl_wait_release_ok(next_tcb);
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f001 fbc7 	bl	801050e <knl_wait_release_ok>

			/* Change mutex get task */
			mtxcb->mtxtsk = next_tcb;
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	68fa      	ldr	r2, [r7, #12]
 800ed84:	619a      	str	r2, [r3, #24]
			mtxcb->mtxlist = next_tcb->mtxlist;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	61da      	str	r2, [r3, #28]
			next_tcb->mtxlist = mtxcb;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	693a      	ldr	r2, [r7, #16]
 800ed92:	665a      	str	r2, [r3, #100]	; 0x64

			if ( (mtxcb->mtxatr & TA_CEILING) == TA_CEILING ) {
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	691b      	ldr	r3, [r3, #16]
 800ed98:	f003 0303 	and.w	r3, r3, #3
 800ed9c:	2b03      	cmp	r3, #3
 800ed9e:	d110      	bne.n	800edc2 <knl_signal_all_mutex+0x72>
				if ( next_tcb->priority > mtxcb->ceilpri ) {
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	7d1b      	ldrb	r3, [r3, #20]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d909      	bls.n	800edc2 <knl_signal_all_mutex+0x72>
					/* Raise the priority for the task
					   that got lock to the highest
					   priority limit */
					knl_change_task_priority(next_tcb,
							mtxcb->ceilpri);
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	7d1b      	ldrb	r3, [r3, #20]
					knl_change_task_priority(next_tcb,
 800edb2:	4619      	mov	r1, r3
 800edb4:	68f8      	ldr	r0, [r7, #12]
 800edb6:	f000 fd11 	bl	800f7dc <knl_change_task_priority>
 800edba:	e002      	b.n	800edc2 <knl_signal_all_mutex+0x72>
				}
			}
		} else {
			/* No wait task */
			mtxcb->mtxtsk = NULL;
 800edbc:	693b      	ldr	r3, [r7, #16]
 800edbe:	2200      	movs	r2, #0
 800edc0:	619a      	str	r2, [r3, #24]
	while ( (mtxcb = next_mtxcb) != NULL ) {
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	613b      	str	r3, [r7, #16]
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d1c9      	bne.n	800ed60 <knl_signal_all_mutex+0x10>
		}
	}
}
 800edcc:	bf00      	nop
 800edce:	bf00      	nop
 800edd0:	3718      	adds	r7, #24
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}

0800edd6 <QueInit>:
{
 800edd6:	b480      	push	{r7}
 800edd8:	b083      	sub	sp, #12
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	687a      	ldr	r2, [r7, #4]
 800ede8:	605a      	str	r2, [r3, #4]
}
 800edea:	bf00      	nop
 800edec:	370c      	adds	r7, #12
 800edee:	46bd      	mov	sp, r7
 800edf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf4:	4770      	bx	lr

0800edf6 <QueInsert>:
{
 800edf6:	b480      	push	{r7}
 800edf8:	b083      	sub	sp, #12
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
 800edfe:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	685a      	ldr	r2, [r3, #4]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	683a      	ldr	r2, [r7, #0]
 800ee0c:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	687a      	ldr	r2, [r7, #4]
 800ee14:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	687a      	ldr	r2, [r7, #4]
 800ee1a:	605a      	str	r2, [r3, #4]
}
 800ee1c:	bf00      	nop
 800ee1e:	370c      	adds	r7, #12
 800ee20:	46bd      	mov	sp, r7
 800ee22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee26:	4770      	bx	lr

0800ee28 <QueRemoveNext>:
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b085      	sub	sp, #20
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	687a      	ldr	r2, [r7, #4]
 800ee36:	429a      	cmp	r2, r3
 800ee38:	d101      	bne.n	800ee3e <QueRemoveNext+0x16>
		return NULL;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	e00b      	b.n	800ee56 <QueRemoveNext+0x2e>
	entry = que->next;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	687a      	ldr	r2, [r7, #4]
 800ee52:	605a      	str	r2, [r3, #4]
	return entry;
 800ee54:	68fb      	ldr	r3, [r7, #12]
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3714      	adds	r7, #20
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee60:	4770      	bx	lr
	...

0800ee64 <knl_isTaskIndependent>:
{
 800ee64:	b480      	push	{r7}
 800ee66:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 800ee68:	4b05      	ldr	r3, [pc, #20]	; (800ee80 <knl_isTaskIndependent+0x1c>)
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	bfcc      	ite	gt
 800ee70:	2301      	movgt	r3, #1
 800ee72:	2300      	movle	r3, #0
 800ee74:	b2db      	uxtb	r3, r3
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr
 800ee80:	240010d8 	.word	0x240010d8

0800ee84 <knl_semaphore_initialize>:

/* 
 * Initialization of semaphore control block 
 */
EXPORT ER knl_semaphore_initialize( void )
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
	if ( NUM_SEMID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_semcb);
 800ee8a:	480e      	ldr	r0, [pc, #56]	; (800eec4 <knl_semaphore_initialize+0x40>)
 800ee8c:	f7ff ffa3 	bl	800edd6 <QueInit>
	end = knl_semcb_table + NUM_SEMID;
 800ee90:	4b0d      	ldr	r3, [pc, #52]	; (800eec8 <knl_semaphore_initialize+0x44>)
 800ee92:	603b      	str	r3, [r7, #0]
	for ( semcb = knl_semcb_table; semcb < end; semcb++ ) {
 800ee94:	4b0d      	ldr	r3, [pc, #52]	; (800eecc <knl_semaphore_initialize+0x48>)
 800ee96:	607b      	str	r3, [r7, #4]
 800ee98:	e00a      	b.n	800eeb0 <knl_semaphore_initialize+0x2c>
		semcb->semid = 0;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	609a      	str	r2, [r3, #8]
		QueInsert(&semcb->wait_queue, &knl_free_semcb);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	4908      	ldr	r1, [pc, #32]	; (800eec4 <knl_semaphore_initialize+0x40>)
 800eea4:	4618      	mov	r0, r3
 800eea6:	f7ff ffa6 	bl	800edf6 <QueInsert>
	for ( semcb = knl_semcb_table; semcb < end; semcb++ ) {
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	331c      	adds	r3, #28
 800eeae:	607b      	str	r3, [r7, #4]
 800eeb0:	687a      	ldr	r2, [r7, #4]
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d3f0      	bcc.n	800ee9a <knl_semaphore_initialize+0x16>
	}

	return E_OK;
 800eeb8:	2300      	movs	r3, #0
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3708      	adds	r7, #8
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop
 800eec4:	240023fc 	.word	0x240023fc
 800eec8:	240023fc 	.word	0x240023fc
 800eecc:	2400223c 	.word	0x2400223c

0800eed0 <tk_cre_sem>:

/*
 * Create semaphore
 */
SYSCALL ID tk_cre_sem( CONST T_CSEM *pk_csem )
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b088      	sub	sp, #32
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_SEMATR = {
 800eed8:	2303      	movs	r3, #3
 800eeda:	61bb      	str	r3, [r7, #24]
#endif
	SEMCB	*semcb;
	ID	semid;
	ER	ercd;

	CHECK_RSATR(pk_csem->sematr, VALID_SEMATR);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	685a      	ldr	r2, [r3, #4]
 800eee0:	69bb      	ldr	r3, [r7, #24]
 800eee2:	43db      	mvns	r3, r3
 800eee4:	4013      	ands	r3, r2
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d002      	beq.n	800eef0 <tk_cre_sem+0x20>
 800eeea:	f06f 030a 	mvn.w	r3, #10
 800eeee:	e059      	b.n	800efa4 <tk_cre_sem+0xd4>
	CHECK_PAR(pk_csem->isemcnt >= 0);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	689b      	ldr	r3, [r3, #8]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	da02      	bge.n	800eefe <tk_cre_sem+0x2e>
 800eef8:	f06f 0310 	mvn.w	r3, #16
 800eefc:	e052      	b.n	800efa4 <tk_cre_sem+0xd4>
	CHECK_PAR(pk_csem->maxsem > 0);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	68db      	ldr	r3, [r3, #12]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	dc02      	bgt.n	800ef0c <tk_cre_sem+0x3c>
 800ef06:	f06f 0310 	mvn.w	r3, #16
 800ef0a:	e04b      	b.n	800efa4 <tk_cre_sem+0xd4>
	CHECK_PAR(pk_csem->maxsem >= pk_csem->isemcnt);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	68da      	ldr	r2, [r3, #12]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	689b      	ldr	r3, [r3, #8]
 800ef14:	429a      	cmp	r2, r3
 800ef16:	da02      	bge.n	800ef1e <tk_cre_sem+0x4e>
 800ef18:	f06f 0310 	mvn.w	r3, #16
 800ef1c:	e042      	b.n	800efa4 <tk_cre_sem+0xd4>

	BEGIN_CRITICAL_SECTION;
 800ef1e:	f003 fb4e 	bl	80125be <disint>
 800ef22:	6178      	str	r0, [r7, #20]
	/* Get control block from FreeQue */
	semcb = (SEMCB*)QueRemoveNext(&knl_free_semcb);
 800ef24:	4821      	ldr	r0, [pc, #132]	; (800efac <tk_cre_sem+0xdc>)
 800ef26:	f7ff ff7f 	bl	800ee28 <QueRemoveNext>
 800ef2a:	6138      	str	r0, [r7, #16]
	if ( semcb == NULL ) {
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d103      	bne.n	800ef3a <tk_cre_sem+0x6a>
		ercd = E_LIMIT;
 800ef32:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800ef36:	61fb      	str	r3, [r7, #28]
 800ef38:	e021      	b.n	800ef7e <tk_cre_sem+0xae>
	} else {
		semid = ID_SEM(semcb - knl_semcb_table);
 800ef3a:	693b      	ldr	r3, [r7, #16]
 800ef3c:	4a1c      	ldr	r2, [pc, #112]	; (800efb0 <tk_cre_sem+0xe0>)
 800ef3e:	1a9b      	subs	r3, r3, r2
 800ef40:	109b      	asrs	r3, r3, #2
 800ef42:	4a1c      	ldr	r2, [pc, #112]	; (800efb4 <tk_cre_sem+0xe4>)
 800ef44:	fb02 f303 	mul.w	r3, r2, r3
 800ef48:	3301      	adds	r3, #1
 800ef4a:	60fb      	str	r3, [r7, #12]

		/* Initialize control block */
		QueInit(&semcb->wait_queue);
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7ff ff41 	bl	800edd6 <QueInit>
		semcb->semid = semid;
 800ef54:	693b      	ldr	r3, [r7, #16]
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	609a      	str	r2, [r3, #8]
		semcb->exinf = pk_csem->exinf;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681a      	ldr	r2, [r3, #0]
 800ef5e:	693b      	ldr	r3, [r7, #16]
 800ef60:	60da      	str	r2, [r3, #12]
		semcb->sematr = pk_csem->sematr;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	685a      	ldr	r2, [r3, #4]
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	611a      	str	r2, [r3, #16]
		semcb->semcnt = pk_csem->isemcnt;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	689a      	ldr	r2, [r3, #8]
 800ef6e:	693b      	ldr	r3, [r7, #16]
 800ef70:	615a      	str	r2, [r3, #20]
		semcb->maxsem = pk_csem->maxsem;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	68da      	ldr	r2, [r3, #12]
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	619a      	str	r2, [r3, #24]
		if ( (pk_csem->sematr & TA_DSNAME) != 0 ) {
			knl_strncpy((char*)semcb->name, (char*)pk_csem->dsname,
				OBJECT_NAME_LENGTH);
		}
#endif
		ercd = semid;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	61fb      	str	r3, [r7, #28]
	}
	END_CRITICAL_SECTION;
 800ef7e:	697b      	ldr	r3, [r7, #20]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d10b      	bne.n	800ef9c <tk_cre_sem+0xcc>
 800ef84:	4b0c      	ldr	r3, [pc, #48]	; (800efb8 <tk_cre_sem+0xe8>)
 800ef86:	681a      	ldr	r2, [r3, #0]
 800ef88:	4b0c      	ldr	r3, [pc, #48]	; (800efbc <tk_cre_sem+0xec>)
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	429a      	cmp	r2, r3
 800ef8e:	d005      	beq.n	800ef9c <tk_cre_sem+0xcc>
 800ef90:	4b0b      	ldr	r3, [pc, #44]	; (800efc0 <tk_cre_sem+0xf0>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d101      	bne.n	800ef9c <tk_cre_sem+0xcc>
 800ef98:	f002 fa7e 	bl	8011498 <knl_dispatch>
 800ef9c:	6978      	ldr	r0, [r7, #20]
 800ef9e:	f003 faf2 	bl	8012586 <set_basepri>

	return ercd;
 800efa2:	69fb      	ldr	r3, [r7, #28]
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3720      	adds	r7, #32
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	240023fc 	.word	0x240023fc
 800efb0:	2400223c 	.word	0x2400223c
 800efb4:	b6db6db7 	.word	0xb6db6db7
 800efb8:	24002408 	.word	0x24002408
 800efbc:	2400240c 	.word	0x2400240c
 800efc0:	24002404 	.word	0x24002404

0800efc4 <tk_del_sem>:
#ifdef USE_FUNC_TK_DEL_SEM
/*
 * Delete semaphore
 */
SYSCALL ER tk_del_sem( ID semid )
{
 800efc4:	b580      	push	{r7, lr}
 800efc6:	b086      	sub	sp, #24
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
	SEMCB	*semcb;
	ER	ercd = E_OK;
 800efcc:	2300      	movs	r3, #0
 800efce:	617b      	str	r3, [r7, #20]

	CHECK_SEMID(semid);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	dd02      	ble.n	800efdc <tk_del_sem+0x18>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2b10      	cmp	r3, #16
 800efda:	dd02      	ble.n	800efe2 <tk_del_sem+0x1e>
 800efdc:	f06f 0311 	mvn.w	r3, #17
 800efe0:	e032      	b.n	800f048 <tk_del_sem+0x84>

	semcb = get_semcb(semid);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	1e5a      	subs	r2, r3, #1
 800efe6:	4613      	mov	r3, r2
 800efe8:	00db      	lsls	r3, r3, #3
 800efea:	1a9b      	subs	r3, r3, r2
 800efec:	009b      	lsls	r3, r3, #2
 800efee:	4a18      	ldr	r2, [pc, #96]	; (800f050 <tk_del_sem+0x8c>)
 800eff0:	4413      	add	r3, r2
 800eff2:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800eff4:	f003 fae3 	bl	80125be <disint>
 800eff8:	60f8      	str	r0, [r7, #12]
	if ( semcb->semid == 0 ) {
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	689b      	ldr	r3, [r3, #8]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d103      	bne.n	800f00a <tk_del_sem+0x46>
		ercd = E_NOEXS;
 800f002:	f06f 0329 	mvn.w	r3, #41	; 0x29
 800f006:	617b      	str	r3, [r7, #20]
 800f008:	e00b      	b.n	800f022 <tk_del_sem+0x5e>
	} else {
		/* Release wait state of task (E_DLT) */
		knl_wait_delete(&semcb->wait_queue);
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	4618      	mov	r0, r3
 800f00e:	f001 fb0b 	bl	8010628 <knl_wait_delete>

		/* Return to FreeQue */
		QueInsert(&semcb->wait_queue, &knl_free_semcb);
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	490f      	ldr	r1, [pc, #60]	; (800f054 <tk_del_sem+0x90>)
 800f016:	4618      	mov	r0, r3
 800f018:	f7ff feed 	bl	800edf6 <QueInsert>
		semcb->semid = 0;
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	2200      	movs	r2, #0
 800f020:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d10b      	bne.n	800f040 <tk_del_sem+0x7c>
 800f028:	4b0b      	ldr	r3, [pc, #44]	; (800f058 <tk_del_sem+0x94>)
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	4b0b      	ldr	r3, [pc, #44]	; (800f05c <tk_del_sem+0x98>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	429a      	cmp	r2, r3
 800f032:	d005      	beq.n	800f040 <tk_del_sem+0x7c>
 800f034:	4b0a      	ldr	r3, [pc, #40]	; (800f060 <tk_del_sem+0x9c>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d101      	bne.n	800f040 <tk_del_sem+0x7c>
 800f03c:	f002 fa2c 	bl	8011498 <knl_dispatch>
 800f040:	68f8      	ldr	r0, [r7, #12]
 800f042:	f003 faa0 	bl	8012586 <set_basepri>

	return ercd;
 800f046:	697b      	ldr	r3, [r7, #20]
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3718      	adds	r7, #24
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	2400223c 	.word	0x2400223c
 800f054:	240023fc 	.word	0x240023fc
 800f058:	24002408 	.word	0x24002408
 800f05c:	2400240c 	.word	0x2400240c
 800f060:	24002404 	.word	0x24002404

0800f064 <tk_sig_sem>:

/*
 * Signal semaphore
 */
SYSCALL ER tk_sig_sem( ID semid, INT cnt )
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b088      	sub	sp, #32
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]
	SEMCB	*semcb;
	TCB	*tcb;
	QUEUE	*queue;
	ER	ercd = E_OK;
 800f06e:	2300      	movs	r3, #0
 800f070:	61bb      	str	r3, [r7, #24]
    
	CHECK_SEMID(semid);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	2b00      	cmp	r3, #0
 800f076:	dd02      	ble.n	800f07e <tk_sig_sem+0x1a>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2b10      	cmp	r3, #16
 800f07c:	dd02      	ble.n	800f084 <tk_sig_sem+0x20>
 800f07e:	f06f 0311 	mvn.w	r3, #17
 800f082:	e06a      	b.n	800f15a <tk_sig_sem+0xf6>
	CHECK_PAR(cnt > 0);
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	2b00      	cmp	r3, #0
 800f088:	dc02      	bgt.n	800f090 <tk_sig_sem+0x2c>
 800f08a:	f06f 0310 	mvn.w	r3, #16
 800f08e:	e064      	b.n	800f15a <tk_sig_sem+0xf6>

	semcb = get_semcb(semid);
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	1e5a      	subs	r2, r3, #1
 800f094:	4613      	mov	r3, r2
 800f096:	00db      	lsls	r3, r3, #3
 800f098:	1a9b      	subs	r3, r3, r2
 800f09a:	009b      	lsls	r3, r3, #2
 800f09c:	4a31      	ldr	r2, [pc, #196]	; (800f164 <tk_sig_sem+0x100>)
 800f09e:	4413      	add	r3, r2
 800f0a0:	617b      	str	r3, [r7, #20]

	BEGIN_CRITICAL_SECTION;
 800f0a2:	f003 fa8c 	bl	80125be <disint>
 800f0a6:	6138      	str	r0, [r7, #16]
	if ( semcb->semid == 0 ) {
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	689b      	ldr	r3, [r3, #8]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d103      	bne.n	800f0b8 <tk_sig_sem+0x54>
		ercd = E_NOEXS;
 800f0b0:	f06f 0329 	mvn.w	r3, #41	; 0x29
 800f0b4:	61bb      	str	r3, [r7, #24]
		goto error_exit;
 800f0b6:	e03d      	b.n	800f134 <tk_sig_sem+0xd0>
	}
	if ( cnt > (semcb->maxsem - semcb->semcnt) ) {
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	699a      	ldr	r2, [r3, #24]
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	695b      	ldr	r3, [r3, #20]
 800f0c0:	1ad3      	subs	r3, r2, r3
 800f0c2:	683a      	ldr	r2, [r7, #0]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	dd03      	ble.n	800f0d0 <tk_sig_sem+0x6c>
		ercd = E_QOVR;
 800f0c8:	f06f 032a 	mvn.w	r3, #42	; 0x2a
 800f0cc:	61bb      	str	r3, [r7, #24]
		goto error_exit;
 800f0ce:	e031      	b.n	800f134 <tk_sig_sem+0xd0>
	}

	/* Return semaphore counts */
	semcb->semcnt += cnt;
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	695a      	ldr	r2, [r3, #20]
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	441a      	add	r2, r3
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	615a      	str	r2, [r3, #20]

	/* Search task that frees wait */
	queue = semcb->wait_queue.next;
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	61fb      	str	r3, [r7, #28]
	while ( queue != &semcb->wait_queue ) {
 800f0e2:	e01f      	b.n	800f124 <tk_sig_sem+0xc0>
		tcb = (TCB*)queue;
 800f0e4:	69fb      	ldr	r3, [r7, #28]
 800f0e6:	60fb      	str	r3, [r7, #12]
		queue = queue->next;
 800f0e8:	69fb      	ldr	r3, [r7, #28]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	61fb      	str	r3, [r7, #28]

		/* Meet condition for Releasing wait? */
		if ( semcb->semcnt < tcb->winfo.sem.cnt ) {
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	695a      	ldr	r2, [r3, #20]
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	da06      	bge.n	800f108 <tk_sig_sem+0xa4>
			if ( (semcb->sematr & TA_CNT) == 0 ) {
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	691b      	ldr	r3, [r3, #16]
 800f0fe:	f003 0302 	and.w	r3, r3, #2
 800f102:	2b00      	cmp	r3, #0
 800f104:	d013      	beq.n	800f12e <tk_sig_sem+0xca>
				break;
			}
			continue;
 800f106:	e00d      	b.n	800f124 <tk_sig_sem+0xc0>
		}

		/* Release wait */
		knl_wait_release_ok(tcb);
 800f108:	68f8      	ldr	r0, [r7, #12]
 800f10a:	f001 fa00 	bl	801050e <knl_wait_release_ok>

		semcb->semcnt -= tcb->winfo.sem.cnt;
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	695a      	ldr	r2, [r3, #20]
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f116:	1ad2      	subs	r2, r2, r3
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	615a      	str	r2, [r3, #20]
		if ( semcb->semcnt <= 0 ) {
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	695b      	ldr	r3, [r3, #20]
 800f120:	2b00      	cmp	r3, #0
 800f122:	dd06      	ble.n	800f132 <tk_sig_sem+0xce>
	while ( queue != &semcb->wait_queue ) {
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	69fa      	ldr	r2, [r7, #28]
 800f128:	429a      	cmp	r2, r3
 800f12a:	d1db      	bne.n	800f0e4 <tk_sig_sem+0x80>
			break;
		}
	}

    error_exit:
 800f12c:	e002      	b.n	800f134 <tk_sig_sem+0xd0>
				break;
 800f12e:	bf00      	nop
 800f130:	e000      	b.n	800f134 <tk_sig_sem+0xd0>
			break;
 800f132:	bf00      	nop
	END_CRITICAL_SECTION;
 800f134:	693b      	ldr	r3, [r7, #16]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d10b      	bne.n	800f152 <tk_sig_sem+0xee>
 800f13a:	4b0b      	ldr	r3, [pc, #44]	; (800f168 <tk_sig_sem+0x104>)
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	4b0b      	ldr	r3, [pc, #44]	; (800f16c <tk_sig_sem+0x108>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	429a      	cmp	r2, r3
 800f144:	d005      	beq.n	800f152 <tk_sig_sem+0xee>
 800f146:	4b0a      	ldr	r3, [pc, #40]	; (800f170 <tk_sig_sem+0x10c>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d101      	bne.n	800f152 <tk_sig_sem+0xee>
 800f14e:	f002 f9a3 	bl	8011498 <knl_dispatch>
 800f152:	6938      	ldr	r0, [r7, #16]
 800f154:	f003 fa17 	bl	8012586 <set_basepri>

	return ercd;
 800f158:	69bb      	ldr	r3, [r7, #24]
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3720      	adds	r7, #32
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
 800f162:	bf00      	nop
 800f164:	2400223c 	.word	0x2400223c
 800f168:	24002408 	.word	0x24002408
 800f16c:	2400240c 	.word	0x2400240c
 800f170:	24002404 	.word	0x24002404

0800f174 <sem_chg_pri>:

/*
 * Processing if the priority of wait task changes
 */
LOCAL void sem_chg_pri( TCB *tcb, INT oldpri )
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b086      	sub	sp, #24
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
	SEMCB	*semcb;
	QUEUE	*queue;
	TCB	*top;

	semcb = get_semcb(tcb->wid);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f182:	1e5a      	subs	r2, r3, #1
 800f184:	4613      	mov	r3, r2
 800f186:	00db      	lsls	r3, r3, #3
 800f188:	1a9b      	subs	r3, r3, r2
 800f18a:	009b      	lsls	r3, r3, #2
 800f18c:	4a19      	ldr	r2, [pc, #100]	; (800f1f4 <sem_chg_pri+0x80>)
 800f18e:	4413      	add	r3, r2
 800f190:	613b      	str	r3, [r7, #16]
	if ( oldpri >= 0 ) {
 800f192:	683b      	ldr	r3, [r7, #0]
 800f194:	2b00      	cmp	r3, #0
 800f196:	db03      	blt.n	800f1a0 <sem_chg_pri+0x2c>
		/* Reorder wait line */
		knl_gcb_change_priority((GCB*)semcb, tcb);
 800f198:	6879      	ldr	r1, [r7, #4]
 800f19a:	6938      	ldr	r0, [r7, #16]
 800f19c:	f001 fa96 	bl	80106cc <knl_gcb_change_priority>
	}

	if ( (semcb->sematr & TA_CNT) != 0 ) {
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	691b      	ldr	r3, [r3, #16]
 800f1a4:	f003 0302 	and.w	r3, r3, #2
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d11d      	bne.n	800f1e8 <sem_chg_pri+0x74>
		return;
	}

	/* From the head task in a wait queue, allocate semaphore counts
	   and release wait state as much as possible */
	queue = semcb->wait_queue.next;
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	617b      	str	r3, [r7, #20]
	while ( queue != &semcb->wait_queue ) {
 800f1b2:	e014      	b.n	800f1de <sem_chg_pri+0x6a>
		top = (TCB*)queue;
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	60fb      	str	r3, [r7, #12]
		queue = queue->next;
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	617b      	str	r3, [r7, #20]

		/* Meet condition for releasing wait? */
		if ( semcb->semcnt < top->winfo.sem.cnt ) {
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	695a      	ldr	r2, [r3, #20]
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	db10      	blt.n	800f1ec <sem_chg_pri+0x78>
			break;
		}

		/* Release wait */
		knl_wait_release_ok(top);
 800f1ca:	68f8      	ldr	r0, [r7, #12]
 800f1cc:	f001 f99f 	bl	801050e <knl_wait_release_ok>

		semcb->semcnt -= top->winfo.sem.cnt;
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	695a      	ldr	r2, [r3, #20]
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1d8:	1ad2      	subs	r2, r2, r3
 800f1da:	693b      	ldr	r3, [r7, #16]
 800f1dc:	615a      	str	r2, [r3, #20]
	while ( queue != &semcb->wait_queue ) {
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	697a      	ldr	r2, [r7, #20]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d1e6      	bne.n	800f1b4 <sem_chg_pri+0x40>
 800f1e6:	e002      	b.n	800f1ee <sem_chg_pri+0x7a>
		return;
 800f1e8:	bf00      	nop
 800f1ea:	e000      	b.n	800f1ee <sem_chg_pri+0x7a>
			break;
 800f1ec:	bf00      	nop
	}
}
 800f1ee:	3718      	adds	r7, #24
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}
 800f1f4:	2400223c 	.word	0x2400223c

0800f1f8 <sem_rel_wai>:

/*
 * Processing if the wait task is freed
 */
LOCAL void sem_rel_wai( TCB *tcb )
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
	sem_chg_pri(tcb, -1);
 800f200:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f7ff ffb5 	bl	800f174 <sem_chg_pri>
}
 800f20a:	bf00      	nop
 800f20c:	3708      	adds	r7, #8
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
	...

0800f214 <tk_wai_sem>:

/*
 * Wait on semaphore
 */
SYSCALL ER tk_wai_sem( ID semid, INT cnt, TMO tmout )
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b088      	sub	sp, #32
 800f218:	af00      	add	r7, sp, #0
 800f21a:	60f8      	str	r0, [r7, #12]
 800f21c:	60b9      	str	r1, [r7, #8]
 800f21e:	607a      	str	r2, [r7, #4]
	SEMCB	*semcb;
	ER	ercd = E_OK;
 800f220:	2300      	movs	r3, #0
 800f222:	617b      	str	r3, [r7, #20]

	CHECK_SEMID(semid);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	2b00      	cmp	r3, #0
 800f228:	dd02      	ble.n	800f230 <tk_wai_sem+0x1c>
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2b10      	cmp	r3, #16
 800f22e:	dd02      	ble.n	800f236 <tk_wai_sem+0x22>
 800f230:	f06f 0311 	mvn.w	r3, #17
 800f234:	e087      	b.n	800f346 <tk_wai_sem+0x132>
	CHECK_PAR(cnt > 0);
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	dc02      	bgt.n	800f242 <tk_wai_sem+0x2e>
 800f23c:	f06f 0310 	mvn.w	r3, #16
 800f240:	e081      	b.n	800f346 <tk_wai_sem+0x132>
	CHECK_TMOUT(tmout);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f248:	da02      	bge.n	800f250 <tk_wai_sem+0x3c>
 800f24a:	f06f 0310 	mvn.w	r3, #16
 800f24e:	e07a      	b.n	800f346 <tk_wai_sem+0x132>
	CHECK_DISPATCH();
 800f250:	4b3f      	ldr	r3, [pc, #252]	; (800f350 <tk_wai_sem+0x13c>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d10d      	bne.n	800f274 <tk_wai_sem+0x60>
 800f258:	f7ff fe04 	bl	800ee64 <knl_isTaskIndependent>
 800f25c:	4603      	mov	r3, r0
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d108      	bne.n	800f274 <tk_wai_sem+0x60>
 800f262:	4b3c      	ldr	r3, [pc, #240]	; (800f354 <tk_wai_sem+0x140>)
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d004      	beq.n	800f274 <tk_wai_sem+0x60>
 800f26a:	f003 f99b 	bl	80125a4 <get_basepri>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d002      	beq.n	800f27a <tk_wai_sem+0x66>
 800f274:	f06f 0318 	mvn.w	r3, #24
 800f278:	e065      	b.n	800f346 <tk_wai_sem+0x132>

	semcb = get_semcb(semid);
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	1e5a      	subs	r2, r3, #1
 800f27e:	4613      	mov	r3, r2
 800f280:	00db      	lsls	r3, r3, #3
 800f282:	1a9b      	subs	r3, r3, r2
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	4a34      	ldr	r2, [pc, #208]	; (800f358 <tk_wai_sem+0x144>)
 800f288:	4413      	add	r3, r2
 800f28a:	61fb      	str	r3, [r7, #28]

	BEGIN_CRITICAL_SECTION;
 800f28c:	f003 f997 	bl	80125be <disint>
 800f290:	61b8      	str	r0, [r7, #24]
	if ( semcb->semid == 0 ) {
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	689b      	ldr	r3, [r3, #8]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d103      	bne.n	800f2a2 <tk_wai_sem+0x8e>
		ercd = E_NOEXS;
 800f29a:	f06f 0329 	mvn.w	r3, #41	; 0x29
 800f29e:	617b      	str	r3, [r7, #20]
		goto error_exit;
 800f2a0:	e03e      	b.n	800f320 <tk_wai_sem+0x10c>
	}
#if CHK_PAR
	if ( cnt > semcb->maxsem ) {
 800f2a2:	69fb      	ldr	r3, [r7, #28]
 800f2a4:	699b      	ldr	r3, [r3, #24]
 800f2a6:	68ba      	ldr	r2, [r7, #8]
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	dd03      	ble.n	800f2b4 <tk_wai_sem+0xa0>
		ercd = E_PAR;
 800f2ac:	f06f 0310 	mvn.w	r3, #16
 800f2b0:	617b      	str	r3, [r7, #20]
		goto error_exit;
 800f2b2:	e035      	b.n	800f320 <tk_wai_sem+0x10c>
	}
#endif

	if ( ((semcb->sematr & TA_CNT) != 0
 800f2b4:	69fb      	ldr	r3, [r7, #28]
 800f2b6:	691b      	ldr	r3, [r3, #16]
 800f2b8:	f003 0302 	and.w	r3, r3, #2
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d10a      	bne.n	800f2d6 <tk_wai_sem+0xc2>
	      || knl_gcb_top_of_wait_queue((GCB*)semcb, knl_ctxtsk) == knl_ctxtsk)
 800f2c0:	4b24      	ldr	r3, [pc, #144]	; (800f354 <tk_wai_sem+0x140>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	69f8      	ldr	r0, [r7, #28]
 800f2c8:	f001 fa12 	bl	80106f0 <knl_gcb_top_of_wait_queue>
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	4b21      	ldr	r3, [pc, #132]	; (800f354 <tk_wai_sem+0x140>)
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d10b      	bne.n	800f2ee <tk_wai_sem+0xda>
	  && semcb->semcnt >= cnt ) {
 800f2d6:	69fb      	ldr	r3, [r7, #28]
 800f2d8:	695b      	ldr	r3, [r3, #20]
 800f2da:	68ba      	ldr	r2, [r7, #8]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	dc06      	bgt.n	800f2ee <tk_wai_sem+0xda>
		/* Get semaphore count */
		semcb->semcnt -= cnt;
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	695a      	ldr	r2, [r3, #20]
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	1ad2      	subs	r2, r2, r3
 800f2e8:	69fb      	ldr	r3, [r7, #28]
 800f2ea:	615a      	str	r2, [r3, #20]
 800f2ec:	e018      	b.n	800f320 <tk_wai_sem+0x10c>

	} else {
		/* Ready for wait */
		knl_ctxtsk->wspec = ( (semcb->sematr & TA_TPRI) != 0 )?
 800f2ee:	69fb      	ldr	r3, [r7, #28]
 800f2f0:	691b      	ldr	r3, [r3, #16]
 800f2f2:	f003 0301 	and.w	r3, r3, #1
					&knl_wspec_sem_tpri: &knl_wspec_sem_tfifo;
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d001      	beq.n	800f2fe <tk_wai_sem+0xea>
 800f2fa:	4a18      	ldr	r2, [pc, #96]	; (800f35c <tk_wai_sem+0x148>)
 800f2fc:	e000      	b.n	800f300 <tk_wai_sem+0xec>
 800f2fe:	4a18      	ldr	r2, [pc, #96]	; (800f360 <tk_wai_sem+0x14c>)
		knl_ctxtsk->wspec = ( (semcb->sematr & TA_TPRI) != 0 )?
 800f300:	4b14      	ldr	r3, [pc, #80]	; (800f354 <tk_wai_sem+0x140>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	62da      	str	r2, [r3, #44]	; 0x2c
		knl_ctxtsk->wercd = &ercd;
 800f306:	4b13      	ldr	r3, [pc, #76]	; (800f354 <tk_wai_sem+0x140>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f107 0214 	add.w	r2, r7, #20
 800f30e:	63da      	str	r2, [r3, #60]	; 0x3c
		knl_ctxtsk->winfo.sem.cnt = cnt;
 800f310:	4b10      	ldr	r3, [pc, #64]	; (800f354 <tk_wai_sem+0x140>)
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	68ba      	ldr	r2, [r7, #8]
 800f316:	641a      	str	r2, [r3, #64]	; 0x40
		knl_gcb_make_wait((GCB*)semcb, tmout);
 800f318:	6879      	ldr	r1, [r7, #4]
 800f31a:	69f8      	ldr	r0, [r7, #28]
 800f31c:	f001 f9a0 	bl	8010660 <knl_gcb_make_wait>
	}

    error_exit:
	END_CRITICAL_SECTION;
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d10b      	bne.n	800f33e <tk_wai_sem+0x12a>
 800f326:	4b0b      	ldr	r3, [pc, #44]	; (800f354 <tk_wai_sem+0x140>)
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	4b0e      	ldr	r3, [pc, #56]	; (800f364 <tk_wai_sem+0x150>)
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	429a      	cmp	r2, r3
 800f330:	d005      	beq.n	800f33e <tk_wai_sem+0x12a>
 800f332:	4b07      	ldr	r3, [pc, #28]	; (800f350 <tk_wai_sem+0x13c>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d101      	bne.n	800f33e <tk_wai_sem+0x12a>
 800f33a:	f002 f8ad 	bl	8011498 <knl_dispatch>
 800f33e:	69b8      	ldr	r0, [r7, #24]
 800f340:	f003 f921 	bl	8012586 <set_basepri>

	return ercd;
 800f344:	697b      	ldr	r3, [r7, #20]
}
 800f346:	4618      	mov	r0, r3
 800f348:	3720      	adds	r7, #32
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	24002404 	.word	0x24002404
 800f354:	24002408 	.word	0x24002408
 800f358:	2400223c 	.word	0x2400223c
 800f35c:	08012afc 	.word	0x08012afc
 800f360:	08012af0 	.word	0x08012af0
 800f364:	2400240c 	.word	0x2400240c

0800f368 <QueInit>:
{
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	687a      	ldr	r2, [r7, #4]
 800f37a:	605a      	str	r2, [r3, #4]
}
 800f37c:	bf00      	nop
 800f37e:	370c      	adds	r7, #12
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr

0800f388 <isQueEmpty>:
{
 800f388:	b480      	push	{r7}
 800f38a:	b083      	sub	sp, #12
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	429a      	cmp	r2, r3
 800f398:	bf0c      	ite	eq
 800f39a:	2301      	moveq	r3, #1
 800f39c:	2300      	movne	r3, #0
 800f39e:	b2db      	uxtb	r3, r3
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	370c      	adds	r7, #12
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr

0800f3ac <QueInsert>:
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	685a      	ldr	r2, [r3, #4]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	683a      	ldr	r2, [r7, #0]
 800f3c2:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	685b      	ldr	r3, [r3, #4]
 800f3c8:	687a      	ldr	r2, [r7, #4]
 800f3ca:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	605a      	str	r2, [r3, #4]
}
 800f3d2:	bf00      	nop
 800f3d4:	370c      	adds	r7, #12
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3dc:	4770      	bx	lr

0800f3de <QueRemove>:
{
 800f3de:	b480      	push	{r7}
 800f3e0:	b083      	sub	sp, #12
 800f3e2:	af00      	add	r7, sp, #0
 800f3e4:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	687a      	ldr	r2, [r7, #4]
 800f3ec:	429a      	cmp	r2, r3
 800f3ee:	d009      	beq.n	800f404 <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	6812      	ldr	r2, [r2, #0]
 800f3f8:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	6852      	ldr	r2, [r2, #4]
 800f402:	605a      	str	r2, [r3, #4]
}
 800f404:	bf00      	nop
 800f406:	370c      	adds	r7, #12
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr

0800f410 <knl_ready_queue_calc_top_priority>:

IMPORT RDYQUE	knl_ready_queue;

#if NUM_TSKPRI <= INT_BITWIDTH
Inline INT knl_ready_queue_calc_top_priority( UINT bitmap, INT pos )
{
 800f410:	b480      	push	{r7}
 800f412:	b083      	sub	sp, #12
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
	for ( ; pos < NUM_TSKPRI; pos++ ) {
 800f41a:	e00b      	b.n	800f434 <knl_ready_queue_calc_top_priority+0x24>
		if ( bitmap & (1U << pos) ) {
 800f41c:	2201      	movs	r2, #1
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	409a      	lsls	r2, r3
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	4013      	ands	r3, r2
 800f426:	2b00      	cmp	r3, #0
 800f428:	d001      	beq.n	800f42e <knl_ready_queue_calc_top_priority+0x1e>
			return pos;
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	e006      	b.n	800f43c <knl_ready_queue_calc_top_priority+0x2c>
	for ( ; pos < NUM_TSKPRI; pos++ ) {
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	3301      	adds	r3, #1
 800f432:	603b      	str	r3, [r7, #0]
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	2b1f      	cmp	r3, #31
 800f438:	ddf0      	ble.n	800f41c <knl_ready_queue_calc_top_priority+0xc>
		}
	}
	return NUM_TSKPRI;
 800f43a:	2320      	movs	r3, #32
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	370c      	adds	r7, #12
 800f440:	46bd      	mov	sp, r7
 800f442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f446:	4770      	bx	lr

0800f448 <knl_ready_queue_initialize>:

/*
 * Ready queue initialization
 */
Inline void knl_ready_queue_initialize( RDYQUE *rq )
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
	INT	i;

	rq->top_priority = NUM_TSKPRI;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2220      	movs	r2, #32
 800f454:	601a      	str	r2, [r3, #0]
	for ( i = 0; i < NUM_TSKPRI; i++ ) {
 800f456:	2300      	movs	r3, #0
 800f458:	60fb      	str	r3, [r7, #12]
 800f45a:	e00a      	b.n	800f472 <knl_ready_queue_initialize+0x2a>
		QueInit(&rq->tskque[i]);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	00db      	lsls	r3, r3, #3
 800f460:	687a      	ldr	r2, [r7, #4]
 800f462:	4413      	add	r3, r2
 800f464:	3304      	adds	r3, #4
 800f466:	4618      	mov	r0, r3
 800f468:	f7ff ff7e 	bl	800f368 <QueInit>
	for ( i = 0; i < NUM_TSKPRI; i++ ) {
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	3301      	adds	r3, #1
 800f470:	60fb      	str	r3, [r7, #12]
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	2b1f      	cmp	r3, #31
 800f476:	ddf1      	ble.n	800f45c <knl_ready_queue_initialize+0x14>
	}
	rq->null = NULL;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2200      	movs	r2, #0
 800f47c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	rq->klocktsk = NULL;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2200      	movs	r2, #0
 800f484:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	knl_memset(rq->bitmap, 0, sizeof(rq->bitmap));
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800f48e:	2204      	movs	r2, #4
 800f490:	2100      	movs	r1, #0
 800f492:	4618      	mov	r0, r3
 800f494:	f001 f954 	bl	8010740 <knl_memset>
}
 800f498:	bf00      	nop
 800f49a:	3710      	adds	r7, #16
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <knl_ready_queue_top>:

/*
 * Return the highest priority task in ready queue
 */
Inline TCB* knl_ready_queue_top( RDYQUE *rq )
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b083      	sub	sp, #12
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
	/* If there is a task at kernel lock, that is the highest priority task */
	if ( rq->klocktsk != NULL ) {
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d003      	beq.n	800f4ba <knl_ready_queue_top+0x1a>
		return rq->klocktsk;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f4b8:	e005      	b.n	800f4c6 <knl_ready_queue_top+0x26>
	}

	return (TCB*)rq->tskque[rq->top_priority].next;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	687a      	ldr	r2, [r7, #4]
 800f4c0:	00db      	lsls	r3, r3, #3
 800f4c2:	4413      	add	r3, r2
 800f4c4:	685b      	ldr	r3, [r3, #4]
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	370c      	adds	r7, #12
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr

0800f4d2 <knl_ready_queue_insert>:
 *	indicated with 'tcb'. Set the applicable bit in the bitmap area and 
 *	update 'top_priority' if necessary. When updating 'top_priority,' 
 *	return TRUE, otherwise FALSE.
 */
Inline BOOL knl_ready_queue_insert( RDYQUE *rq, TCB *tcb )
{
 800f4d2:	b580      	push	{r7, lr}
 800f4d4:	b084      	sub	sp, #16
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
 800f4da:	6039      	str	r1, [r7, #0]
	INT	priority = tcb->priority;
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f4e2:	60fb      	str	r3, [r7, #12]

	QueInsert(&tcb->tskque, &rq->tskque[priority]);
 800f4e4:	6838      	ldr	r0, [r7, #0]
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	00db      	lsls	r3, r3, #3
 800f4ea:	687a      	ldr	r2, [r7, #4]
 800f4ec:	4413      	add	r3, r2
 800f4ee:	3304      	adds	r3, #4
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	f7ff ff5b 	bl	800f3ac <QueInsert>
#if NUM_TSKPRI <= INT_BITWIDTH
	rq->bitmap[0] |= (1U << priority);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800f4fc:	2101      	movs	r1, #1
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	fa01 f303 	lsl.w	r3, r1, r3
 800f504:	431a      	orrs	r2, r3
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#else
	knl_bitset(rq->bitmap, priority);
#endif

	if ( tcb->klocked ) {
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f512:	f003 0302 	and.w	r3, r3, #2
 800f516:	b2db      	uxtb	r3, r3
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d003      	beq.n	800f524 <knl_ready_queue_insert+0x52>
		rq->klocktsk = tcb;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	683a      	ldr	r2, [r7, #0]
 800f520:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	}

	if ( priority < rq->top_priority ) {
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	68fa      	ldr	r2, [r7, #12]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	da04      	bge.n	800f538 <knl_ready_queue_insert+0x66>
		rq->top_priority = priority;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	68fa      	ldr	r2, [r7, #12]
 800f532:	601a      	str	r2, [r3, #0]
		return TRUE;
 800f534:	2301      	movs	r3, #1
 800f536:	e000      	b.n	800f53a <knl_ready_queue_insert+0x68>
	}
	return FALSE;
 800f538:	2300      	movs	r3, #0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3710      	adds	r7, #16
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <knl_ready_queue_delete>:
 *	In addition, update 'top_priority' if the deleted task had the highest 
 *	priority. In such case, use the bitmap area to search the second
 *	highest priority task.
 */
Inline void knl_ready_queue_delete( RDYQUE *rq, TCB *tcb )
{
 800f542:	b580      	push	{r7, lr}
 800f544:	b084      	sub	sp, #16
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
 800f54a:	6039      	str	r1, [r7, #0]
	INT	priority = tcb->priority;
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f552:	60fb      	str	r3, [r7, #12]
#if NUM_TSKPRI > INT_BITWIDTH
	INT	i;
#endif

	if ( rq->klocktsk == tcb ) {
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800f55a:	683a      	ldr	r2, [r7, #0]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d103      	bne.n	800f568 <knl_ready_queue_delete+0x26>
		rq->klocktsk = NULL;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2200      	movs	r2, #0
 800f564:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	}

	QueRemove(&tcb->tskque);
 800f568:	683b      	ldr	r3, [r7, #0]
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7ff ff37 	bl	800f3de <QueRemove>
	if ( tcb->klockwait ) {
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f576:	f003 0301 	and.w	r3, r3, #1
 800f57a:	b2db      	uxtb	r3, r3
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d007      	beq.n	800f590 <knl_ready_queue_delete+0x4e>
		/* Delete from kernel lock wait queue */
		tcb->klockwait = FALSE;
 800f580:	683a      	ldr	r2, [r7, #0]
 800f582:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800f586:	f36f 0300 	bfc	r3, #0, #1
 800f58a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
		return;
 800f58e:	e029      	b.n	800f5e4 <knl_ready_queue_delete+0xa2>
	}
	if ( !isQueEmpty(&rq->tskque[priority]) ) {
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	00db      	lsls	r3, r3, #3
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	4413      	add	r3, r2
 800f598:	3304      	adds	r3, #4
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7ff fef4 	bl	800f388 <isQueEmpty>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d01b      	beq.n	800f5de <knl_ready_queue_delete+0x9c>
		return;
	}

#if NUM_TSKPRI <= INT_BITWIDTH
	rq->bitmap[0] &= ~(1U << priority);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800f5ac:	2101      	movs	r1, #1
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	fa01 f303 	lsl.w	r3, r1, r3
 800f5b4:	43db      	mvns	r3, r3
 800f5b6:	401a      	ands	r2, r3
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
#else
	knl_bitclr(rq->bitmap, priority);
#endif
	if ( priority != rq->top_priority ) {
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	68fa      	ldr	r2, [r7, #12]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d10c      	bne.n	800f5e2 <knl_ready_queue_delete+0xa0>
		return;
	}

#if NUM_TSKPRI <= INT_BITWIDTH
	rq->top_priority = knl_ready_queue_calc_top_priority(rq->bitmap[0], priority);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800f5ce:	68f9      	ldr	r1, [r7, #12]
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	f7ff ff1d 	bl	800f410 <knl_ready_queue_calc_top_priority>
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	601a      	str	r2, [r3, #0]
 800f5dc:	e002      	b.n	800f5e4 <knl_ready_queue_delete+0xa2>
		return;
 800f5de:	bf00      	nop
 800f5e0:	e000      	b.n	800f5e4 <knl_ready_queue_delete+0xa2>
		return;
 800f5e2:	bf00      	nop
		rq->top_priority = priority + i;
	} else {
		rq->top_priority = NUM_TSKPRI;
	}
#endif
}
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
	...

0800f5ec <knl_reschedule>:
/*
 * Reselect task to execute
 *	Set 'schedtsk' to the head task at the ready queue.
 */
Inline void knl_reschedule( void )
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
	TCB	*toptsk;

	toptsk = knl_ready_queue_top(&knl_ready_queue);
 800f5f2:	4808      	ldr	r0, [pc, #32]	; (800f614 <knl_reschedule+0x28>)
 800f5f4:	f7ff ff54 	bl	800f4a0 <knl_ready_queue_top>
 800f5f8:	6078      	str	r0, [r7, #4]
	if ( knl_schedtsk != toptsk ) {
 800f5fa:	4b07      	ldr	r3, [pc, #28]	; (800f618 <knl_reschedule+0x2c>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	429a      	cmp	r2, r3
 800f602:	d002      	beq.n	800f60a <knl_reschedule+0x1e>
		knl_schedtsk = toptsk;
 800f604:	4a04      	ldr	r2, [pc, #16]	; (800f618 <knl_reschedule+0x2c>)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6013      	str	r3, [r2, #0]
	}
}
 800f60a:	bf00      	nop
 800f60c:	3708      	adds	r7, #8
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop
 800f614:	24002410 	.word	0x24002410
 800f618:	2400240c 	.word	0x2400240c

0800f61c <knl_setup_context>:
/*
 * Create stack frame for task startup
 *	Call from 'make_dormant()'
 */
Inline void knl_setup_context( TCB *tcb )
{
 800f61c:	b480      	push	{r7}
 800f61e:	b085      	sub	sp, #20
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
	SStackFrame	*ssp;

	ssp = tcb->isstack;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f628:	60fb      	str	r3, [r7, #12]
	ssp--;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	3b44      	subs	r3, #68	; 0x44
 800f62e:	60fb      	str	r3, [r7, #12]

	/* CPU context initialization */
	ssp->exp_ret	= 0xFFFFFFF9;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	f06f 0206 	mvn.w	r2, #6
 800f636:	601a      	str	r2, [r3, #0]
	ssp->lr		= 0;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2200      	movs	r2, #0
 800f63c:	639a      	str	r2, [r3, #56]	; 0x38
	ssp->xpsr	= 0x01000000;		/* Initial SR */
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f644:	641a      	str	r2, [r3, #64]	; 0x40
	ssp->pc = (void*)((UW)tcb->task & ~0x00000001UL);	/* Task startup address */
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	695b      	ldr	r3, [r3, #20]
 800f64a:	f023 0301 	bic.w	r3, r3, #1
 800f64e:	461a      	mov	r2, r3
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	63da      	str	r2, [r3, #60]	; 0x3c

	tcb->tskctxb.ssp = ssp;		/* System stack pointer */
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	68fa      	ldr	r2, [r7, #12]
 800f658:	619a      	str	r2, [r3, #24]

#if USE_FPU && ALWAYS_FPU_ATR
	tcb->tskatr |= TA_FPU;		/* Always set the TA_FPU attribute on all tasks */
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	691b      	ldr	r3, [r3, #16]
 800f65e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	611a      	str	r2, [r3, #16]
#endif
}
 800f666:	bf00      	nop
 800f668:	3714      	adds	r7, #20
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr
	...

0800f674 <knl_task_initialize>:

/*
 * TCB Initialization
 */
EXPORT ER knl_task_initialize( void )
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b084      	sub	sp, #16
 800f678:	af00      	add	r7, sp, #0
	if ( NUM_TSKID < 1 ) {
		return E_SYS;
	}

	/* Initialize task execution control information */
	knl_ctxtsk = knl_schedtsk = NULL;
 800f67a:	4b19      	ldr	r3, [pc, #100]	; (800f6e0 <knl_task_initialize+0x6c>)
 800f67c:	2200      	movs	r2, #0
 800f67e:	601a      	str	r2, [r3, #0]
 800f680:	4b17      	ldr	r3, [pc, #92]	; (800f6e0 <knl_task_initialize+0x6c>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a17      	ldr	r2, [pc, #92]	; (800f6e4 <knl_task_initialize+0x70>)
 800f686:	6013      	str	r3, [r2, #0]
	knl_ready_queue_initialize(&knl_ready_queue);
 800f688:	4817      	ldr	r0, [pc, #92]	; (800f6e8 <knl_task_initialize+0x74>)
 800f68a:	f7ff fedd 	bl	800f448 <knl_ready_queue_initialize>
	knl_dispatch_disabled = DDS_ENABLE;
 800f68e:	4b17      	ldr	r3, [pc, #92]	; (800f6ec <knl_task_initialize+0x78>)
 800f690:	2200      	movs	r2, #0
 800f692:	601a      	str	r2, [r3, #0]

	/* Register all TCBs onto FreeQue */
	QueInit(&knl_free_tcb);
 800f694:	4816      	ldr	r0, [pc, #88]	; (800f6f0 <knl_task_initialize+0x7c>)
 800f696:	f7ff fe67 	bl	800f368 <QueInit>
	for ( tcb = knl_tcb_table, i = 0; i < NUM_TSKID; tcb++, i++ ) {
 800f69a:	4b16      	ldr	r3, [pc, #88]	; (800f6f4 <knl_task_initialize+0x80>)
 800f69c:	60bb      	str	r3, [r7, #8]
 800f69e:	2300      	movs	r3, #0
 800f6a0:	60fb      	str	r3, [r7, #12]
 800f6a2:	e014      	b.n	800f6ce <knl_task_initialize+0x5a>
		tskid = ID_TSK(i);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	607b      	str	r3, [r7, #4]
		tcb->tskid = tskid;
 800f6aa:	68bb      	ldr	r3, [r7, #8]
 800f6ac:	687a      	ldr	r2, [r7, #4]
 800f6ae:	609a      	str	r2, [r3, #8]
		tcb->state = TS_NONEXIST;
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if USE_LEGACY_API && USE_RENDEZVOUS
		tcb->wrdvno = tskid;
#endif

		QueInsert(&tcb->tskque, &knl_free_tcb);
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	490d      	ldr	r1, [pc, #52]	; (800f6f0 <knl_task_initialize+0x7c>)
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7ff fe75 	bl	800f3ac <QueInsert>
	for ( tcb = knl_tcb_table, i = 0; i < NUM_TSKID; tcb++, i++ ) {
 800f6c2:	68bb      	ldr	r3, [r7, #8]
 800f6c4:	3368      	adds	r3, #104	; 0x68
 800f6c6:	60bb      	str	r3, [r7, #8]
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	3301      	adds	r3, #1
 800f6cc:	60fb      	str	r3, [r7, #12]
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	2b1f      	cmp	r3, #31
 800f6d2:	dde7      	ble.n	800f6a4 <knl_task_initialize+0x30>
	}

	return E_OK;
 800f6d4:	2300      	movs	r3, #0
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3710      	adds	r7, #16
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}
 800f6de:	bf00      	nop
 800f6e0:	2400240c 	.word	0x2400240c
 800f6e4:	24002408 	.word	0x24002408
 800f6e8:	24002410 	.word	0x24002410
 800f6ec:	24002404 	.word	0x24002404
 800f6f0:	24003220 	.word	0x24003220
 800f6f4:	24002520 	.word	0x24002520

0800f6f8 <knl_make_dormant>:

/*
 * Prepare task execution.
 */
EXPORT void knl_make_dormant( TCB *tcb )
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
	/* Initialize variables which should be reset at DORMANT state */
	tcb->state	= TS_DORMANT;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	2208      	movs	r2, #8
 800f704:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	tcb->priority	= tcb->bpriority = tcb->ipriority;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	tcb->sysmode	= tcb->isysmode;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800f726:	b21a      	sxth	r2, r3
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	845a      	strh	r2, [r3, #34]	; 0x22
	tcb->wupcnt	= 0;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2200      	movs	r2, #0
 800f730:	635a      	str	r2, [r3, #52]	; 0x34
	tcb->suscnt	= 0;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2200      	movs	r2, #0
 800f736:	639a      	str	r2, [r3, #56]	; 0x38

	tcb->klockwait	= FALSE;
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800f73e:	f36f 0300 	bfc	r3, #0, #1
 800f742:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	tcb->klocked	= FALSE;
 800f746:	687a      	ldr	r2, [r7, #4]
 800f748:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 800f74c:	f36f 0341 	bfc	r3, #1, #1
 800f750:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
#if USE_DBGSPT && defined(USE_FUNC_TD_INF_TSK)
	tcb->stime	= 0;
	tcb->utime	= 0;
#endif

	tcb->wercd = NULL;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2200      	movs	r2, #0
 800f758:	63da      	str	r2, [r3, #60]	; 0x3c

#if USE_MUTEX == 1
	tcb->mtxlist	= NULL;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	2200      	movs	r2, #0
 800f75e:	665a      	str	r2, [r3, #100]	; 0x64
#endif

	/* Set context to start task */
	knl_setup_context(tcb);
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f7ff ff5b 	bl	800f61c <knl_setup_context>
}
 800f766:	bf00      	nop
 800f768:	3708      	adds	r7, #8
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
	...

0800f770 <knl_make_ready>:
 * Set task to READY state.
 *	Update the task state and insert in the ready queue. If necessary, 
 *	update 'knl_schedtsk' and request to start task dispatcher. 
 */
EXPORT void knl_make_ready( TCB *tcb )
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b082      	sub	sp, #8
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
	tcb->state = TS_READY;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2201      	movs	r2, #1
 800f77c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ( knl_ready_queue_insert(&knl_ready_queue, tcb) ) {
 800f780:	6879      	ldr	r1, [r7, #4]
 800f782:	4806      	ldr	r0, [pc, #24]	; (800f79c <knl_make_ready+0x2c>)
 800f784:	f7ff fea5 	bl	800f4d2 <knl_ready_queue_insert>
 800f788:	4603      	mov	r3, r0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d002      	beq.n	800f794 <knl_make_ready+0x24>
		knl_schedtsk = tcb;
 800f78e:	4a04      	ldr	r2, [pc, #16]	; (800f7a0 <knl_make_ready+0x30>)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6013      	str	r3, [r2, #0]
	}
}
 800f794:	bf00      	nop
 800f796:	3708      	adds	r7, #8
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	24002410 	.word	0x24002410
 800f7a0:	2400240c 	.word	0x2400240c

0800f7a4 <knl_make_non_ready>:
 *	If the deleted task is 'knl_schedtsk', set 'knl_schedtsk' to the
 *	highest priority task in the ready queue. 
 *	'tcb' task must be READY.
 */
EXPORT void knl_make_non_ready( TCB *tcb )
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
	knl_ready_queue_delete(&knl_ready_queue, tcb);
 800f7ac:	6879      	ldr	r1, [r7, #4]
 800f7ae:	4809      	ldr	r0, [pc, #36]	; (800f7d4 <knl_make_non_ready+0x30>)
 800f7b0:	f7ff fec7 	bl	800f542 <knl_ready_queue_delete>
	if ( knl_schedtsk == tcb ) {
 800f7b4:	4b08      	ldr	r3, [pc, #32]	; (800f7d8 <knl_make_non_ready+0x34>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	687a      	ldr	r2, [r7, #4]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d105      	bne.n	800f7ca <knl_make_non_ready+0x26>
		knl_schedtsk = knl_ready_queue_top(&knl_ready_queue);
 800f7be:	4805      	ldr	r0, [pc, #20]	; (800f7d4 <knl_make_non_ready+0x30>)
 800f7c0:	f7ff fe6e 	bl	800f4a0 <knl_ready_queue_top>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	4a04      	ldr	r2, [pc, #16]	; (800f7d8 <knl_make_non_ready+0x34>)
 800f7c8:	6013      	str	r3, [r2, #0]
	}
}
 800f7ca:	bf00      	nop
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	24002410 	.word	0x24002410
 800f7d8:	2400240c 	.word	0x2400240c

0800f7dc <knl_change_task_priority>:

/*
 * Change task priority.
 */
EXPORT void knl_change_task_priority( TCB *tcb, INT priority )
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	6039      	str	r1, [r7, #0]
	INT	oldpri;

	if ( tcb->state == TS_READY ) {
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d10f      	bne.n	800f810 <knl_change_task_priority+0x34>
		 * When deleting a task from the ready queue, 
		 * a value in the 'priority' field in TCB is needed. 
		 * Therefore you need to delete the task from the
		 * ready queue before changing 'tcb->priority.'
		 */
		knl_ready_queue_delete(&knl_ready_queue, tcb);
 800f7f0:	6879      	ldr	r1, [r7, #4]
 800f7f2:	4817      	ldr	r0, [pc, #92]	; (800f850 <knl_change_task_priority+0x74>)
 800f7f4:	f7ff fea5 	bl	800f542 <knl_ready_queue_delete>
		tcb->priority = (UB)priority;
 800f7f8:	683b      	ldr	r3, [r7, #0]
 800f7fa:	b2da      	uxtb	r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		knl_ready_queue_insert(&knl_ready_queue, tcb);
 800f802:	6879      	ldr	r1, [r7, #4]
 800f804:	4812      	ldr	r0, [pc, #72]	; (800f850 <knl_change_task_priority+0x74>)
 800f806:	f7ff fe64 	bl	800f4d2 <knl_ready_queue_insert>
		knl_reschedule();
 800f80a:	f7ff feef 	bl	800f5ec <knl_reschedule>
		   execute it */
		if ( (tcb->state & TS_WAIT) != 0 && tcb->wspec->chg_pri_hook) {
			(*tcb->wspec->chg_pri_hook)(tcb, oldpri);
		}
	}
}
 800f80e:	e01a      	b.n	800f846 <knl_change_task_priority+0x6a>
		oldpri = tcb->priority;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800f816:	60fb      	str	r3, [r7, #12]
		tcb->priority = (UB)priority;
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	b2da      	uxtb	r2, r3
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		if ( (tcb->state & TS_WAIT) != 0 && tcb->wspec->chg_pri_hook) {
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800f828:	f003 0302 	and.w	r3, r3, #2
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d00a      	beq.n	800f846 <knl_change_task_priority+0x6a>
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d005      	beq.n	800f846 <knl_change_task_priority+0x6a>
			(*tcb->wspec->chg_pri_hook)(tcb, oldpri);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f83e:	685b      	ldr	r3, [r3, #4]
 800f840:	68f9      	ldr	r1, [r7, #12]
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	4798      	blx	r3
}
 800f846:	bf00      	nop
 800f848:	3710      	adds	r7, #16
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop
 800f850:	24002410 	.word	0x24002410

0800f854 <QueRemove>:
{
 800f854:	b480      	push	{r7}
 800f856:	b083      	sub	sp, #12
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	687a      	ldr	r2, [r7, #4]
 800f862:	429a      	cmp	r2, r3
 800f864:	d009      	beq.n	800f87a <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	6812      	ldr	r2, [r2, #0]
 800f86e:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	687a      	ldr	r2, [r7, #4]
 800f876:	6852      	ldr	r2, [r2, #4]
 800f878:	605a      	str	r2, [r3, #4]
}
 800f87a:	bf00      	nop
 800f87c:	370c      	adds	r7, #12
 800f87e:	46bd      	mov	sp, r7
 800f880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f884:	4770      	bx	lr

0800f886 <QueRemoveNext>:
{
 800f886:	b480      	push	{r7}
 800f888:	b085      	sub	sp, #20
 800f88a:	af00      	add	r7, sp, #0
 800f88c:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	687a      	ldr	r2, [r7, #4]
 800f894:	429a      	cmp	r2, r3
 800f896:	d101      	bne.n	800f89c <QueRemoveNext+0x16>
		return NULL;
 800f898:	2300      	movs	r3, #0
 800f89a:	e00b      	b.n	800f8b4 <QueRemoveNext+0x2e>
	entry = que->next;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	681a      	ldr	r2, [r3, #0]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	605a      	str	r2, [r3, #4]
	return entry;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3714      	adds	r7, #20
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <knl_timer_delete>:

/*
 * Delete from time-event queue
 */
Inline void knl_timer_delete( TMEB *event )
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
	QueRemove(&event->queue);
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7ff ffc2 	bl	800f854 <QueRemove>
}
 800f8d0:	bf00      	nop
 800f8d2:	3708      	adds	r7, #8
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <knl_isTaskIndependent>:
{
 800f8d8:	b480      	push	{r7}
 800f8da:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 800f8dc:	4b05      	ldr	r3, [pc, #20]	; (800f8f4 <knl_isTaskIndependent+0x1c>)
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	bfcc      	ite	gt
 800f8e4:	2301      	movgt	r3, #1
 800f8e6:	2300      	movle	r3, #0
 800f8e8:	b2db      	uxtb	r3, r3
}
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f2:	4770      	bx	lr
 800f8f4:	240010d8 	.word	0x240010d8

0800f8f8 <knl_wait_cancel>:
 * Cancel task wait state.
 *	Remove the task from the timer queue and the wait queue.
 *	Do not update the task state.
 */
Inline void knl_wait_cancel( TCB *tcb )
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b082      	sub	sp, #8
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
	knl_timer_delete(&tcb->wtmeb);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	334c      	adds	r3, #76	; 0x4c
 800f904:	4618      	mov	r0, r3
 800f906:	f7ff ffdb 	bl	800f8c0 <knl_timer_delete>
	QueRemove(&tcb->tskque);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7ff ffa1 	bl	800f854 <QueRemove>
}
 800f912:	bf00      	nop
 800f914:	3708      	adds	r7, #8
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}

0800f91a <knl_setup_stacd>:
/*
 * Set task startup code
 *	Called by 'tk_sta_tsk()' processing.
 */
Inline void knl_setup_stacd( TCB *tcb, INT stacd )
{
 800f91a:	b480      	push	{r7}
 800f91c:	b085      	sub	sp, #20
 800f91e:	af00      	add	r7, sp, #0
 800f920:	6078      	str	r0, [r7, #4]
 800f922:	6039      	str	r1, [r7, #0]
	SStackFrame	*ssp;
	
	ssp = tcb->tskctxb.ssp;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	699b      	ldr	r3, [r3, #24]
 800f928:	60fb      	str	r3, [r7, #12]

	ssp->r[0] = stacd;
 800f92a:	683a      	ldr	r2, [r7, #0]
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	625a      	str	r2, [r3, #36]	; 0x24
	ssp->r[1] = (VW)tcb->exinf;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	461a      	mov	r2, r3
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f93a:	bf00      	nop
 800f93c:	3714      	adds	r7, #20
 800f93e:	46bd      	mov	sp, r7
 800f940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f944:	4770      	bx	lr
	...

0800f948 <knl_cleanup_context>:

/*
 * Delete task contexts
 */
Inline void knl_cleanup_context( TCB *tcb )
{
 800f948:	b480      	push	{r7}
 800f94a:	b085      	sub	sp, #20
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
#if USE_FPU		/* Clear CONTROL.FPCA */
	UW	control;

	if(tcb == knl_ctxtsk) {
 800f950:	4b0a      	ldr	r3, [pc, #40]	; (800f97c <knl_cleanup_context+0x34>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	687a      	ldr	r2, [r7, #4]
 800f956:	429a      	cmp	r2, r3
 800f958:	d109      	bne.n	800f96e <knl_cleanup_context+0x26>
		/* Clear CONTROL.FPCA */
		Asm("mrs %0, control":"=r"(control));
 800f95a:	f3ef 8314 	mrs	r3, CONTROL
 800f95e:	60fb      	str	r3, [r7, #12]
		control &= (1<<2);
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	f003 0304 	and.w	r3, r3, #4
 800f966:	60fb      	str	r3, [r7, #12]
		Asm("msr control, %0"::"r"(control));
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f383 8814 	msr	CONTROL, r3
	}
#endif
}
 800f96e:	bf00      	nop
 800f970:	3714      	adds	r7, #20
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr
 800f97a:	bf00      	nop
 800f97c:	24002408 	.word	0x24002408

0800f980 <tk_cre_tsk>:

/*
 * Create task
 */
SYSCALL ID tk_cre_tsk( CONST T_CTSK *pk_ctsk )
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b088      	sub	sp, #32
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_TSKATR = {	/* Valid value of task attribute */
 800f988:	f241 3321 	movw	r3, #4897	; 0x1321
 800f98c:	613b      	str	r3, [r7, #16]
	TCB	*tcb;
	W	sstksz;
	void	*stack;
	ER	ercd;

	CHECK_RSATR(pk_ctsk->tskatr, VALID_TSKATR);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	685a      	ldr	r2, [r3, #4]
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	43db      	mvns	r3, r3
 800f996:	4013      	ands	r3, r2
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d002      	beq.n	800f9a2 <tk_cre_tsk+0x22>
 800f99c:	f06f 030a 	mvn.w	r3, #10
 800f9a0:	e090      	b.n	800fac4 <tk_cre_tsk+0x144>
#if !USE_IMALLOC
	/* TA_USERBUF must be specified if configured in no Imalloc */
	CHECK_PAR((pk_ctsk->tskatr & TA_USERBUF) != 0);
#endif
	CHECK_PAR(pk_ctsk->stksz >= 0);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	691b      	ldr	r3, [r3, #16]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	da02      	bge.n	800f9b0 <tk_cre_tsk+0x30>
 800f9aa:	f06f 0310 	mvn.w	r3, #16
 800f9ae:	e089      	b.n	800fac4 <tk_cre_tsk+0x144>
	CHECK_PRI(pk_ctsk->itskpri);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	68db      	ldr	r3, [r3, #12]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	dd03      	ble.n	800f9c0 <tk_cre_tsk+0x40>
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	68db      	ldr	r3, [r3, #12]
 800f9bc:	2b20      	cmp	r3, #32
 800f9be:	dd02      	ble.n	800f9c6 <tk_cre_tsk+0x46>
 800f9c0:	f06f 0310 	mvn.w	r3, #16
 800f9c4:	e07e      	b.n	800fac4 <tk_cre_tsk+0x144>

	if ( (pk_ctsk->tskatr & TA_USERBUF) != 0 ) {
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	f003 0320 	and.w	r3, r3, #32
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d00c      	beq.n	800f9ec <tk_cre_tsk+0x6c>
		/* Use user buffer */
		sstksz = pk_ctsk->stksz;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	691b      	ldr	r3, [r3, #16]
 800f9d6:	61fb      	str	r3, [r7, #28]
		CHECK_PAR(sstksz >= MIN_SYS_STACK_SIZE);
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	2b7f      	cmp	r3, #127	; 0x7f
 800f9dc:	dc02      	bgt.n	800f9e4 <tk_cre_tsk+0x64>
 800f9de:	f06f 0310 	mvn.w	r3, #16
 800f9e2:	e06f      	b.n	800fac4 <tk_cre_tsk+0x144>
		stack = pk_ctsk->bufptr;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	695b      	ldr	r3, [r3, #20]
 800f9e8:	61bb      	str	r3, [r7, #24]
 800f9ea:	e015      	b.n	800fa18 <tk_cre_tsk+0x98>
	} else {
#if USE_IMALLOC
		/* Allocate system stack area */
		sstksz = pk_ctsk->stksz + DEFAULT_SYS_STKSZ;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	691b      	ldr	r3, [r3, #16]
 800f9f0:	3380      	adds	r3, #128	; 0x80
 800f9f2:	61fb      	str	r3, [r7, #28]
		sstksz  = (sstksz  + 7) / 8 * 8;	/* Align to a multiple of 8 */
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	3307      	adds	r3, #7
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	da00      	bge.n	800f9fe <tk_cre_tsk+0x7e>
 800f9fc:	3307      	adds	r3, #7
 800f9fe:	10db      	asrs	r3, r3, #3
 800fa00:	00db      	lsls	r3, r3, #3
 800fa02:	61fb      	str	r3, [r7, #28]
		stack = knl_Imalloc((UW)sstksz);
 800fa04:	69f8      	ldr	r0, [r7, #28]
 800fa06:	f7fe ff2d 	bl	800e864 <knl_Imalloc>
 800fa0a:	61b8      	str	r0, [r7, #24]
		if ( stack == NULL ) {
 800fa0c:	69bb      	ldr	r3, [r7, #24]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d102      	bne.n	800fa18 <tk_cre_tsk+0x98>
			return E_NOMEM;
 800fa12:	f06f 0320 	mvn.w	r3, #32
 800fa16:	e055      	b.n	800fac4 <tk_cre_tsk+0x144>
		}
#endif
	}

	BEGIN_CRITICAL_SECTION;
 800fa18:	f002 fdd1 	bl	80125be <disint>
 800fa1c:	60f8      	str	r0, [r7, #12]
	/* Get control block from FreeQue */
	tcb = (TCB*)QueRemoveNext(&knl_free_tcb);
 800fa1e:	482b      	ldr	r0, [pc, #172]	; (800facc <tk_cre_tsk+0x14c>)
 800fa20:	f7ff ff31 	bl	800f886 <QueRemoveNext>
 800fa24:	60b8      	str	r0, [r7, #8]
	if ( tcb == NULL ) {
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d103      	bne.n	800fa34 <tk_cre_tsk+0xb4>
		ercd = E_LIMIT;
 800fa2c:	f06f 0321 	mvn.w	r3, #33	; 0x21
 800fa30:	617b      	str	r3, [r7, #20]
		goto error_exit;
 800fa32:	e028      	b.n	800fa86 <tk_cre_tsk+0x106>
	}

	/* Initialize control block */
	tcb->exinf     = pk_ctsk->exinf;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681a      	ldr	r2, [r3, #0]
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	60da      	str	r2, [r3, #12]
	tcb->tskatr    = pk_ctsk->tskatr;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	685a      	ldr	r2, [r3, #4]
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	611a      	str	r2, [r3, #16]
	tcb->task      = pk_ctsk->task;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	689a      	ldr	r2, [r3, #8]
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	615a      	str	r2, [r3, #20]
	tcb->ipriority = (UB)int_priority(pk_ctsk->itskpri);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	68db      	ldr	r3, [r3, #12]
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	3b01      	subs	r3, #1
 800fa54:	b2da      	uxtb	r2, r3
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	tcb->sstksz    = sstksz;
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	69fa      	ldr	r2, [r7, #28]
 800fa60:	61da      	str	r2, [r3, #28]
		knl_strncpy((char*)tcb->name, (char*)pk_ctsk->dsname, OBJECT_NAME_LENGTH);
	}
#endif

	/* Set stack pointer */
	tcb->isstack = (VB*)stack + sstksz;
 800fa62:	69fb      	ldr	r3, [r7, #28]
 800fa64:	69ba      	ldr	r2, [r7, #24]
 800fa66:	441a      	add	r2, r3
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	661a      	str	r2, [r3, #96]	; 0x60

	/* Set initial value of task operation mode */
	tcb->isysmode = 1;
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	2201      	movs	r2, #1
 800fa70:	f883 2020 	strb.w	r2, [r3, #32]
	tcb->sysmode  = 1;
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	2201      	movs	r2, #1
 800fa78:	845a      	strh	r2, [r3, #34]	; 0x22

	/* make it to DORMANT state */
	knl_make_dormant(tcb);
 800fa7a:	68b8      	ldr	r0, [r7, #8]
 800fa7c:	f7ff fe3c 	bl	800f6f8 <knl_make_dormant>

	ercd = tcb->tskid;
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	689b      	ldr	r3, [r3, #8]
 800fa84:	617b      	str	r3, [r7, #20]

    error_exit:
	END_CRITICAL_SECTION;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d10b      	bne.n	800faa4 <tk_cre_tsk+0x124>
 800fa8c:	4b10      	ldr	r3, [pc, #64]	; (800fad0 <tk_cre_tsk+0x150>)
 800fa8e:	681a      	ldr	r2, [r3, #0]
 800fa90:	4b10      	ldr	r3, [pc, #64]	; (800fad4 <tk_cre_tsk+0x154>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	d005      	beq.n	800faa4 <tk_cre_tsk+0x124>
 800fa98:	4b0f      	ldr	r3, [pc, #60]	; (800fad8 <tk_cre_tsk+0x158>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d101      	bne.n	800faa4 <tk_cre_tsk+0x124>
 800faa0:	f001 fcfa 	bl	8011498 <knl_dispatch>
 800faa4:	68f8      	ldr	r0, [r7, #12]
 800faa6:	f002 fd6e 	bl	8012586 <set_basepri>

#if USE_IMALLOC
	if ( (ercd < E_OK) && ((pk_ctsk->tskatr & TA_USERBUF) == 0) ) {
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	2b00      	cmp	r3, #0
 800faae:	da08      	bge.n	800fac2 <tk_cre_tsk+0x142>
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	685b      	ldr	r3, [r3, #4]
 800fab4:	f003 0320 	and.w	r3, r3, #32
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d102      	bne.n	800fac2 <tk_cre_tsk+0x142>
		knl_Ifree(stack);
 800fabc:	69b8      	ldr	r0, [r7, #24]
 800fabe:	f7fe ff27 	bl	800e910 <knl_Ifree>
	}
#endif

	return ercd;
 800fac2:	697b      	ldr	r3, [r7, #20]
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3720      	adds	r7, #32
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	24003220 	.word	0x24003220
 800fad0:	24002408 	.word	0x24002408
 800fad4:	2400240c 	.word	0x2400240c
 800fad8:	24002404 	.word	0x24002404

0800fadc <tk_sta_tsk>:

/*
 * Start task
 */
SYSCALL ER tk_sta_tsk( ID tskid, INT stacd )
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b086      	sub	sp, #24
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	6039      	str	r1, [r7, #0]
	TCB	*tcb;
	TSTAT	state;
	ER	ercd = E_OK;
 800fae6:	2300      	movs	r3, #0
 800fae8:	617b      	str	r3, [r7, #20]

	CHECK_TSKID(tskid);
 800faea:	f7ff fef5 	bl	800f8d8 <knl_isTaskIndependent>
 800faee:	4603      	mov	r3, r0
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d109      	bne.n	800fb08 <tk_sta_tsk+0x2c>
 800faf4:	4b2f      	ldr	r3, [pc, #188]	; (800fbb4 <tk_sta_tsk+0xd8>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d005      	beq.n	800fb08 <tk_sta_tsk+0x2c>
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d102      	bne.n	800fb08 <tk_sta_tsk+0x2c>
 800fb02:	f06f 0328 	mvn.w	r3, #40	; 0x28
 800fb06:	e050      	b.n	800fbaa <tk_sta_tsk+0xce>
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	dd02      	ble.n	800fb14 <tk_sta_tsk+0x38>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	2b20      	cmp	r3, #32
 800fb12:	dd02      	ble.n	800fb1a <tk_sta_tsk+0x3e>
 800fb14:	f06f 0311 	mvn.w	r3, #17
 800fb18:	e047      	b.n	800fbaa <tk_sta_tsk+0xce>
	CHECK_NONSELF(tskid);
 800fb1a:	f7ff fedd 	bl	800f8d8 <knl_isTaskIndependent>
 800fb1e:	4603      	mov	r3, r0
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d10c      	bne.n	800fb3e <tk_sta_tsk+0x62>
 800fb24:	4b23      	ldr	r3, [pc, #140]	; (800fbb4 <tk_sta_tsk+0xd8>)
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d008      	beq.n	800fb3e <tk_sta_tsk+0x62>
 800fb2c:	4b21      	ldr	r3, [pc, #132]	; (800fbb4 <tk_sta_tsk+0xd8>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	689b      	ldr	r3, [r3, #8]
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d102      	bne.n	800fb3e <tk_sta_tsk+0x62>
 800fb38:	f06f 0328 	mvn.w	r3, #40	; 0x28
 800fb3c:	e035      	b.n	800fbaa <tk_sta_tsk+0xce>

	tcb = get_tcb(tskid);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	3b01      	subs	r3, #1
 800fb42:	2268      	movs	r2, #104	; 0x68
 800fb44:	fb02 f303 	mul.w	r3, r2, r3
 800fb48:	4a1b      	ldr	r2, [pc, #108]	; (800fbb8 <tk_sta_tsk+0xdc>)
 800fb4a:	4413      	add	r3, r2
 800fb4c:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800fb4e:	f002 fd36 	bl	80125be <disint>
 800fb52:	60f8      	str	r0, [r7, #12]
	state = (TSTAT)tcb->state;
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800fb5a:	72fb      	strb	r3, [r7, #11]
	if ( state != TS_DORMANT ) {
 800fb5c:	7afb      	ldrb	r3, [r7, #11]
 800fb5e:	2b08      	cmp	r3, #8
 800fb60:	d009      	beq.n	800fb76 <tk_sta_tsk+0x9a>
		ercd = ( state == TS_NONEXIST )? E_NOEXS: E_OBJ;
 800fb62:	7afb      	ldrb	r3, [r7, #11]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d102      	bne.n	800fb6e <tk_sta_tsk+0x92>
 800fb68:	f06f 0329 	mvn.w	r3, #41	; 0x29
 800fb6c:	e001      	b.n	800fb72 <tk_sta_tsk+0x96>
 800fb6e:	f06f 0328 	mvn.w	r3, #40	; 0x28
 800fb72:	617b      	str	r3, [r7, #20]
 800fb74:	e006      	b.n	800fb84 <tk_sta_tsk+0xa8>
	} else {
		knl_setup_stacd(tcb, stacd);
 800fb76:	6839      	ldr	r1, [r7, #0]
 800fb78:	6938      	ldr	r0, [r7, #16]
 800fb7a:	f7ff fece 	bl	800f91a <knl_setup_stacd>
		knl_make_ready(tcb);
 800fb7e:	6938      	ldr	r0, [r7, #16]
 800fb80:	f7ff fdf6 	bl	800f770 <knl_make_ready>
	}
	END_CRITICAL_SECTION;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d10b      	bne.n	800fba2 <tk_sta_tsk+0xc6>
 800fb8a:	4b0a      	ldr	r3, [pc, #40]	; (800fbb4 <tk_sta_tsk+0xd8>)
 800fb8c:	681a      	ldr	r2, [r3, #0]
 800fb8e:	4b0b      	ldr	r3, [pc, #44]	; (800fbbc <tk_sta_tsk+0xe0>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d005      	beq.n	800fba2 <tk_sta_tsk+0xc6>
 800fb96:	4b0a      	ldr	r3, [pc, #40]	; (800fbc0 <tk_sta_tsk+0xe4>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d101      	bne.n	800fba2 <tk_sta_tsk+0xc6>
 800fb9e:	f001 fc7b 	bl	8011498 <knl_dispatch>
 800fba2:	68f8      	ldr	r0, [r7, #12]
 800fba4:	f002 fcef 	bl	8012586 <set_basepri>

	return ercd;
 800fba8:	697b      	ldr	r3, [r7, #20]
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	3718      	adds	r7, #24
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd80      	pop	{r7, pc}
 800fbb2:	bf00      	nop
 800fbb4:	24002408 	.word	0x24002408
 800fbb8:	24002520 	.word	0x24002520
 800fbbc:	2400240c 	.word	0x2400240c
 800fbc0:	24002404 	.word	0x24002404

0800fbc4 <knl_ter_tsk>:
/*
 * Task finalization
 *	Call from critical section
 */
LOCAL void knl_ter_tsk( TCB *tcb )
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
	TSTAT	state;

	state = (TSTAT)tcb->state;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800fbd2:	73fb      	strb	r3, [r7, #15]
	if ( state == TS_READY ) {
 800fbd4:	7bfb      	ldrb	r3, [r7, #15]
 800fbd6:	2b01      	cmp	r3, #1
 800fbd8:	d103      	bne.n	800fbe2 <knl_ter_tsk+0x1e>
		knl_make_non_ready(tcb);
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f7ff fde2 	bl	800f7a4 <knl_make_non_ready>
 800fbe0:	e011      	b.n	800fc06 <knl_ter_tsk+0x42>

	} else if ( (state & TS_WAIT) != 0 ) {
 800fbe2:	7bfb      	ldrb	r3, [r7, #15]
 800fbe4:	f003 0302 	and.w	r3, r3, #2
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d00c      	beq.n	800fc06 <knl_ter_tsk+0x42>
		knl_wait_cancel(tcb);
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f7ff fe83 	bl	800f8f8 <knl_wait_cancel>
		if ( tcb->wspec->rel_wai_hook != NULL ) {
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d004      	beq.n	800fc06 <knl_ter_tsk+0x42>
			(*tcb->wspec->rel_wai_hook)(tcb);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc00:	689b      	ldr	r3, [r3, #8]
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	4798      	blx	r3
		}
	}

#if USE_MUTEX == 1
	/* signal mutex */
	knl_signal_all_mutex(tcb);
 800fc06:	6878      	ldr	r0, [r7, #4]
 800fc08:	f7ff f8a2 	bl	800ed50 <knl_signal_all_mutex>
#endif

	knl_cleanup_context(tcb);
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f7ff fe9b 	bl	800f948 <knl_cleanup_context>
}
 800fc12:	bf00      	nop
 800fc14:	3710      	adds	r7, #16
 800fc16:	46bd      	mov	sp, r7
 800fc18:	bd80      	pop	{r7, pc}
	...

0800fc1c <tk_ext_tsk>:
#ifdef USE_FUNC_TK_EXT_TSK
/*
 * End its own task
 */
SYSCALL void tk_ext_tsk( void )
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b092      	sub	sp, #72	; 0x48
 800fc20:	af00      	add	r7, sp, #0
	volatile VB _dummy[DORMANT_STACK_SIZE];
#endif

	/* Check context error */
#if CHK_CTX2
	if ( in_indp() ) {
 800fc22:	f7ff fe59 	bl	800f8d8 <knl_isTaskIndependent>
 800fc26:	4603      	mov	r3, r0
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d103      	bne.n	800fc34 <tk_ext_tsk+0x18>
 800fc2c:	4b18      	ldr	r3, [pc, #96]	; (800fc90 <tk_ext_tsk+0x74>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d103      	bne.n	800fc3c <tk_ext_tsk+0x20>
		SYSTEM_MESSAGE("tk_ext_tsk was called in the task independent\n");
 800fc34:	4817      	ldr	r0, [pc, #92]	; (800fc94 <tk_ext_tsk+0x78>)
 800fc36:	f001 f851 	bl	8010cdc <tm_putstring>
		while(1);
 800fc3a:	e7fe      	b.n	800fc3a <tk_ext_tsk+0x1e>
		return;
	}
#endif
#if CHK_CTX1
	if ( in_ddsp() ) {
 800fc3c:	4b16      	ldr	r3, [pc, #88]	; (800fc98 <tk_ext_tsk+0x7c>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d10d      	bne.n	800fc60 <tk_ext_tsk+0x44>
 800fc44:	f7ff fe48 	bl	800f8d8 <knl_isTaskIndependent>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d108      	bne.n	800fc60 <tk_ext_tsk+0x44>
 800fc4e:	4b10      	ldr	r3, [pc, #64]	; (800fc90 <tk_ext_tsk+0x74>)
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d004      	beq.n	800fc60 <tk_ext_tsk+0x44>
 800fc56:	f002 fca5 	bl	80125a4 <get_basepri>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d002      	beq.n	800fc66 <tk_ext_tsk+0x4a>
		SYSTEM_MESSAGE("tk_ext_tsk was called in the dispatch disabled\n");
 800fc60:	480e      	ldr	r0, [pc, #56]	; (800fc9c <tk_ext_tsk+0x80>)
 800fc62:	f001 f83b 	bl	8010cdc <tm_putstring>
	}
#endif

	DISABLE_INTERRUPT;
 800fc66:	f002 fcaa 	bl	80125be <disint>
	knl_ter_tsk(knl_ctxtsk);
 800fc6a:	4b09      	ldr	r3, [pc, #36]	; (800fc90 <tk_ext_tsk+0x74>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7ff ffa8 	bl	800fbc4 <knl_ter_tsk>
	knl_make_dormant(knl_ctxtsk);
 800fc74:	4b06      	ldr	r3, [pc, #24]	; (800fc90 <tk_ext_tsk+0x74>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4618      	mov	r0, r3
 800fc7a:	f7ff fd3d 	bl	800f6f8 <knl_make_dormant>

	knl_force_dispatch();
 800fc7e:	f001 fbf3 	bl	8011468 <knl_force_dispatch>
	/* No return */

#ifdef DORMANT_STACK_SIZE
	/* Avoid WARNING (This code does not execute) */
	_dummy[0] = _dummy[0];
 800fc82:	793b      	ldrb	r3, [r7, #4]
 800fc84:	b25b      	sxtb	r3, r3
 800fc86:	713b      	strb	r3, [r7, #4]
#endif
}
 800fc88:	3748      	adds	r7, #72	; 0x48
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}
 800fc8e:	bf00      	nop
 800fc90:	24002408 	.word	0x24002408
 800fc94:	0801292c 	.word	0x0801292c
 800fc98:	24002404 	.word	0x24002404
 800fc9c:	0801295c 	.word	0x0801295c

0800fca0 <tk_get_tid>:
#ifdef USE_FUNC_TK_GET_TID
/*
 * Refer task ID at execution
 */
SYSCALL ID tk_get_tid( void )
{
 800fca0:	b480      	push	{r7}
 800fca2:	af00      	add	r7, sp, #0
	return ( knl_ctxtsk == NULL )? 0: knl_ctxtsk->tskid;
 800fca4:	4b06      	ldr	r3, [pc, #24]	; (800fcc0 <tk_get_tid+0x20>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d003      	beq.n	800fcb4 <tk_get_tid+0x14>
 800fcac:	4b04      	ldr	r3, [pc, #16]	; (800fcc0 <tk_get_tid+0x20>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	689b      	ldr	r3, [r3, #8]
 800fcb2:	e000      	b.n	800fcb6 <tk_get_tid+0x16>
 800fcb4:	2300      	movs	r3, #0
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr
 800fcc0:	24002408 	.word	0x24002408

0800fcc4 <QueInit>:
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	687a      	ldr	r2, [r7, #4]
 800fcd6:	605a      	str	r2, [r3, #4]
}
 800fcd8:	bf00      	nop
 800fcda:	370c      	adds	r7, #12
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce2:	4770      	bx	lr

0800fce4 <knl_isTaskIndependent>:
{
 800fce4:	b480      	push	{r7}
 800fce6:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 800fce8:	4b05      	ldr	r3, [pc, #20]	; (800fd00 <knl_isTaskIndependent+0x1c>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	bfcc      	ite	gt
 800fcf0:	2301      	movgt	r3, #1
 800fcf2:	2300      	movle	r3, #0
 800fcf4:	b2db      	uxtb	r3, r3
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfe:	4770      	bx	lr
 800fd00:	240010d8 	.word	0x240010d8

0800fd04 <tk_slp_tsk>:
#ifdef USE_FUNC_TK_SLP_TSK
/*
 * Move its own task state to wait state
 */
SYSCALL ER tk_slp_tsk( TMO tmout )
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
	ER	ercd = E_OK;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	60bb      	str	r3, [r7, #8]

	CHECK_TMOUT(tmout);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd16:	da02      	bge.n	800fd1e <tk_slp_tsk+0x1a>
 800fd18:	f06f 0310 	mvn.w	r3, #16
 800fd1c:	e051      	b.n	800fdc2 <tk_slp_tsk+0xbe>
	CHECK_DISPATCH();
 800fd1e:	4b2b      	ldr	r3, [pc, #172]	; (800fdcc <tk_slp_tsk+0xc8>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d10d      	bne.n	800fd42 <tk_slp_tsk+0x3e>
 800fd26:	f7ff ffdd 	bl	800fce4 <knl_isTaskIndependent>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d108      	bne.n	800fd42 <tk_slp_tsk+0x3e>
 800fd30:	4b27      	ldr	r3, [pc, #156]	; (800fdd0 <tk_slp_tsk+0xcc>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d004      	beq.n	800fd42 <tk_slp_tsk+0x3e>
 800fd38:	f002 fc34 	bl	80125a4 <get_basepri>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d002      	beq.n	800fd48 <tk_slp_tsk+0x44>
 800fd42:	f06f 0318 	mvn.w	r3, #24
 800fd46:	e03c      	b.n	800fdc2 <tk_slp_tsk+0xbe>

	BEGIN_CRITICAL_SECTION;
 800fd48:	f002 fc39 	bl	80125be <disint>
 800fd4c:	60f8      	str	r0, [r7, #12]

	if ( knl_ctxtsk->wupcnt > 0 ) {
 800fd4e:	4b20      	ldr	r3, [pc, #128]	; (800fdd0 <tk_slp_tsk+0xcc>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	dd05      	ble.n	800fd64 <tk_slp_tsk+0x60>
		knl_ctxtsk->wupcnt--;
 800fd58:	4b1d      	ldr	r3, [pc, #116]	; (800fdd0 <tk_slp_tsk+0xcc>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd5e:	3a01      	subs	r2, #1
 800fd60:	635a      	str	r2, [r3, #52]	; 0x34
 800fd62:	e01b      	b.n	800fd9c <tk_slp_tsk+0x98>
	} else {
		ercd = E_TMOUT;
 800fd64:	f06f 0331 	mvn.w	r3, #49	; 0x31
 800fd68:	60bb      	str	r3, [r7, #8]
		if ( tmout != TMO_POL ) {
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d015      	beq.n	800fd9c <tk_slp_tsk+0x98>
			knl_ctxtsk->wspec = &knl_wspec_slp;
 800fd70:	4b17      	ldr	r3, [pc, #92]	; (800fdd0 <tk_slp_tsk+0xcc>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	4a17      	ldr	r2, [pc, #92]	; (800fdd4 <tk_slp_tsk+0xd0>)
 800fd76:	62da      	str	r2, [r3, #44]	; 0x2c
			knl_ctxtsk->wid = 0;
 800fd78:	4b15      	ldr	r3, [pc, #84]	; (800fdd0 <tk_slp_tsk+0xcc>)
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	631a      	str	r2, [r3, #48]	; 0x30
			knl_ctxtsk->wercd = &ercd;
 800fd80:	4b13      	ldr	r3, [pc, #76]	; (800fdd0 <tk_slp_tsk+0xcc>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f107 0208 	add.w	r2, r7, #8
 800fd88:	63da      	str	r2, [r3, #60]	; 0x3c
			knl_make_wait(tmout, TA_NULL);
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f000 fbe7 	bl	8010560 <knl_make_wait>
			QueInit(&knl_ctxtsk->tskque);
 800fd92:	4b0f      	ldr	r3, [pc, #60]	; (800fdd0 <tk_slp_tsk+0xcc>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4618      	mov	r0, r3
 800fd98:	f7ff ff94 	bl	800fcc4 <QueInit>
		}
	}

	END_CRITICAL_SECTION;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d10b      	bne.n	800fdba <tk_slp_tsk+0xb6>
 800fda2:	4b0b      	ldr	r3, [pc, #44]	; (800fdd0 <tk_slp_tsk+0xcc>)
 800fda4:	681a      	ldr	r2, [r3, #0]
 800fda6:	4b0c      	ldr	r3, [pc, #48]	; (800fdd8 <tk_slp_tsk+0xd4>)
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d005      	beq.n	800fdba <tk_slp_tsk+0xb6>
 800fdae:	4b07      	ldr	r3, [pc, #28]	; (800fdcc <tk_slp_tsk+0xc8>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d101      	bne.n	800fdba <tk_slp_tsk+0xb6>
 800fdb6:	f001 fb6f 	bl	8011498 <knl_dispatch>
 800fdba:	68f8      	ldr	r0, [r7, #12]
 800fdbc:	f002 fbe3 	bl	8012586 <set_basepri>

	return ercd;
 800fdc0:	68bb      	ldr	r3, [r7, #8]
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3710      	adds	r7, #16
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	24002404 	.word	0x24002404
 800fdd0:	24002408 	.word	0x24002408
 800fdd4:	08012b08 	.word	0x08012b08
 800fdd8:	2400240c 	.word	0x2400240c

0800fddc <tk_dly_tsk>:

/*
 * Task delay
 */
SYSCALL ER tk_dly_tsk( RELTIM dlytim )
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
	ER	ercd = E_OK;
 800fde4:	2300      	movs	r3, #0
 800fde6:	60bb      	str	r3, [r7, #8]

	CHECK_RELTIM(dlytim);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	da02      	bge.n	800fdf4 <tk_dly_tsk+0x18>
 800fdee:	f06f 0310 	mvn.w	r3, #16
 800fdf2:	e043      	b.n	800fe7c <tk_dly_tsk+0xa0>

	CHECK_DISPATCH();
 800fdf4:	4b23      	ldr	r3, [pc, #140]	; (800fe84 <tk_dly_tsk+0xa8>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d10d      	bne.n	800fe18 <tk_dly_tsk+0x3c>
 800fdfc:	f7ff ff72 	bl	800fce4 <knl_isTaskIndependent>
 800fe00:	4603      	mov	r3, r0
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d108      	bne.n	800fe18 <tk_dly_tsk+0x3c>
 800fe06:	4b20      	ldr	r3, [pc, #128]	; (800fe88 <tk_dly_tsk+0xac>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d004      	beq.n	800fe18 <tk_dly_tsk+0x3c>
 800fe0e:	f002 fbc9 	bl	80125a4 <get_basepri>
 800fe12:	4603      	mov	r3, r0
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d002      	beq.n	800fe1e <tk_dly_tsk+0x42>
 800fe18:	f06f 0318 	mvn.w	r3, #24
 800fe1c:	e02e      	b.n	800fe7c <tk_dly_tsk+0xa0>

	if ( dlytim > 0 ) {
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d02a      	beq.n	800fe7a <tk_dly_tsk+0x9e>
		BEGIN_CRITICAL_SECTION;
 800fe24:	f002 fbcb 	bl	80125be <disint>
 800fe28:	60f8      	str	r0, [r7, #12]
		knl_ctxtsk->wspec = &knl_wspec_dly;
 800fe2a:	4b17      	ldr	r3, [pc, #92]	; (800fe88 <tk_dly_tsk+0xac>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	4a17      	ldr	r2, [pc, #92]	; (800fe8c <tk_dly_tsk+0xb0>)
 800fe30:	62da      	str	r2, [r3, #44]	; 0x2c
		knl_ctxtsk->wid = 0;
 800fe32:	4b15      	ldr	r3, [pc, #84]	; (800fe88 <tk_dly_tsk+0xac>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	2200      	movs	r2, #0
 800fe38:	631a      	str	r2, [r3, #48]	; 0x30
		knl_ctxtsk->wercd = &ercd;
 800fe3a:	4b13      	ldr	r3, [pc, #76]	; (800fe88 <tk_dly_tsk+0xac>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f107 0208 	add.w	r2, r7, #8
 800fe42:	63da      	str	r2, [r3, #60]	; 0x3c
		knl_make_wait_reltim(dlytim, TA_NULL);
 800fe44:	2100      	movs	r1, #0
 800fe46:	6878      	ldr	r0, [r7, #4]
 800fe48:	f000 fbbc 	bl	80105c4 <knl_make_wait_reltim>
		QueInit(&knl_ctxtsk->tskque);
 800fe4c:	4b0e      	ldr	r3, [pc, #56]	; (800fe88 <tk_dly_tsk+0xac>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7ff ff37 	bl	800fcc4 <QueInit>
		END_CRITICAL_SECTION;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d10b      	bne.n	800fe74 <tk_dly_tsk+0x98>
 800fe5c:	4b0a      	ldr	r3, [pc, #40]	; (800fe88 <tk_dly_tsk+0xac>)
 800fe5e:	681a      	ldr	r2, [r3, #0]
 800fe60:	4b0b      	ldr	r3, [pc, #44]	; (800fe90 <tk_dly_tsk+0xb4>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d005      	beq.n	800fe74 <tk_dly_tsk+0x98>
 800fe68:	4b06      	ldr	r3, [pc, #24]	; (800fe84 <tk_dly_tsk+0xa8>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d101      	bne.n	800fe74 <tk_dly_tsk+0x98>
 800fe70:	f001 fb12 	bl	8011498 <knl_dispatch>
 800fe74:	68f8      	ldr	r0, [r7, #12]
 800fe76:	f002 fb86 	bl	8012586 <set_basepri>
	}

	return ercd;
 800fe7a:	68bb      	ldr	r3, [r7, #8]
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3710      	adds	r7, #16
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	24002404 	.word	0x24002404
 800fe88:	24002408 	.word	0x24002408
 800fe8c:	08012b14 	.word	0x08012b14
 800fe90:	2400240c 	.word	0x2400240c

0800fe94 <QueInit>:
{
 800fe94:	b480      	push	{r7}
 800fe96:	b083      	sub	sp, #12
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	605a      	str	r2, [r3, #4]
}
 800fea8:	bf00      	nop
 800feaa:	370c      	adds	r7, #12
 800feac:	46bd      	mov	sp, r7
 800feae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb2:	4770      	bx	lr

0800feb4 <QueInsert>:
{
 800feb4:	b480      	push	{r7}
 800feb6:	b083      	sub	sp, #12
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	685a      	ldr	r2, [r3, #4]
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	683a      	ldr	r2, [r7, #0]
 800feca:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	687a      	ldr	r2, [r7, #4]
 800fed2:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	687a      	ldr	r2, [r7, #4]
 800fed8:	605a      	str	r2, [r3, #4]
}
 800feda:	bf00      	nop
 800fedc:	370c      	adds	r7, #12
 800fede:	46bd      	mov	sp, r7
 800fee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee4:	4770      	bx	lr
	...

0800fee8 <knl_cyclichandler_initialize>:

/*
 * Initialization of cyclic handler control block
 */
EXPORT ER knl_cyclichandler_initialize( void )
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b082      	sub	sp, #8
 800feec:	af00      	add	r7, sp, #0
	if ( NUM_CYCID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_cyccb);
 800feee:	480d      	ldr	r0, [pc, #52]	; (800ff24 <knl_cyclichandler_initialize+0x3c>)
 800fef0:	f7ff ffd0 	bl	800fe94 <QueInit>
	end = knl_cyccb_table + NUM_CYCID;
 800fef4:	4b0c      	ldr	r3, [pc, #48]	; (800ff28 <knl_cyclichandler_initialize+0x40>)
 800fef6:	603b      	str	r3, [r7, #0]
	for ( cyccb = knl_cyccb_table; cyccb < end; cyccb++ ) {
 800fef8:	4b0c      	ldr	r3, [pc, #48]	; (800ff2c <knl_cyclichandler_initialize+0x44>)
 800fefa:	607b      	str	r3, [r7, #4]
 800fefc:	e009      	b.n	800ff12 <knl_cyclichandler_initialize+0x2a>
		cyccb->cychdr = NULL; /* Unregistered handler */
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2200      	movs	r2, #0
 800ff02:	609a      	str	r2, [r3, #8]
		QueInsert((QUEUE*)cyccb, &knl_free_cyccb);
 800ff04:	4907      	ldr	r1, [pc, #28]	; (800ff24 <knl_cyclichandler_initialize+0x3c>)
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f7ff ffd4 	bl	800feb4 <QueInsert>
	for ( cyccb = knl_cyccb_table; cyccb < end; cyccb++ ) {
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	3328      	adds	r3, #40	; 0x28
 800ff10:	607b      	str	r3, [r7, #4]
 800ff12:	687a      	ldr	r2, [r7, #4]
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	429a      	cmp	r2, r3
 800ff18:	d3f1      	bcc.n	800fefe <knl_cyclichandler_initialize+0x16>
	}

	return E_OK;
 800ff1a:	2300      	movs	r3, #0
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3708      	adds	r7, #8
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}
 800ff24:	240032c8 	.word	0x240032c8
 800ff28:	240032c8 	.word	0x240032c8
 800ff2c:	24003228 	.word	0x24003228

0800ff30 <knl_alarmhandler_initialize>:

/*
 * Initialization of alarm handler control block 
 */
EXPORT ER knl_alarmhandler_initialize( void )
{
 800ff30:	b580      	push	{r7, lr}
 800ff32:	b082      	sub	sp, #8
 800ff34:	af00      	add	r7, sp, #0
	if ( NUM_ALMID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_almcb);
 800ff36:	480d      	ldr	r0, [pc, #52]	; (800ff6c <knl_alarmhandler_initialize+0x3c>)
 800ff38:	f7ff ffac 	bl	800fe94 <QueInit>
	end = knl_almcb_table + NUM_ALMID;
 800ff3c:	4b0c      	ldr	r3, [pc, #48]	; (800ff70 <knl_alarmhandler_initialize+0x40>)
 800ff3e:	603b      	str	r3, [r7, #0]
	for ( almcb = knl_almcb_table; almcb < end; almcb++ ) {
 800ff40:	4b0c      	ldr	r3, [pc, #48]	; (800ff74 <knl_alarmhandler_initialize+0x44>)
 800ff42:	607b      	str	r3, [r7, #4]
 800ff44:	e009      	b.n	800ff5a <knl_alarmhandler_initialize+0x2a>
		almcb->almhdr = NULL; /* Unregistered handler */
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	609a      	str	r2, [r3, #8]
		QueInsert((QUEUE*)almcb, &knl_free_almcb);
 800ff4c:	4907      	ldr	r1, [pc, #28]	; (800ff6c <knl_alarmhandler_initialize+0x3c>)
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f7ff ffb0 	bl	800feb4 <QueInsert>
	for ( almcb = knl_almcb_table; almcb < end; almcb++ ) {
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	3324      	adds	r3, #36	; 0x24
 800ff58:	607b      	str	r3, [r7, #4]
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d3f1      	bcc.n	800ff46 <knl_alarmhandler_initialize+0x16>
	}

	return E_OK;
 800ff62:	2300      	movs	r3, #0
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3708      	adds	r7, #8
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}
 800ff6c:	240033f0 	.word	0x240033f0
 800ff70:	240033f0 	.word	0x240033f0
 800ff74:	240032d0 	.word	0x240032d0

0800ff78 <out_w>:
Inline void out_d( UW port, UD data )
{
	*(_UD*)port = data;
}
Inline void out_w( UW port, UW data )
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b083      	sub	sp, #12
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
	*(_UW*)port = data;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	683a      	ldr	r2, [r7, #0]
 800ff86:	601a      	str	r2, [r3, #0]
}
 800ff88:	bf00      	nop
 800ff8a:	370c      	adds	r7, #12
 800ff8c:	46bd      	mov	sp, r7
 800ff8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff92:	4770      	bx	lr

0800ff94 <in_w>:
Inline UD in_d( UW port )
{
	return *(_UD*)port;
}
Inline UW in_w( UW port )
{
 800ff94:	b480      	push	{r7}
 800ff96:	b083      	sub	sp, #12
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]
	return *(_UW*)port;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	370c      	adds	r7, #12
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffaa:	4770      	bx	lr

0800ffac <QueInit>:
{
 800ffac:	b480      	push	{r7}
 800ffae:	b083      	sub	sp, #12
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	687a      	ldr	r2, [r7, #4]
 800ffbe:	605a      	str	r2, [r3, #4]
}
 800ffc0:	bf00      	nop
 800ffc2:	370c      	adds	r7, #12
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <isQueEmpty>:
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	687a      	ldr	r2, [r7, #4]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	bf0c      	ite	eq
 800ffde:	2301      	moveq	r3, #1
 800ffe0:	2300      	movne	r3, #0
 800ffe2:	b2db      	uxtb	r3, r3
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	370c      	adds	r7, #12
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffee:	4770      	bx	lr

0800fff0 <QueInsert>:
{
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	685a      	ldr	r2, [r3, #4]
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	605a      	str	r2, [r3, #4]
	entry->next = que;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	683a      	ldr	r2, [r7, #0]
 8010006:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8010008:	683b      	ldr	r3, [r7, #0]
 801000a:	685b      	ldr	r3, [r3, #4]
 801000c:	687a      	ldr	r2, [r7, #4]
 801000e:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	687a      	ldr	r2, [r7, #4]
 8010014:	605a      	str	r2, [r3, #4]
}
 8010016:	bf00      	nop
 8010018:	370c      	adds	r7, #12
 801001a:	46bd      	mov	sp, r7
 801001c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010020:	4770      	bx	lr

08010022 <QueRemove>:
{
 8010022:	b480      	push	{r7}
 8010024:	b083      	sub	sp, #12
 8010026:	af00      	add	r7, sp, #0
 8010028:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	687a      	ldr	r2, [r7, #4]
 8010030:	429a      	cmp	r2, r3
 8010032:	d009      	beq.n	8010048 <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	687a      	ldr	r2, [r7, #4]
 801003a:	6812      	ldr	r2, [r2, #0]
 801003c:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	6852      	ldr	r2, [r2, #4]
 8010046:	605a      	str	r2, [r3, #4]
}
 8010048:	bf00      	nop
 801004a:	370c      	adds	r7, #12
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr

08010054 <knl_abstim_reached>:
{
 8010054:	b480      	push	{r7}
 8010056:	b083      	sub	sp, #12
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
	return (ABSTIM)(curtim - evttim) <= (ABSTIM)ABSTIM_DIFF_MIN;
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	1ad3      	subs	r3, r2, r3
 8010064:	43db      	mvns	r3, r3
 8010066:	0fdb      	lsrs	r3, r3, #31
 8010068:	b2db      	uxtb	r3, r3
}
 801006a:	4618      	mov	r0, r3
 801006c:	370c      	adds	r7, #12
 801006e:	46bd      	mov	sp, r7
 8010070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010074:	4770      	bx	lr
	...

08010078 <knl_start_hw_timer>:
/*
 * Timer start processing
 *	Initialize the timer and start the periodical timer interrupt.
 */
Inline void knl_start_hw_timer( void )
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b082      	sub	sp, #8
 801007c:	af00      	add	r7, sp, #0
	UINT	n, imask;

	DI(imask);
 801007e:	f002 fa9e 	bl	80125be <disint>
 8010082:	6078      	str	r0, [r7, #4]

	/* Set System timer CLK source to Core, Systick exception enable */
	out_w(SYST_CSR, 0x00000006);
 8010084:	2106      	movs	r1, #6
 8010086:	4811      	ldr	r0, [pc, #68]	; (80100cc <knl_start_hw_timer+0x54>)
 8010088:	f7ff ff76 	bl	800ff78 <out_w>

	/* Set counter: TMCLK(MHz) */
	n = (UINT)(TIMER_PERIOD * TMCLK_KHz - 1);
 801008c:	4b10      	ldr	r3, [pc, #64]	; (80100d0 <knl_start_hw_timer+0x58>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a10      	ldr	r2, [pc, #64]	; (80100d4 <knl_start_hw_timer+0x5c>)
 8010092:	fba2 2303 	umull	r2, r3, r2, r3
 8010096:	099a      	lsrs	r2, r3, #6
 8010098:	4613      	mov	r3, r2
 801009a:	009b      	lsls	r3, r3, #2
 801009c:	4413      	add	r3, r2
 801009e:	005b      	lsls	r3, r3, #1
 80100a0:	3b01      	subs	r3, #1
 80100a2:	603b      	str	r3, [r7, #0]
	out_w(SYST_RVR, n);
 80100a4:	6839      	ldr	r1, [r7, #0]
 80100a6:	480c      	ldr	r0, [pc, #48]	; (80100d8 <knl_start_hw_timer+0x60>)
 80100a8:	f7ff ff66 	bl	800ff78 <out_w>
	out_w(SYST_CVR, 0);
 80100ac:	2100      	movs	r1, #0
 80100ae:	480b      	ldr	r0, [pc, #44]	; (80100dc <knl_start_hw_timer+0x64>)
 80100b0:	f7ff ff62 	bl	800ff78 <out_w>

	/* Start timer count */
	out_w(SYST_CSR, 0x00000007);
 80100b4:	2107      	movs	r1, #7
 80100b6:	4805      	ldr	r0, [pc, #20]	; (80100cc <knl_start_hw_timer+0x54>)
 80100b8:	f7ff ff5e 	bl	800ff78 <out_w>

	EI(imask);
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f002 fa62 	bl	8012586 <set_basepri>
}
 80100c2:	bf00      	nop
 80100c4:	3708      	adds	r7, #8
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	e000e010 	.word	0xe000e010
 80100d0:	240010dc 	.word	0x240010dc
 80100d4:	10624dd3 	.word	0x10624dd3
 80100d8:	e000e014 	.word	0xe000e014
 80100dc:	e000e018 	.word	0xe000e018

080100e0 <knl_clear_hw_timer_interrupt>:
 *	'end_of_hw_timer_interrupt()' is called at the end of the timer
 *	interrupt handler.
 *	Use either or both according to hardware.
 */
Inline void knl_clear_hw_timer_interrupt( void )
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	af00      	add	r7, sp, #0
	(void)in_w(SYST_CSR);			/* Clear COUNTFLAG */
 80100e4:	4804      	ldr	r0, [pc, #16]	; (80100f8 <knl_clear_hw_timer_interrupt+0x18>)
 80100e6:	f7ff ff55 	bl	800ff94 <in_w>
	out_w(SCB_ICSR, ICSR_PENDSTCLR);
 80100ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80100ee:	4803      	ldr	r0, [pc, #12]	; (80100fc <knl_clear_hw_timer_interrupt+0x1c>)
 80100f0:	f7ff ff42 	bl	800ff78 <out_w>
}
 80100f4:	bf00      	nop
 80100f6:	bd80      	pop	{r7, pc}
 80100f8:	e000e010 	.word	0xe000e010
 80100fc:	e000ed04 	.word	0xe000ed04

08010100 <knl_end_of_hw_timer_interrupt>:

Inline void knl_end_of_hw_timer_interrupt( void )
{
 8010100:	b480      	push	{r7}
 8010102:	af00      	add	r7, sp, #0
	/* No processing */
}
 8010104:	bf00      	nop
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr
	...

08010110 <knl_terminate_hw_timer>:
 * Timer stop processing
 *	Stop the timer operation.
 *	Called when system stops.
 */
Inline void knl_terminate_hw_timer( void )
{
 8010110:	b580      	push	{r7, lr}
 8010112:	af00      	add	r7, sp, #0
	/* Timer interrupt disable */
	out_w(SYST_CSR, 0x00000000);
 8010114:	2100      	movs	r1, #0
 8010116:	4802      	ldr	r0, [pc, #8]	; (8010120 <knl_terminate_hw_timer+0x10>)
 8010118:	f7ff ff2e 	bl	800ff78 <out_w>
}
 801011c:	bf00      	nop
 801011e:	bd80      	pop	{r7, pc}
 8010120:	e000e010 	.word	0xe000e010

08010124 <knl_timer_startup>:

/*
 * Start system timer
 */
EXPORT ER knl_timer_startup( void )
{
 8010124:	b580      	push	{r7, lr}
 8010126:	af00      	add	r7, sp, #0
	knl_current_time = knl_real_time_ofs = uitoll(0);
 8010128:	490a      	ldr	r1, [pc, #40]	; (8010154 <knl_timer_startup+0x30>)
 801012a:	f04f 0200 	mov.w	r2, #0
 801012e:	f04f 0300 	mov.w	r3, #0
 8010132:	e9c1 2300 	strd	r2, r3, [r1]
 8010136:	4b07      	ldr	r3, [pc, #28]	; (8010154 <knl_timer_startup+0x30>)
 8010138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801013c:	4906      	ldr	r1, [pc, #24]	; (8010158 <knl_timer_startup+0x34>)
 801013e:	e9c1 2300 	strd	r2, r3, [r1]
	QueInit(&knl_timer_queue);
 8010142:	4806      	ldr	r0, [pc, #24]	; (801015c <knl_timer_startup+0x38>)
 8010144:	f7ff ff32 	bl	800ffac <QueInit>

	/* Start timer interrupt */
	knl_start_hw_timer();
 8010148:	f7ff ff96 	bl	8010078 <knl_start_hw_timer>

	return E_OK;
 801014c:	2300      	movs	r3, #0
}
 801014e:	4618      	mov	r0, r3
 8010150:	bd80      	pop	{r7, pc}
 8010152:	bf00      	nop
 8010154:	24003400 	.word	0x24003400
 8010158:	240033f8 	.word	0x240033f8
 801015c:	24003408 	.word	0x24003408

08010160 <knl_timer_shutdown>:
#if USE_SHUTDOWN
/*
 * Stop system timer
 */
EXPORT void knl_timer_shutdown( void )
{
 8010160:	b580      	push	{r7, lr}
 8010162:	af00      	add	r7, sp, #0
	knl_terminate_hw_timer();
 8010164:	f7ff ffd4 	bl	8010110 <knl_terminate_hw_timer>
}
 8010168:	bf00      	nop
 801016a:	bd80      	pop	{r7, pc}

0801016c <knl_enqueue_tmeb>:

/*
 * Insert timer event to timer event queue
 */
LOCAL void knl_enqueue_tmeb( TMEB *event )
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b084      	sub	sp, #16
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
	QUEUE	*q;
	ABSTIM	ofs = lltoul(knl_current_time) - ABSTIM_DIFF_MIN;
 8010174:	4b12      	ldr	r3, [pc, #72]	; (80101c0 <knl_enqueue_tmeb+0x54>)
 8010176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017a:	4b12      	ldr	r3, [pc, #72]	; (80101c4 <knl_enqueue_tmeb+0x58>)
 801017c:	4413      	add	r3, r2
 801017e:	60bb      	str	r3, [r7, #8]

	for ( q = knl_timer_queue.next; q != &knl_timer_queue; q = q->next ) {
 8010180:	4b11      	ldr	r3, [pc, #68]	; (80101c8 <knl_enqueue_tmeb+0x5c>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	60fb      	str	r3, [r7, #12]
 8010186:	e00c      	b.n	80101a2 <knl_enqueue_tmeb+0x36>
		if ( (ABSTIM)(event->time - ofs) < (ABSTIM)((((TMEB*)q)->time) - ofs) ) {
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	689a      	ldr	r2, [r3, #8]
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	1ad2      	subs	r2, r2, r3
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	6899      	ldr	r1, [r3, #8]
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	1acb      	subs	r3, r1, r3
 8010198:	429a      	cmp	r2, r3
 801019a:	d307      	bcc.n	80101ac <knl_enqueue_tmeb+0x40>
	for ( q = knl_timer_queue.next; q != &knl_timer_queue; q = q->next ) {
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	60fb      	str	r3, [r7, #12]
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	4a08      	ldr	r2, [pc, #32]	; (80101c8 <knl_enqueue_tmeb+0x5c>)
 80101a6:	4293      	cmp	r3, r2
 80101a8:	d1ee      	bne.n	8010188 <knl_enqueue_tmeb+0x1c>
 80101aa:	e000      	b.n	80101ae <knl_enqueue_tmeb+0x42>
			break;
 80101ac:	bf00      	nop
		}
	}
	QueInsert(&event->queue, q);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	68f9      	ldr	r1, [r7, #12]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7ff ff1c 	bl	800fff0 <QueInsert>
}
 80101b8:	bf00      	nop
 80101ba:	3710      	adds	r7, #16
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	240033f8 	.word	0x240033f8
 80101c4:	80000001 	.word	0x80000001
 80101c8:	24003408 	.word	0x24003408

080101cc <knl_timer_insert>:
 *	typedef	W		TMO;
 *	typedef UW		RELTIM;
 *	#define TMO_FEVR	(-1)
 */
EXPORT void knl_timer_insert( TMEB *event, TMO tmout, CBACK callback, void *arg )
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b084      	sub	sp, #16
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	60f8      	str	r0, [r7, #12]
 80101d4:	60b9      	str	r1, [r7, #8]
 80101d6:	607a      	str	r2, [r7, #4]
 80101d8:	603b      	str	r3, [r7, #0]
	event->callback = callback;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	687a      	ldr	r2, [r7, #4]
 80101de:	60da      	str	r2, [r3, #12]
	event->arg = arg;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	683a      	ldr	r2, [r7, #0]
 80101e4:	611a      	str	r2, [r3, #16]

	if ( tmout == TMO_FEVR ) {
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101ec:	d104      	bne.n	80101f8 <knl_timer_insert+0x2c>
		QueInit(&event->queue);
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7ff fedb 	bl	800ffac <QueInit>
		/* To guarantee longer wait time specified by 'tmout',
		   add TIMER_PERIOD on wait time */
		event->time = lltoul(knl_current_time) + tmout + TIMER_PERIOD;
		knl_enqueue_tmeb(event);
	}
}
 80101f6:	e00b      	b.n	8010210 <knl_timer_insert+0x44>
		event->time = lltoul(knl_current_time) + tmout + TIMER_PERIOD;
 80101f8:	4b07      	ldr	r3, [pc, #28]	; (8010218 <knl_timer_insert+0x4c>)
 80101fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	4413      	add	r3, r2
 8010202:	f103 020a 	add.w	r2, r3, #10
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	609a      	str	r2, [r3, #8]
		knl_enqueue_tmeb(event);
 801020a:	68f8      	ldr	r0, [r7, #12]
 801020c:	f7ff ffae 	bl	801016c <knl_enqueue_tmeb>
}
 8010210:	bf00      	nop
 8010212:	3710      	adds	r7, #16
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}
 8010218:	240033f8 	.word	0x240033f8

0801021c <knl_timer_insert_reltim>:

EXPORT void knl_timer_insert_reltim( TMEB *event, RELTIM tmout, CBACK callback, void *arg )
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b084      	sub	sp, #16
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	607a      	str	r2, [r7, #4]
 8010228:	603b      	str	r3, [r7, #0]
	event->callback = callback;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	60da      	str	r2, [r3, #12]
	event->arg = arg;
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	683a      	ldr	r2, [r7, #0]
 8010234:	611a      	str	r2, [r3, #16]

	/* To guarantee longer wait time specified by 'tmout',
	   add TIMER_PERIOD on wait time */
	event->time = lltoul(knl_current_time) + tmout + TIMER_PERIOD;
 8010236:	4b08      	ldr	r3, [pc, #32]	; (8010258 <knl_timer_insert_reltim+0x3c>)
 8010238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	4413      	add	r3, r2
 8010240:	f103 020a 	add.w	r2, r3, #10
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	609a      	str	r2, [r3, #8]
	knl_enqueue_tmeb(event);
 8010248:	68f8      	ldr	r0, [r7, #12]
 801024a:	f7ff ff8f 	bl	801016c <knl_enqueue_tmeb>
}
 801024e:	bf00      	nop
 8010250:	3710      	adds	r7, #16
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}
 8010256:	bf00      	nop
 8010258:	240033f8 	.word	0x240033f8

0801025c <knl_timer_handler>:
 *	interval by hardware timer. Update the software clock and start the 
 *	timer event upon arriving at start time.
 */

EXPORT void knl_timer_handler( void )
{
 801025c:	b5b0      	push	{r4, r5, r7, lr}
 801025e:	b084      	sub	sp, #16
 8010260:	af00      	add	r7, sp, #0
	TMEB	*event;
	ABSTIM	cur;

	knl_clear_hw_timer_interrupt();		/* Clear timer interrupt */
 8010262:	f7ff ff3d 	bl	80100e0 <knl_clear_hw_timer_interrupt>

	BEGIN_CRITICAL_SECTION;
 8010266:	f002 f9aa 	bl	80125be <disint>
 801026a:	60f8      	str	r0, [r7, #12]
	knl_current_time = ll_add(knl_current_time, uitoll(TIMER_PERIOD));
 801026c:	4b24      	ldr	r3, [pc, #144]	; (8010300 <knl_timer_handler+0xa4>)
 801026e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010272:	f112 040a 	adds.w	r4, r2, #10
 8010276:	f143 0500 	adc.w	r5, r3, #0
 801027a:	4b21      	ldr	r3, [pc, #132]	; (8010300 <knl_timer_handler+0xa4>)
 801027c:	e9c3 4500 	strd	r4, r5, [r3]
	cur = lltoul(knl_current_time);
 8010280:	4b1f      	ldr	r3, [pc, #124]	; (8010300 <knl_timer_handler+0xa4>)
 8010282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010286:	4613      	mov	r3, r2
 8010288:	60bb      	str	r3, [r7, #8]
		}
	}
#endif

	/* Execute event that passed occurring time. */
	while ( !isQueEmpty(&knl_timer_queue) ) {
 801028a:	e019      	b.n	80102c0 <knl_timer_handler+0x64>
		event = (TMEB*)knl_timer_queue.next;
 801028c:	4b1d      	ldr	r3, [pc, #116]	; (8010304 <knl_timer_handler+0xa8>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	607b      	str	r3, [r7, #4]

		if ( !knl_abstim_reached(cur, event->time) ) {
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	689b      	ldr	r3, [r3, #8]
 8010296:	4619      	mov	r1, r3
 8010298:	68b8      	ldr	r0, [r7, #8]
 801029a:	f7ff fedb 	bl	8010054 <knl_abstim_reached>
 801029e:	4603      	mov	r3, r0
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d014      	beq.n	80102ce <knl_timer_handler+0x72>
			break;
		}

		QueRemove(&event->queue);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7ff febb 	bl	8010022 <QueRemove>
		if ( event->callback != NULL ) {
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	68db      	ldr	r3, [r3, #12]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d005      	beq.n	80102c0 <knl_timer_handler+0x64>
			(*event->callback)(event->arg);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	687a      	ldr	r2, [r7, #4]
 80102ba:	6912      	ldr	r2, [r2, #16]
 80102bc:	4610      	mov	r0, r2
 80102be:	4798      	blx	r3
	while ( !isQueEmpty(&knl_timer_queue) ) {
 80102c0:	4810      	ldr	r0, [pc, #64]	; (8010304 <knl_timer_handler+0xa8>)
 80102c2:	f7ff fe83 	bl	800ffcc <isQueEmpty>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d0df      	beq.n	801028c <knl_timer_handler+0x30>
 80102cc:	e000      	b.n	80102d0 <knl_timer_handler+0x74>
			break;
 80102ce:	bf00      	nop
		}
	}

	END_CRITICAL_SECTION;
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d10b      	bne.n	80102ee <knl_timer_handler+0x92>
 80102d6:	4b0c      	ldr	r3, [pc, #48]	; (8010308 <knl_timer_handler+0xac>)
 80102d8:	681a      	ldr	r2, [r3, #0]
 80102da:	4b0c      	ldr	r3, [pc, #48]	; (801030c <knl_timer_handler+0xb0>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d005      	beq.n	80102ee <knl_timer_handler+0x92>
 80102e2:	4b0b      	ldr	r3, [pc, #44]	; (8010310 <knl_timer_handler+0xb4>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d101      	bne.n	80102ee <knl_timer_handler+0x92>
 80102ea:	f001 f8d5 	bl	8011498 <knl_dispatch>
 80102ee:	68f8      	ldr	r0, [r7, #12]
 80102f0:	f002 f949 	bl	8012586 <set_basepri>

	knl_end_of_hw_timer_interrupt();		/* Clear timer interrupt */
 80102f4:	f7ff ff04 	bl	8010100 <knl_end_of_hw_timer_interrupt>
}
 80102f8:	bf00      	nop
 80102fa:	3710      	adds	r7, #16
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bdb0      	pop	{r4, r5, r7, pc}
 8010300:	240033f8 	.word	0x240033f8
 8010304:	24003408 	.word	0x24003408
 8010308:	24002408 	.word	0x24002408
 801030c:	2400240c 	.word	0x2400240c
 8010310:	24002404 	.word	0x24002404

08010314 <knl_init_object>:

/*
 * Each kernel-object initialization
 */
EXPORT ER knl_init_object( void)
{	
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
	ER	ercd;

	ercd = knl_task_initialize();
 801031a:	f7ff f9ab 	bl	800f674 <knl_task_initialize>
 801031e:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	2b00      	cmp	r3, #0
 8010324:	da01      	bge.n	801032a <knl_init_object+0x16>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	e048      	b.n	80103bc <knl_init_object+0xa8>

#if USE_SEMAPHORE
	ercd = knl_semaphore_initialize();
 801032a:	f7fe fdab 	bl	800ee84 <knl_semaphore_initialize>
 801032e:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	da01      	bge.n	801033a <knl_init_object+0x26>
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	e040      	b.n	80103bc <knl_init_object+0xa8>
#endif
#if USE_EVENTFLAG
	ercd = knl_eventflag_initialize();
 801033a:	f7fd fe5b 	bl	800dff4 <knl_eventflag_initialize>
 801033e:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2b00      	cmp	r3, #0
 8010344:	da01      	bge.n	801034a <knl_init_object+0x36>
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	e038      	b.n	80103bc <knl_init_object+0xa8>
#endif
#if USE_MAILBOX
	ercd = knl_mailbox_initialize();
 801034a:	f7fe f905 	bl	800e558 <knl_mailbox_initialize>
 801034e:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2b00      	cmp	r3, #0
 8010354:	da01      	bge.n	801035a <knl_init_object+0x46>
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	e030      	b.n	80103bc <knl_init_object+0xa8>
#endif
#if USE_MESSAGEBUFFER
	ercd = knl_messagebuffer_initialize();
 801035a:	f7fe fc71 	bl	800ec40 <knl_messagebuffer_initialize>
 801035e:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2b00      	cmp	r3, #0
 8010364:	da01      	bge.n	801036a <knl_init_object+0x56>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	e028      	b.n	80103bc <knl_init_object+0xa8>
#if USE_LEGACY_API && USE_RENDEZVOUS
	ercd = knl_rendezvous_initialize();
	if(ercd < E_OK) return ercd;
#endif
#if USE_MUTEX
	ercd = knl_mutex_initialize();
 801036a:	f7fe fccb 	bl	800ed04 <knl_mutex_initialize>
 801036e:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2b00      	cmp	r3, #0
 8010374:	da01      	bge.n	801037a <knl_init_object+0x66>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	e020      	b.n	80103bc <knl_init_object+0xa8>
#endif
#if USE_MEMORYPOOL
	ercd = knl_memorypool_initialize();
 801037a:	f7fe fc11 	bl	800eba0 <knl_memorypool_initialize>
 801037e:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2b00      	cmp	r3, #0
 8010384:	da01      	bge.n	801038a <knl_init_object+0x76>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	e018      	b.n	80103bc <knl_init_object+0xa8>
#endif
#if USE_FIX_MEMORYPOOL
	ercd = knl_fix_memorypool_initialize();
 801038a:	f7fe fbb5 	bl	800eaf8 <knl_fix_memorypool_initialize>
 801038e:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	da01      	bge.n	801039a <knl_init_object+0x86>
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	e010      	b.n	80103bc <knl_init_object+0xa8>
#endif
#if USE_CYCLICHANDLER
	ercd = knl_cyclichandler_initialize();
 801039a:	f7ff fda5 	bl	800fee8 <knl_cyclichandler_initialize>
 801039e:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	da01      	bge.n	80103aa <knl_init_object+0x96>
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	e008      	b.n	80103bc <knl_init_object+0xa8>
#endif
#if USE_ALARMHANDLER
	ercd = knl_alarmhandler_initialize();
 80103aa:	f7ff fdc1 	bl	800ff30 <knl_alarmhandler_initialize>
 80103ae:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	da01      	bge.n	80103ba <knl_init_object+0xa6>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	e000      	b.n	80103bc <knl_init_object+0xa8>
#endif

	return E_OK;
 80103ba:	2300      	movs	r3, #0
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3708      	adds	r7, #8
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <isQueEmpty>:
{
 80103c4:	b480      	push	{r7}
 80103c6:	b083      	sub	sp, #12
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	429a      	cmp	r2, r3
 80103d4:	bf0c      	ite	eq
 80103d6:	2301      	moveq	r3, #1
 80103d8:	2300      	movne	r3, #0
 80103da:	b2db      	uxtb	r3, r3
}
 80103dc:	4618      	mov	r0, r3
 80103de:	370c      	adds	r7, #12
 80103e0:	46bd      	mov	sp, r7
 80103e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e6:	4770      	bx	lr

080103e8 <QueInsert>:
{
 80103e8:	b480      	push	{r7}
 80103ea:	b083      	sub	sp, #12
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	685a      	ldr	r2, [r3, #4]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	605a      	str	r2, [r3, #4]
	entry->next = que;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	683a      	ldr	r2, [r7, #0]
 80103fe:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	685b      	ldr	r3, [r3, #4]
 8010404:	687a      	ldr	r2, [r7, #4]
 8010406:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	687a      	ldr	r2, [r7, #4]
 801040c:	605a      	str	r2, [r3, #4]
}
 801040e:	bf00      	nop
 8010410:	370c      	adds	r7, #12
 8010412:	46bd      	mov	sp, r7
 8010414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010418:	4770      	bx	lr

0801041a <QueRemove>:
{
 801041a:	b480      	push	{r7}
 801041c:	b083      	sub	sp, #12
 801041e:	af00      	add	r7, sp, #0
 8010420:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	687a      	ldr	r2, [r7, #4]
 8010428:	429a      	cmp	r2, r3
 801042a:	d009      	beq.n	8010440 <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	687a      	ldr	r2, [r7, #4]
 8010432:	6812      	ldr	r2, [r2, #0]
 8010434:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	6852      	ldr	r2, [r2, #4]
 801043e:	605a      	str	r2, [r3, #4]
}
 8010440:	bf00      	nop
 8010442:	370c      	adds	r7, #12
 8010444:	46bd      	mov	sp, r7
 8010446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044a:	4770      	bx	lr

0801044c <knl_timer_delete>:
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
	QueRemove(&event->queue);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	4618      	mov	r0, r3
 8010458:	f7ff ffdf 	bl	801041a <QueRemove>
}
 801045c:	bf00      	nop
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <knl_queue_insert_tpri>:

/*
 * Connect the task to the prioritized wait queue.
 */
Inline void knl_queue_insert_tpri( TCB *tcb, QUEUE *queue )
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b088      	sub	sp, #32
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
 801046c:	6039      	str	r1, [r7, #0]
	QUEUE *q;
	QUEUE *start, *end;
	UB val;
	W offset;

	start = end = queue;
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	61bb      	str	r3, [r7, #24]
 8010472:	69bb      	ldr	r3, [r7, #24]
 8010474:	617b      	str	r3, [r7, #20]
	val = tcb->priority;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801047c:	74fb      	strb	r3, [r7, #19]
	offset = offsetof(TCB, priority);
 801047e:	2326      	movs	r3, #38	; 0x26
 8010480:	60fb      	str	r3, [r7, #12]

	for ( q = start->next; q != end; q = q->next ) {
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	61fb      	str	r3, [r7, #28]
 8010488:	e009      	b.n	801049e <knl_queue_insert_tpri+0x3a>
		if ( *(UB*)((VB*)q + offset) > val ) {
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	69fa      	ldr	r2, [r7, #28]
 801048e:	4413      	add	r3, r2
 8010490:	781b      	ldrb	r3, [r3, #0]
 8010492:	7cfa      	ldrb	r2, [r7, #19]
 8010494:	429a      	cmp	r2, r3
 8010496:	d307      	bcc.n	80104a8 <knl_queue_insert_tpri+0x44>
	for ( q = start->next; q != end; q = q->next ) {
 8010498:	69fb      	ldr	r3, [r7, #28]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	61fb      	str	r3, [r7, #28]
 801049e:	69fa      	ldr	r2, [r7, #28]
 80104a0:	69bb      	ldr	r3, [r7, #24]
 80104a2:	429a      	cmp	r2, r3
 80104a4:	d1f1      	bne.n	801048a <knl_queue_insert_tpri+0x26>
 80104a6:	e000      	b.n	80104aa <knl_queue_insert_tpri+0x46>
			break;
 80104a8:	bf00      	nop
		}
	}

	QueInsert(&tcb->tskque, q);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	69f9      	ldr	r1, [r7, #28]
 80104ae:	4618      	mov	r0, r3
 80104b0:	f7ff ff9a 	bl	80103e8 <QueInsert>
}
 80104b4:	bf00      	nop
 80104b6:	3720      	adds	r7, #32
 80104b8:	46bd      	mov	sp, r7
 80104ba:	bd80      	pop	{r7, pc}

080104bc <knl_make_non_wait>:
 * Update the task state to release wait. When it becomes ready state,
 * connect to the ready queue.
 * Call when the task is in the wait state (including double wait).
 */
Inline void knl_make_non_wait( TCB *tcb )
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b082      	sub	sp, #8
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
	if ( tcb->state == TS_WAIT ) {
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80104ca:	2b02      	cmp	r3, #2
 80104cc:	d103      	bne.n	80104d6 <knl_make_non_wait+0x1a>
		knl_make_ready(tcb);
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f7ff f94e 	bl	800f770 <knl_make_ready>
	} else {
		tcb->state = TS_SUSPEND;
	}
}
 80104d4:	e003      	b.n	80104de <knl_make_non_wait+0x22>
		tcb->state = TS_SUSPEND;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2204      	movs	r2, #4
 80104da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80104de:	bf00      	nop
 80104e0:	3708      	adds	r7, #8
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}

080104e6 <knl_wait_release>:

/*
 * Release wait state of the task.
 */
Inline void knl_wait_release( TCB *tcb )
{
 80104e6:	b580      	push	{r7, lr}
 80104e8:	b082      	sub	sp, #8
 80104ea:	af00      	add	r7, sp, #0
 80104ec:	6078      	str	r0, [r7, #4]
	knl_timer_delete(&tcb->wtmeb);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	334c      	adds	r3, #76	; 0x4c
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7ff ffaa 	bl	801044c <knl_timer_delete>
	QueRemove(&tcb->tskque);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7ff ff8d 	bl	801041a <QueRemove>
	knl_make_non_wait(tcb);
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f7ff ffdb 	bl	80104bc <knl_make_non_wait>
}
 8010506:	bf00      	nop
 8010508:	3708      	adds	r7, #8
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}

0801050e <knl_wait_release_ok>:

#include "kernel.h"
#include "wait.h"

EXPORT void knl_wait_release_ok( TCB *tcb )
{
 801050e:	b580      	push	{r7, lr}
 8010510:	b082      	sub	sp, #8
 8010512:	af00      	add	r7, sp, #0
 8010514:	6078      	str	r0, [r7, #4]
	knl_wait_release(tcb);
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f7ff ffe5 	bl	80104e6 <knl_wait_release>
	*tcb->wercd = E_OK;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010520:	2200      	movs	r2, #0
 8010522:	601a      	str	r2, [r3, #0]
}
 8010524:	bf00      	nop
 8010526:	3708      	adds	r7, #8
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}

0801052c <knl_wait_release_tmout>:
	}
	*tcb->wercd = ercd;
}

EXPORT void knl_wait_release_tmout( TCB *tcb )
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
	QueRemove(&tcb->tskque);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	4618      	mov	r0, r3
 8010538:	f7ff ff6f 	bl	801041a <QueRemove>
	knl_make_non_wait(tcb);
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f7ff ffbd 	bl	80104bc <knl_make_non_wait>
	if ( tcb->wspec->rel_wai_hook != NULL ) {
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010546:	689b      	ldr	r3, [r3, #8]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d004      	beq.n	8010556 <knl_wait_release_tmout+0x2a>
		(*tcb->wspec->rel_wai_hook)(tcb);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010550:	689b      	ldr	r3, [r3, #8]
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	4798      	blx	r3
	}
}
 8010556:	bf00      	nop
 8010558:	3708      	adds	r7, #8
 801055a:	46bd      	mov	sp, r7
 801055c:	bd80      	pop	{r7, pc}
	...

08010560 <knl_make_wait>:
 *	typedef	W		TMO;
 *	typedef UW		RELTIM;
 *	#define TMO_FEVR	(-1)
 */
EXPORT void knl_make_wait( TMO tmout, ATR atr )
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b082      	sub	sp, #8
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
 8010568:	6039      	str	r1, [r7, #0]
	switch ( knl_ctxtsk->state ) {
 801056a:	4b14      	ldr	r3, [pc, #80]	; (80105bc <knl_make_wait+0x5c>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8010572:	2b01      	cmp	r3, #1
 8010574:	d002      	beq.n	801057c <knl_make_wait+0x1c>
 8010576:	2b04      	cmp	r3, #4
 8010578:	d00b      	beq.n	8010592 <knl_make_wait+0x32>
 801057a:	e010      	b.n	801059e <knl_make_wait+0x3e>
	  case TS_READY:
		knl_make_non_ready(knl_ctxtsk);
 801057c:	4b0f      	ldr	r3, [pc, #60]	; (80105bc <knl_make_wait+0x5c>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	4618      	mov	r0, r3
 8010582:	f7ff f90f 	bl	800f7a4 <knl_make_non_ready>
		knl_ctxtsk->state = TS_WAIT;
 8010586:	4b0d      	ldr	r3, [pc, #52]	; (80105bc <knl_make_wait+0x5c>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	2202      	movs	r2, #2
 801058c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		break;
 8010590:	e005      	b.n	801059e <knl_make_wait+0x3e>
	  case TS_SUSPEND:
		knl_ctxtsk->state = TS_WAITSUS;
 8010592:	4b0a      	ldr	r3, [pc, #40]	; (80105bc <knl_make_wait+0x5c>)
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	2206      	movs	r2, #6
 8010598:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		break;
 801059c:	bf00      	nop
	}
	knl_timer_insert(&knl_ctxtsk->wtmeb, tmout, (CBACK)knl_wait_release_tmout, knl_ctxtsk);
 801059e:	4b07      	ldr	r3, [pc, #28]	; (80105bc <knl_make_wait+0x5c>)
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 80105a6:	4b05      	ldr	r3, [pc, #20]	; (80105bc <knl_make_wait+0x5c>)
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	4a05      	ldr	r2, [pc, #20]	; (80105c0 <knl_make_wait+0x60>)
 80105ac:	6879      	ldr	r1, [r7, #4]
 80105ae:	f7ff fe0d 	bl	80101cc <knl_timer_insert>
}
 80105b2:	bf00      	nop
 80105b4:	3708      	adds	r7, #8
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	24002408 	.word	0x24002408
 80105c0:	0801052d 	.word	0x0801052d

080105c4 <knl_make_wait_reltim>:

EXPORT void knl_make_wait_reltim( RELTIM tmout, ATR atr )
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b082      	sub	sp, #8
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
 80105cc:	6039      	str	r1, [r7, #0]
	switch ( knl_ctxtsk->state ) {
 80105ce:	4b14      	ldr	r3, [pc, #80]	; (8010620 <knl_make_wait_reltim+0x5c>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	d002      	beq.n	80105e0 <knl_make_wait_reltim+0x1c>
 80105da:	2b04      	cmp	r3, #4
 80105dc:	d00b      	beq.n	80105f6 <knl_make_wait_reltim+0x32>
 80105de:	e010      	b.n	8010602 <knl_make_wait_reltim+0x3e>
	  case TS_READY:
		knl_make_non_ready(knl_ctxtsk);
 80105e0:	4b0f      	ldr	r3, [pc, #60]	; (8010620 <knl_make_wait_reltim+0x5c>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7ff f8dd 	bl	800f7a4 <knl_make_non_ready>
		knl_ctxtsk->state = TS_WAIT;
 80105ea:	4b0d      	ldr	r3, [pc, #52]	; (8010620 <knl_make_wait_reltim+0x5c>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	2202      	movs	r2, #2
 80105f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		break;
 80105f4:	e005      	b.n	8010602 <knl_make_wait_reltim+0x3e>
	  case TS_SUSPEND:
		knl_ctxtsk->state = TS_WAITSUS;
 80105f6:	4b0a      	ldr	r3, [pc, #40]	; (8010620 <knl_make_wait_reltim+0x5c>)
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	2206      	movs	r2, #6
 80105fc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		break;
 8010600:	bf00      	nop
	}
	knl_timer_insert_reltim(&knl_ctxtsk->wtmeb, tmout, (CBACK)knl_wait_release_tmout, knl_ctxtsk);
 8010602:	4b07      	ldr	r3, [pc, #28]	; (8010620 <knl_make_wait_reltim+0x5c>)
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 801060a:	4b05      	ldr	r3, [pc, #20]	; (8010620 <knl_make_wait_reltim+0x5c>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	4a05      	ldr	r2, [pc, #20]	; (8010624 <knl_make_wait_reltim+0x60>)
 8010610:	6879      	ldr	r1, [r7, #4]
 8010612:	f7ff fe03 	bl	801021c <knl_timer_insert_reltim>
}
 8010616:	bf00      	nop
 8010618:	3708      	adds	r7, #8
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop
 8010620:	24002408 	.word	0x24002408
 8010624:	0801052d 	.word	0x0801052d

08010628 <knl_wait_delete>:
/*
 * Release all tasks connected to the wait queue, and define it
 * as E_DLT error.
 */
EXPORT void knl_wait_delete( QUEUE *wait_queue )
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b084      	sub	sp, #16
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
	TCB	*tcb;

	while ( !isQueEmpty(wait_queue) ) {
 8010630:	e00a      	b.n	8010648 <knl_wait_delete+0x20>
		tcb = (TCB*)wait_queue->next;
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	60fb      	str	r3, [r7, #12]
		knl_wait_release(tcb);
 8010638:	68f8      	ldr	r0, [r7, #12]
 801063a:	f7ff ff54 	bl	80104e6 <knl_wait_release>
		*tcb->wercd = E_DLT;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010642:	f06f 0232 	mvn.w	r2, #50	; 0x32
 8010646:	601a      	str	r2, [r3, #0]
	while ( !isQueEmpty(wait_queue) ) {
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f7ff febb 	bl	80103c4 <isQueEmpty>
 801064e:	4603      	mov	r3, r0
 8010650:	2b00      	cmp	r3, #0
 8010652:	d0ee      	beq.n	8010632 <knl_wait_delete+0xa>
	}
}
 8010654:	bf00      	nop
 8010656:	bf00      	nop
 8010658:	3710      	adds	r7, #16
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
	...

08010660 <knl_gcb_make_wait>:
/*
 * Change the active task state to wait state and connect to the timer wait 
 * queue and the object wait queue. Also set 'wid' in 'knl_ctxtsk'.
 */
EXPORT void knl_gcb_make_wait( GCB *gcb, TMO tmout )
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b082      	sub	sp, #8
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
 8010668:	6039      	str	r1, [r7, #0]
	*knl_ctxtsk->wercd = E_TMOUT;
 801066a:	4b17      	ldr	r3, [pc, #92]	; (80106c8 <knl_gcb_make_wait+0x68>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010670:	f06f 0231 	mvn.w	r2, #49	; 0x31
 8010674:	601a      	str	r2, [r3, #0]
	if ( tmout != TMO_POL ) {
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d020      	beq.n	80106be <knl_gcb_make_wait+0x5e>
		knl_ctxtsk->wid = gcb->objid;
 801067c:	4b12      	ldr	r3, [pc, #72]	; (80106c8 <knl_gcb_make_wait+0x68>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	687a      	ldr	r2, [r7, #4]
 8010682:	6892      	ldr	r2, [r2, #8]
 8010684:	631a      	str	r2, [r3, #48]	; 0x30
		knl_make_wait(tmout, gcb->objatr);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	691b      	ldr	r3, [r3, #16]
 801068a:	4619      	mov	r1, r3
 801068c:	6838      	ldr	r0, [r7, #0]
 801068e:	f7ff ff67 	bl	8010560 <knl_make_wait>
		if ( (gcb->objatr & TA_TPRI) != 0 ) {
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	691b      	ldr	r3, [r3, #16]
 8010696:	f003 0301 	and.w	r3, r3, #1
 801069a:	2b00      	cmp	r3, #0
 801069c:	d007      	beq.n	80106ae <knl_gcb_make_wait+0x4e>
			knl_queue_insert_tpri(knl_ctxtsk, &gcb->wait_queue);
 801069e:	4b0a      	ldr	r3, [pc, #40]	; (80106c8 <knl_gcb_make_wait+0x68>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	687a      	ldr	r2, [r7, #4]
 80106a4:	4611      	mov	r1, r2
 80106a6:	4618      	mov	r0, r3
 80106a8:	f7ff fedc 	bl	8010464 <knl_queue_insert_tpri>
		} else {
			QueInsert(&knl_ctxtsk->tskque, &gcb->wait_queue);
		}
	}
}
 80106ac:	e007      	b.n	80106be <knl_gcb_make_wait+0x5e>
			QueInsert(&knl_ctxtsk->tskque, &gcb->wait_queue);
 80106ae:	4b06      	ldr	r3, [pc, #24]	; (80106c8 <knl_gcb_make_wait+0x68>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	461a      	mov	r2, r3
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4619      	mov	r1, r3
 80106b8:	4610      	mov	r0, r2
 80106ba:	f7ff fe95 	bl	80103e8 <QueInsert>
}
 80106be:	bf00      	nop
 80106c0:	3708      	adds	r7, #8
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bd80      	pop	{r7, pc}
 80106c6:	bf00      	nop
 80106c8:	24002408 	.word	0x24002408

080106cc <knl_gcb_change_priority>:
 * When the task priority changes, adjust the task position at the wait queue.
 * It is called only if the object attribute TA_TPRI is specified.
 *
 */
EXPORT void knl_gcb_change_priority( GCB *gcb, TCB *tcb )
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
 80106d4:	6039      	str	r1, [r7, #0]
	QueRemove(&tcb->tskque);
 80106d6:	683b      	ldr	r3, [r7, #0]
 80106d8:	4618      	mov	r0, r3
 80106da:	f7ff fe9e 	bl	801041a <QueRemove>
	knl_queue_insert_tpri(tcb, &gcb->wait_queue);
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4619      	mov	r1, r3
 80106e2:	6838      	ldr	r0, [r7, #0]
 80106e4:	f7ff febe 	bl	8010464 <knl_queue_insert_tpri>
}
 80106e8:	bf00      	nop
 80106ea:	3708      	adds	r7, #8
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}

080106f0 <knl_gcb_top_of_wait_queue>:
 * Search the first task of wait queue include "tcb" with target.
 * (Not insert "tcb" into wait queue.)
 *
 */
EXPORT TCB* knl_gcb_top_of_wait_queue( GCB *gcb, TCB *tcb )
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	6039      	str	r1, [r7, #0]
	TCB	*q;

	if ( isQueEmpty(&gcb->wait_queue) ) {
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7ff fe61 	bl	80103c4 <isQueEmpty>
 8010702:	4603      	mov	r3, r0
 8010704:	2b00      	cmp	r3, #0
 8010706:	d001      	beq.n	801070c <knl_gcb_top_of_wait_queue+0x1c>
		return tcb;
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	e015      	b.n	8010738 <knl_gcb_top_of_wait_queue+0x48>
	}

	q = (TCB*)gcb->wait_queue.next;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	60fb      	str	r3, [r7, #12]
	if ( (gcb->objatr & TA_TPRI) == 0 ) {
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	691b      	ldr	r3, [r3, #16]
 8010716:	f003 0301 	and.w	r3, r3, #1
 801071a:	2b00      	cmp	r3, #0
 801071c:	d101      	bne.n	8010722 <knl_gcb_top_of_wait_queue+0x32>
		return q;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	e00a      	b.n	8010738 <knl_gcb_top_of_wait_queue+0x48>
	}

	return ( tcb->priority < q->priority )? tcb: q;
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801072e:	429a      	cmp	r2, r3
 8010730:	d201      	bcs.n	8010736 <knl_gcb_top_of_wait_queue+0x46>
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	e000      	b.n	8010738 <knl_gcb_top_of_wait_queue+0x48>
 8010736:	68fb      	ldr	r3, [r7, #12]
}
 8010738:	4618      	mov	r0, r3
 801073a:	3710      	adds	r7, #16
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}

08010740 <knl_memset>:
#include "kernel.h"

/*** binary operation ***/
/* memset : fill memory area */
void* knl_memset( void *s, int c, SZ n )
{
 8010740:	b4f0      	push	{r4, r5, r6, r7}
 8010742:	b084      	sub	sp, #16
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
	register unsigned char *cp, cval;
	register unsigned long *lp, lval;

	cp = (unsigned char *)s;
 801074c:	68fc      	ldr	r4, [r7, #12]
	cval = (unsigned char)c;
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	b2dd      	uxtb	r5, r3
	
	if (n < 8) {
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2b07      	cmp	r3, #7
 8010756:	dc12      	bgt.n	801077e <knl_memset+0x3e>
		while (n-- > 0) {
 8010758:	e003      	b.n	8010762 <knl_memset+0x22>
			*cp++ = cval;
 801075a:	4623      	mov	r3, r4
 801075c:	1c5c      	adds	r4, r3, #1
 801075e:	462a      	mov	r2, r5
 8010760:	701a      	strb	r2, [r3, #0]
		while (n-- > 0) {
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	1e5a      	subs	r2, r3, #1
 8010766:	607a      	str	r2, [r7, #4]
 8010768:	2b00      	cmp	r3, #0
 801076a:	dcf6      	bgt.n	801075a <knl_memset+0x1a>
		}
		return s;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	e02e      	b.n	80107ce <knl_memset+0x8e>
	}

	while ((long)cp % 4) {
		--n;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	3b01      	subs	r3, #1
 8010774:	607b      	str	r3, [r7, #4]
		*cp++ = cval;
 8010776:	4623      	mov	r3, r4
 8010778:	1c5c      	adds	r4, r3, #1
 801077a:	462a      	mov	r2, r5
 801077c:	701a      	strb	r2, [r3, #0]
	while ((long)cp % 4) {
 801077e:	4623      	mov	r3, r4
 8010780:	f003 0303 	and.w	r3, r3, #3
 8010784:	2b00      	cmp	r3, #0
 8010786:	d1f3      	bne.n	8010770 <knl_memset+0x30>
	}

	lp = (unsigned long *)cp;
 8010788:	4626      	mov	r6, r4
	lval = (unsigned long)cval |
 801078a:	462a      	mov	r2, r5
		(unsigned long)cval << 8 |
 801078c:	462b      	mov	r3, r5
 801078e:	021b      	lsls	r3, r3, #8
	lval = (unsigned long)cval |
 8010790:	431a      	orrs	r2, r3
		(unsigned long)cval << 16 |
 8010792:	462b      	mov	r3, r5
 8010794:	041b      	lsls	r3, r3, #16
		(unsigned long)cval << 8 |
 8010796:	431a      	orrs	r2, r3
		(unsigned long)cval << 24;
 8010798:	462b      	mov	r3, r5
 801079a:	061b      	lsls	r3, r3, #24
	lval = (unsigned long)cval |
 801079c:	ea42 0403 	orr.w	r4, r2, r3

	while (n >= 4) {
 80107a0:	e005      	b.n	80107ae <knl_memset+0x6e>
		*lp++ = lval;
 80107a2:	4633      	mov	r3, r6
 80107a4:	1d1e      	adds	r6, r3, #4
 80107a6:	601c      	str	r4, [r3, #0]
		n -= 4;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	3b04      	subs	r3, #4
 80107ac:	607b      	str	r3, [r7, #4]
	while (n >= 4) {
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2b03      	cmp	r3, #3
 80107b2:	dcf6      	bgt.n	80107a2 <knl_memset+0x62>
	}

	cp = (unsigned char *)lp;
 80107b4:	4634      	mov	r4, r6
	while (n) {
 80107b6:	e006      	b.n	80107c6 <knl_memset+0x86>
		*cp++ = cval;
 80107b8:	4623      	mov	r3, r4
 80107ba:	1c5c      	adds	r4, r3, #1
 80107bc:	462a      	mov	r2, r5
 80107be:	701a      	strb	r2, [r3, #0]
		--n;
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	3b01      	subs	r3, #1
 80107c4:	607b      	str	r3, [r7, #4]
	while (n) {
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d1f5      	bne.n	80107b8 <knl_memset+0x78>
	}

	return s;
 80107cc:	68fb      	ldr	r3, [r7, #12]
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3710      	adds	r7, #16
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bcf0      	pop	{r4, r5, r6, r7}
 80107d6:	4770      	bx	lr

080107d8 <knl_strlen>:
	return dst;
}

/* strlen : get text string length */
SZ knl_strlen( const char *s )
{
 80107d8:	b490      	push	{r4, r7}
 80107da:	b082      	sub	sp, #8
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
	register char *cp;

	cp = (char *)s;
 80107e0:	687c      	ldr	r4, [r7, #4]
	while (*cp) {
 80107e2:	e000      	b.n	80107e6 <knl_strlen+0xe>
		++cp;
 80107e4:	3401      	adds	r4, #1
	while (*cp) {
 80107e6:	7823      	ldrb	r3, [r4, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d1fb      	bne.n	80107e4 <knl_strlen+0xc>
	}
	return (SZ)(cp - s);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	1ae3      	subs	r3, r4, r3
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3708      	adds	r7, #8
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bc90      	pop	{r4, r7}
 80107f8:	4770      	bx	lr

080107fa <knl_strcpy>:

/* strcpy : copy text string */
char* knl_strcpy( char *dst, const char *src )
{
 80107fa:	b490      	push	{r4, r7}
 80107fc:	b082      	sub	sp, #8
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
 8010802:	6039      	str	r1, [r7, #0]
	register char *cp;

	cp = dst;
 8010804:	687c      	ldr	r4, [r7, #4]
	do {
		*cp++ = *src;
 8010806:	4623      	mov	r3, r4
 8010808:	1c5c      	adds	r4, r3, #1
 801080a:	683a      	ldr	r2, [r7, #0]
 801080c:	7812      	ldrb	r2, [r2, #0]
 801080e:	701a      	strb	r2, [r3, #0]
	} while (*src++);
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	1c5a      	adds	r2, r3, #1
 8010814:	603a      	str	r2, [r7, #0]
 8010816:	781b      	ldrb	r3, [r3, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d1f4      	bne.n	8010806 <knl_strcpy+0xc>

	return dst;
 801081c:	687b      	ldr	r3, [r7, #4]
}
 801081e:	4618      	mov	r0, r3
 8010820:	3708      	adds	r7, #8
 8010822:	46bd      	mov	sp, r7
 8010824:	bc90      	pop	{r4, r7}
 8010826:	4770      	bx	lr

08010828 <knl_strncpy>:

char* knl_strncpy( char *dst, const char *src, SZ n )
{
 8010828:	b490      	push	{r4, r7}
 801082a:	b084      	sub	sp, #16
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	60b9      	str	r1, [r7, #8]
 8010832:	607a      	str	r2, [r7, #4]
	register char *cp;

	cp = dst;
 8010834:	68fc      	ldr	r4, [r7, #12]
	do {
		if (n-- <= 0) {
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	1e5a      	subs	r2, r3, #1
 801083a:	607a      	str	r2, [r7, #4]
 801083c:	2b00      	cmp	r3, #0
 801083e:	dc01      	bgt.n	8010844 <knl_strncpy+0x1c>
			return dst;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	e015      	b.n	8010870 <knl_strncpy+0x48>
		}
		*cp++ = *src;
 8010844:	4623      	mov	r3, r4
 8010846:	1c5c      	adds	r4, r3, #1
 8010848:	68ba      	ldr	r2, [r7, #8]
 801084a:	7812      	ldrb	r2, [r2, #0]
 801084c:	701a      	strb	r2, [r3, #0]
	} while (*src++);
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	1c5a      	adds	r2, r3, #1
 8010852:	60ba      	str	r2, [r7, #8]
 8010854:	781b      	ldrb	r3, [r3, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d1ed      	bne.n	8010836 <knl_strncpy+0xe>

	while (n-- > 0) {
 801085a:	e003      	b.n	8010864 <knl_strncpy+0x3c>
		*cp++ = 0;
 801085c:	4623      	mov	r3, r4
 801085e:	1c5c      	adds	r4, r3, #1
 8010860:	2200      	movs	r2, #0
 8010862:	701a      	strb	r2, [r3, #0]
	while (n-- > 0) {
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	1e5a      	subs	r2, r3, #1
 8010868:	607a      	str	r2, [r7, #4]
 801086a:	2b00      	cmp	r3, #0
 801086c:	dcf6      	bgt.n	801085c <knl_strncpy+0x34>
	}

	return dst;
 801086e:	68fb      	ldr	r3, [r7, #12]
}
 8010870:	4618      	mov	r0, r3
 8010872:	3710      	adds	r7, #16
 8010874:	46bd      	mov	sp, r7
 8010876:	bc90      	pop	{r4, r7}
 8010878:	4770      	bx	lr

0801087a <knl_strcmp>:

/* strcmp : perform text string comparison */
int knl_strcmp( const char *s1, const char *s2 )
{
 801087a:	b490      	push	{r4, r7}
 801087c:	b082      	sub	sp, #8
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
 8010882:	6039      	str	r1, [r7, #0]
	register int result;

	while (*s1) {
 8010884:	e00d      	b.n	80108a2 <knl_strcmp+0x28>
		result = (unsigned char)*s1++ - (unsigned char)*s2++;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	1c5a      	adds	r2, r3, #1
 801088a:	607a      	str	r2, [r7, #4]
 801088c:	781b      	ldrb	r3, [r3, #0]
 801088e:	4619      	mov	r1, r3
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	1c5a      	adds	r2, r3, #1
 8010894:	603a      	str	r2, [r7, #0]
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	1acc      	subs	r4, r1, r3
		if (result) {
 801089a:	2c00      	cmp	r4, #0
 801089c:	d001      	beq.n	80108a2 <knl_strcmp+0x28>
			return result;
 801089e:	4623      	mov	r3, r4
 80108a0:	e009      	b.n	80108b6 <knl_strcmp+0x3c>
	while (*s1) {
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	781b      	ldrb	r3, [r3, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d1ed      	bne.n	8010886 <knl_strcmp+0xc>
		}
	}

	return (unsigned char)*s1 - (unsigned char)*s2;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	781b      	ldrb	r3, [r3, #0]
 80108ae:	461a      	mov	r2, r3
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	1ad3      	subs	r3, r2, r3
}
 80108b6:	4618      	mov	r0, r3
 80108b8:	3708      	adds	r7, #8
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bc90      	pop	{r4, r7}
 80108be:	4770      	bx	lr

080108c0 <Inc>:
 *	Increment/Decrement and evaluation of the associated result must
 *	be executed exclusively.
 */

Inline INT Inc( FastLock *lock )
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b084      	sub	sp, #16
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	6078      	str	r0, [r7, #4]
	UINT	imask;
	INT	c;
	DI(imask);
 80108c8:	f001 fe79 	bl	80125be <disint>
 80108cc:	60f8      	str	r0, [r7, #12]
	c = ++lock->cnt;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	1c5a      	adds	r2, r3, #1
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	601a      	str	r2, [r3, #0]
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	60bb      	str	r3, [r7, #8]
	EI(imask);
 80108de:	68f8      	ldr	r0, [r7, #12]
 80108e0:	f001 fe51 	bl	8012586 <set_basepri>
	return c;
 80108e4:	68bb      	ldr	r3, [r7, #8]
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3710      	adds	r7, #16
 80108ea:	46bd      	mov	sp, r7
 80108ec:	bd80      	pop	{r7, pc}

080108ee <Dec>:
Inline INT Dec( FastLock *lock )
{
 80108ee:	b580      	push	{r7, lr}
 80108f0:	b084      	sub	sp, #16
 80108f2:	af00      	add	r7, sp, #0
 80108f4:	6078      	str	r0, [r7, #4]
	UINT	imask;
	INT	c;
	DI(imask);
 80108f6:	f001 fe62 	bl	80125be <disint>
 80108fa:	60f8      	str	r0, [r7, #12]
	c = lock->cnt--;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	1e59      	subs	r1, r3, #1
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	6011      	str	r1, [r2, #0]
 8010906:	60bb      	str	r3, [r7, #8]
	EI(imask);
 8010908:	68f8      	ldr	r0, [r7, #12]
 801090a:	f001 fe3c 	bl	8012586 <set_basepri>
	return c;
 801090e:	68bb      	ldr	r3, [r7, #8]
}
 8010910:	4618      	mov	r0, r3
 8010912:	3710      	adds	r7, #16
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <Lock>:

/*
 * Lock 
 */
EXPORT void Lock( FastLock *lock )
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
	if ( Inc(lock) > 0 ) {
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f7ff ffcd 	bl	80108c0 <Inc>
 8010926:	4603      	mov	r3, r0
 8010928:	2b00      	cmp	r3, #0
 801092a:	dd07      	ble.n	801093c <Lock+0x24>
		tk_wai_sem(lock->id, 1, TMO_FEVR);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	685b      	ldr	r3, [r3, #4]
 8010930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010934:	2101      	movs	r1, #1
 8010936:	4618      	mov	r0, r3
 8010938:	f7fe fc6c 	bl	800f214 <tk_wai_sem>
	}
}
 801093c:	bf00      	nop
 801093e:	3708      	adds	r7, #8
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <Unlock>:

/*
 * Lock release
 */
EXPORT void Unlock( FastLock *lock )
{
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
	if ( Dec(lock) > 0 ) {
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f7ff ffce 	bl	80108ee <Dec>
 8010952:	4603      	mov	r3, r0
 8010954:	2b00      	cmp	r3, #0
 8010956:	dd05      	ble.n	8010964 <Unlock+0x20>
		tk_sig_sem(lock->id, 1);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	685b      	ldr	r3, [r3, #4]
 801095c:	2101      	movs	r1, #1
 801095e:	4618      	mov	r0, r3
 8010960:	f7fe fb80 	bl	800f064 <tk_sig_sem>
	}
}
 8010964:	bf00      	nop
 8010966:	3708      	adds	r7, #8
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}

0801096c <CreateLock>:

/*
 * Create high-speed lock 
 */
EXPORT ER CreateLock( FastLock *lock, CONST UB *name )
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b08a      	sub	sp, #40	; 0x28
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
	T_CSEM	csem;
	ER	ercd;

	csem.sematr  = TA_TPRI;
 8010976:	2301      	movs	r3, #1
 8010978:	60fb      	str	r3, [r7, #12]
	csem.isemcnt = 0;
 801097a:	2300      	movs	r3, #0
 801097c:	613b      	str	r3, [r7, #16]
	csem.maxsem  = 1;
 801097e:	2301      	movs	r3, #1
 8010980:	617b      	str	r3, [r7, #20]
	SetOBJNAME(csem.exinf, "FLOC");
 8010982:	f107 0308 	add.w	r3, r7, #8
 8010986:	627b      	str	r3, [r7, #36]	; 0x24
 8010988:	4b16      	ldr	r3, [pc, #88]	; (80109e4 <CreateLock+0x78>)
 801098a:	623b      	str	r3, [r7, #32]
 801098c:	2300      	movs	r3, #0
 801098e:	61fb      	str	r3, [r7, #28]
 8010990:	e00a      	b.n	80109a8 <CreateLock+0x3c>
 8010992:	6a3a      	ldr	r2, [r7, #32]
 8010994:	1c53      	adds	r3, r2, #1
 8010996:	623b      	str	r3, [r7, #32]
 8010998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099a:	1c59      	adds	r1, r3, #1
 801099c:	6279      	str	r1, [r7, #36]	; 0x24
 801099e:	7812      	ldrb	r2, [r2, #0]
 80109a0:	701a      	strb	r2, [r3, #0]
 80109a2:	69fb      	ldr	r3, [r7, #28]
 80109a4:	3301      	adds	r3, #1
 80109a6:	61fb      	str	r3, [r7, #28]
 80109a8:	69fb      	ldr	r3, [r7, #28]
 80109aa:	2b03      	cmp	r3, #3
 80109ac:	ddf1      	ble.n	8010992 <CreateLock+0x26>

	ercd = tk_cre_sem(&csem);
 80109ae:	f107 0308 	add.w	r3, r7, #8
 80109b2:	4618      	mov	r0, r3
 80109b4:	f7fe fa8c 	bl	800eed0 <tk_cre_sem>
 80109b8:	61b8      	str	r0, [r7, #24]
	if ( ercd < E_OK ) {
 80109ba:	69bb      	ldr	r3, [r7, #24]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	da01      	bge.n	80109c4 <CreateLock+0x58>
		return ercd;
 80109c0:	69bb      	ldr	r3, [r7, #24]
 80109c2:	e00a      	b.n	80109da <CreateLock+0x6e>
	}

	lock->id = ercd;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	69ba      	ldr	r2, [r7, #24]
 80109c8:	605a      	str	r2, [r3, #4]
	lock->cnt = -1;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109d0:	601a      	str	r2, [r3, #0]
	lock->name = name;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	683a      	ldr	r2, [r7, #0]
 80109d6:	609a      	str	r2, [r3, #8]
  
	return E_OK;
 80109d8:	2300      	movs	r3, #0
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3728      	adds	r7, #40	; 0x28
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	080129ec 	.word	0x080129ec

080109e8 <DeleteLock>:

/*
 * Delete high-speed lock
 */
EXPORT void DeleteLock( FastLock *lock )
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b082      	sub	sp, #8
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
	if ( lock->id > 0 ) {
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	685b      	ldr	r3, [r3, #4]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	dd04      	ble.n	8010a02 <DeleteLock+0x1a>
		tk_del_sem(lock->id);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	4618      	mov	r0, r3
 80109fe:	f7fe fae1 	bl	800efc4 <tk_del_sem>
	}
	lock->id = 0;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2200      	movs	r2, #0
 8010a06:	605a      	str	r2, [r3, #4]
}
 8010a08:	bf00      	nop
 8010a0a:	3708      	adds	r7, #8
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <INC>:
 *
 *	The above must be operated exclusively.
 */

Inline void INC( INT *val )
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b084      	sub	sp, #16
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
	UINT	imask;

	DI(imask);
 8010a18:	f001 fdd1 	bl	80125be <disint>
 8010a1c:	60f8      	str	r0, [r7, #12]
	(*val)++;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	1c5a      	adds	r2, r3, #1
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	601a      	str	r2, [r3, #0]
	EI(imask);
 8010a28:	68f8      	ldr	r0, [r7, #12]
 8010a2a:	f001 fdac 	bl	8012586 <set_basepri>
}
 8010a2e:	bf00      	nop
 8010a30:	3710      	adds	r7, #16
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}

08010a36 <DEC>:

Inline void DEC( INT *val )
{
 8010a36:	b580      	push	{r7, lr}
 8010a38:	b084      	sub	sp, #16
 8010a3a:	af00      	add	r7, sp, #0
 8010a3c:	6078      	str	r0, [r7, #4]
	UINT	imask;

	DI(imask);
 8010a3e:	f001 fdbe 	bl	80125be <disint>
 8010a42:	60f8      	str	r0, [r7, #12]
	(*val)--;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	1e5a      	subs	r2, r3, #1
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	601a      	str	r2, [r3, #0]
	EI(imask);
 8010a4e:	68f8      	ldr	r0, [r7, #12]
 8010a50:	f001 fd99 	bl	8012586 <set_basepri>
}
 8010a54:	bf00      	nop
 8010a56:	3710      	adds	r7, #16
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}

08010a5c <BTS>:

Inline BOOL BTS( UINT *val, INT no )
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b086      	sub	sp, #24
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	6039      	str	r1, [r7, #0]
	UINT	imask;
	UINT	b;
	UINT	bm = (UINT)(1 << no);
 8010a66:	2201      	movs	r2, #1
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a6e:	617b      	str	r3, [r7, #20]

	DI(imask);
 8010a70:	f001 fda5 	bl	80125be <disint>
 8010a74:	6138      	str	r0, [r7, #16]
	b = *val & bm;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	697a      	ldr	r2, [r7, #20]
 8010a7c:	4013      	ands	r3, r2
 8010a7e:	60fb      	str	r3, [r7, #12]
	*val |= bm;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681a      	ldr	r2, [r3, #0]
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	431a      	orrs	r2, r3
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	601a      	str	r2, [r3, #0]
	EI(imask);
 8010a8c:	6938      	ldr	r0, [r7, #16]
 8010a8e:	f001 fd7a 	bl	8012586 <set_basepri>
	return (BOOL)b;
 8010a92:	68fb      	ldr	r3, [r7, #12]
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3718      	adds	r7, #24
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <BR>:

Inline void BR( UINT *val, INT no )
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b084      	sub	sp, #16
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	6039      	str	r1, [r7, #0]
	UINT	imask;

	DI(imask);
 8010aa6:	f001 fd8a 	bl	80125be <disint>
 8010aaa:	60f8      	str	r0, [r7, #12]
	*val &= ~(UINT)(1 << no);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681a      	ldr	r2, [r3, #0]
 8010ab0:	2101      	movs	r1, #1
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ab8:	43db      	mvns	r3, r3
 8010aba:	401a      	ands	r2, r3
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	601a      	str	r2, [r3, #0]
	EI(imask);
 8010ac0:	68f8      	ldr	r0, [r7, #12]
 8010ac2:	f001 fd60 	bl	8012586 <set_basepri>
}
 8010ac6:	bf00      	nop
 8010ac8:	3710      	adds	r7, #16
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}

08010ace <MLockTmo>:
/*
 * Lock with wait time designation 
 *	no	lock number 0 - 31 
 */
EXPORT ER MLockTmo( FastMLock *lock, INT no, TMO tmo )
{
 8010ace:	b580      	push	{r7, lr}
 8010ad0:	b08a      	sub	sp, #40	; 0x28
 8010ad2:	af02      	add	r7, sp, #8
 8010ad4:	60f8      	str	r0, [r7, #12]
 8010ad6:	60b9      	str	r1, [r7, #8]
 8010ad8:	607a      	str	r2, [r7, #4]
	UINT	ptn = (UINT)(1 << no);
 8010ada:	2201      	movs	r2, #1
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	fa02 f303 	lsl.w	r3, r2, r3
 8010ae2:	61bb      	str	r3, [r7, #24]
	UINT	flg;
	ER	ercd;

	INC(&lock->wai);
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	3304      	adds	r3, #4
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7ff ff91 	bl	8010a10 <INC>
	for ( ;; ) {
		if ( !BTS(&lock->flg, no) ) {
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	68b9      	ldr	r1, [r7, #8]
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7ff ffb2 	bl	8010a5c <BTS>
 8010af8:	4603      	mov	r3, r0
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d102      	bne.n	8010b04 <MLockTmo+0x36>
			ercd = E_OK;
 8010afe:	2300      	movs	r3, #0
 8010b00:	61fb      	str	r3, [r7, #28]
			break;
 8010b02:	e010      	b.n	8010b26 <MLockTmo+0x58>
		}

		ercd = tk_wai_flg(lock->id, ptn, TWF_ORW|TWF_BITCLR, &flg, tmo);
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	6898      	ldr	r0, [r3, #8]
 8010b08:	f107 0214 	add.w	r2, r7, #20
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	9300      	str	r3, [sp, #0]
 8010b10:	4613      	mov	r3, r2
 8010b12:	2221      	movs	r2, #33	; 0x21
 8010b14:	69b9      	ldr	r1, [r7, #24]
 8010b16:	f7fd fc2f 	bl	800e378 <tk_wai_flg>
 8010b1a:	61f8      	str	r0, [r7, #28]
		if ( ercd < E_OK ) {
 8010b1c:	69fb      	ldr	r3, [r7, #28]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	db00      	blt.n	8010b24 <MLockTmo+0x56>
		if ( !BTS(&lock->flg, no) ) {
 8010b22:	e7e4      	b.n	8010aee <MLockTmo+0x20>
			break;
 8010b24:	bf00      	nop
		}
	}
	DEC(&lock->wai);
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	3304      	adds	r3, #4
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f7ff ff83 	bl	8010a36 <DEC>

	return ercd;
 8010b30:	69fb      	ldr	r3, [r7, #28]
}
 8010b32:	4618      	mov	r0, r3
 8010b34:	3720      	adds	r7, #32
 8010b36:	46bd      	mov	sp, r7
 8010b38:	bd80      	pop	{r7, pc}

08010b3a <MLock>:
/*
 * Lock 
 *	no	Lock number 0 - 31 
 */
EXPORT ER MLock( FastMLock *lock, INT no )
{
 8010b3a:	b580      	push	{r7, lr}
 8010b3c:	b082      	sub	sp, #8
 8010b3e:	af00      	add	r7, sp, #0
 8010b40:	6078      	str	r0, [r7, #4]
 8010b42:	6039      	str	r1, [r7, #0]
	return MLockTmo(lock, no, TMO_FEVR);
 8010b44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b48:	6839      	ldr	r1, [r7, #0]
 8010b4a:	6878      	ldr	r0, [r7, #4]
 8010b4c:	f7ff ffbf 	bl	8010ace <MLockTmo>
 8010b50:	4603      	mov	r3, r0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3708      	adds	r7, #8
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}

08010b5a <MUnlock>:
/*
 * Lock release 
 *	no	Lock number 0 - 31 
 */
EXPORT ER MUnlock( FastMLock *lock, INT no )
{
 8010b5a:	b580      	push	{r7, lr}
 8010b5c:	b084      	sub	sp, #16
 8010b5e:	af00      	add	r7, sp, #0
 8010b60:	6078      	str	r0, [r7, #4]
 8010b62:	6039      	str	r1, [r7, #0]
	UINT	ptn = (UINT)(1 << no);
 8010b64:	2201      	movs	r2, #1
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	fa02 f303 	lsl.w	r3, r2, r3
 8010b6c:	60fb      	str	r3, [r7, #12]
	ER	ercd;

	BR(&lock->flg, no);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6839      	ldr	r1, [r7, #0]
 8010b72:	4618      	mov	r0, r3
 8010b74:	f7ff ff92 	bl	8010a9c <BR>
	ercd = ( lock->wai == 0 )? E_OK: tk_set_flg(lock->id, ptn);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d007      	beq.n	8010b90 <MUnlock+0x36>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	689b      	ldr	r3, [r3, #8]
 8010b84:	68f9      	ldr	r1, [r7, #12]
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7fd fb0a 	bl	800e1a0 <tk_set_flg>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	e000      	b.n	8010b92 <MUnlock+0x38>
 8010b90:	2300      	movs	r3, #0
 8010b92:	60bb      	str	r3, [r7, #8]

	return ercd;
 8010b94:	68bb      	ldr	r3, [r7, #8]
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3710      	adds	r7, #16
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
	...

08010ba0 <CreateMLock>:

/*
 * Create multi-lock 
 */
EXPORT ER CreateMLock( FastMLock *lock, CONST UB *name )
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b08a      	sub	sp, #40	; 0x28
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	6039      	str	r1, [r7, #0]
	T_CFLG	cflg;
	ER	ercd;

	cflg.flgatr  = TA_TPRI | TA_WMUL;
 8010baa:	2309      	movs	r3, #9
 8010bac:	613b      	str	r3, [r7, #16]
	cflg.iflgptn = 0;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	617b      	str	r3, [r7, #20]
	SetOBJNAME(cflg.exinf, "MLOC");
 8010bb2:	f107 030c 	add.w	r3, r7, #12
 8010bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8010bb8:	4b17      	ldr	r3, [pc, #92]	; (8010c18 <CreateMLock+0x78>)
 8010bba:	623b      	str	r3, [r7, #32]
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	61fb      	str	r3, [r7, #28]
 8010bc0:	e00a      	b.n	8010bd8 <CreateMLock+0x38>
 8010bc2:	6a3a      	ldr	r2, [r7, #32]
 8010bc4:	1c53      	adds	r3, r2, #1
 8010bc6:	623b      	str	r3, [r7, #32]
 8010bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bca:	1c59      	adds	r1, r3, #1
 8010bcc:	6279      	str	r1, [r7, #36]	; 0x24
 8010bce:	7812      	ldrb	r2, [r2, #0]
 8010bd0:	701a      	strb	r2, [r3, #0]
 8010bd2:	69fb      	ldr	r3, [r7, #28]
 8010bd4:	3301      	adds	r3, #1
 8010bd6:	61fb      	str	r3, [r7, #28]
 8010bd8:	69fb      	ldr	r3, [r7, #28]
 8010bda:	2b03      	cmp	r3, #3
 8010bdc:	ddf1      	ble.n	8010bc2 <CreateMLock+0x22>

	lock->id = ercd = tk_cre_flg(&cflg);
 8010bde:	f107 030c 	add.w	r3, r7, #12
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7fd fa2c 	bl	800e040 <tk_cre_flg>
 8010be8:	61b8      	str	r0, [r7, #24]
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	69ba      	ldr	r2, [r7, #24]
 8010bee:	609a      	str	r2, [r3, #8]
	if ( ercd < E_OK ) {
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	da01      	bge.n	8010bfa <CreateMLock+0x5a>
		return ercd;
 8010bf6:	69bb      	ldr	r3, [r7, #24]
 8010bf8:	e009      	b.n	8010c0e <CreateMLock+0x6e>
	}

	lock->wai = 0;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	605a      	str	r2, [r3, #4]
	lock->flg = 0;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2200      	movs	r2, #0
 8010c04:	601a      	str	r2, [r3, #0]
	lock->name = name;
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	683a      	ldr	r2, [r7, #0]
 8010c0a:	60da      	str	r2, [r3, #12]

	return E_OK;
 8010c0c:	2300      	movs	r3, #0
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3728      	adds	r7, #40	; 0x28
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	080129f4 	.word	0x080129f4

08010c1c <DeleteMLock>:

/*
 * Delete multi-lock 
 */
EXPORT ER DeleteMLock( FastMLock *lock )
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b084      	sub	sp, #16
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
	ER	ercd;

	if ( lock->id <= 0 ) {
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	689b      	ldr	r3, [r3, #8]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	dc02      	bgt.n	8010c32 <DeleteMLock+0x16>
		return E_PAR;
 8010c2c:	f06f 0310 	mvn.w	r3, #16
 8010c30:	e00e      	b.n	8010c50 <DeleteMLock+0x34>
	}

	ercd = tk_del_flg(lock->id);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	689b      	ldr	r3, [r3, #8]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7fd fa62 	bl	800e100 <tk_del_flg>
 8010c3c:	60f8      	str	r0, [r7, #12]
	if ( ercd < E_OK ) {
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	da01      	bge.n	8010c48 <DeleteMLock+0x2c>
		return ercd;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	e003      	b.n	8010c50 <DeleteMLock+0x34>
	}

	lock->id = 0;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	609a      	str	r2, [r3, #8]

	return E_OK;
 8010c4e:	2300      	movs	r3, #0
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3710      	adds	r7, #16
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <Kmalloc>:
/* --------------------------------------------------------------------- */
/*
 * Memory allocation API definition
 */
EXPORT void* Kmalloc( size_t size )
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
	return knl_Imalloc(size);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7fd fdfe 	bl	800e864 <knl_Imalloc>
 8010c68:	4603      	mov	r3, r0
}
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	3708      	adds	r7, #8
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bd80      	pop	{r7, pc}

08010c72 <Kfree>:
{
	return knl_Irealloc(ptr, size);
}

EXPORT void Kfree( void *ptr )
{
 8010c72:	b580      	push	{r7, lr}
 8010c74:	b082      	sub	sp, #8
 8010c76:	af00      	add	r7, sp, #0
 8010c78:	6078      	str	r0, [r7, #4]
	knl_Ifree(ptr);
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f7fd fe48 	bl	800e910 <knl_Ifree>
}
 8010c80:	bf00      	nop
 8010c82:	3708      	adds	r7, #8
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}

08010c88 <libtm_init>:
/*
 * libtm_init() - libtm Initialize
 * supported only on wait != 0 (polling not supported)
 */
EXPORT void libtm_init(void)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	af00      	add	r7, sp, #0
	tm_com_init();
 8010c8c:	f001 fcde 	bl	801264c <tm_com_init>
}
 8010c90:	bf00      	nop
 8010c92:	bd80      	pop	{r7, pc}

08010c94 <tm_putchar>:
/*
 * tm_putchar()
 * Ctrl-C is not supported
 */
EXPORT INT tm_putchar( INT c )
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b084      	sub	sp, #16
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
	static const char CR = CHR_CR;
	UB buf = (UB)c;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	b2db      	uxtb	r3, r3
 8010ca0:	72fb      	strb	r3, [r7, #11]
	INT imask;

	DI(imask);
 8010ca2:	f001 fc8c 	bl	80125be <disint>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	60fb      	str	r3, [r7, #12]
	if (buf == CHR_LF) {
 8010caa:	7afb      	ldrb	r3, [r7, #11]
 8010cac:	2b0a      	cmp	r3, #10
 8010cae:	d103      	bne.n	8010cb8 <tm_putchar+0x24>
		tm_snd_dat((const UB*)&CR, 1);
 8010cb0:	2101      	movs	r1, #1
 8010cb2:	4809      	ldr	r0, [pc, #36]	; (8010cd8 <tm_putchar+0x44>)
 8010cb4:	f001 fc9c 	bl	80125f0 <tm_snd_dat>
	}
	tm_snd_dat(&buf, 1);
 8010cb8:	f107 030b 	add.w	r3, r7, #11
 8010cbc:	2101      	movs	r1, #1
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	f001 fc96 	bl	80125f0 <tm_snd_dat>
	EI(imask);
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f001 fc5d 	bl	8012586 <set_basepri>

	return 0;
 8010ccc:	2300      	movs	r3, #0
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3710      	adds	r7, #16
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}
 8010cd6:	bf00      	nop
 8010cd8:	08012b20 	.word	0x08012b20

08010cdc <tm_putstring>:
/*
 * tm_putstring() - Put String
 * Ctrl-C is not supported
 */
EXPORT INT tm_putstring( const UB *buff )
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b084      	sub	sp, #16
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
	const UB* p = buff;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	60fb      	str	r3, [r7, #12]
	INT imask;

	DI(imask);
 8010ce8:	f001 fc69 	bl	80125be <disint>
 8010cec:	4603      	mov	r3, r0
 8010cee:	60bb      	str	r3, [r7, #8]
	while ( *p != (UB)'\0' ) {
 8010cf0:	e006      	b.n	8010d00 <tm_putstring+0x24>
		tm_putchar(*p++);
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	1c5a      	adds	r2, r3, #1
 8010cf6:	60fa      	str	r2, [r7, #12]
 8010cf8:	781b      	ldrb	r3, [r3, #0]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7ff ffca 	bl	8010c94 <tm_putchar>
	while ( *p != (UB)'\0' ) {
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	781b      	ldrb	r3, [r3, #0]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d1f4      	bne.n	8010cf2 <tm_putstring+0x16>
	}
	EI(imask);
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f001 fc3b 	bl	8012586 <set_basepri>

	return 0;
 8010d10:	2300      	movs	r3, #0
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3710      	adds	r7, #16
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
	...

08010d1c <outint>:

/*
 *	Output integer value
 */
LOCAL	UB	*outint( UB *ep, UW val, UB base )
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b087      	sub	sp, #28
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	60f8      	str	r0, [r7, #12]
 8010d24:	60b9      	str	r1, [r7, #8]
 8010d26:	4613      	mov	r3, r2
 8010d28:	71fb      	strb	r3, [r7, #7]
LOCAL const UB  digits[32] = "0123456789abcdef0123456789ABCDEF";
	UB	caps;

	caps = (base & 0x40) >> 2;		/* 'a' or 'A' */
 8010d2a:	79fb      	ldrb	r3, [r7, #7]
 8010d2c:	109b      	asrs	r3, r3, #2
 8010d2e:	b2db      	uxtb	r3, r3
 8010d30:	f003 0310 	and.w	r3, r3, #16
 8010d34:	75fb      	strb	r3, [r7, #23]
	for (base &= 0x3F; val >= base; val /= base) {
 8010d36:	79fb      	ldrb	r3, [r7, #7]
 8010d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d3c:	71fb      	strb	r3, [r7, #7]
 8010d3e:	e014      	b.n	8010d6a <outint+0x4e>
		*--ep = digits[(val % base) + caps];
 8010d40:	79fa      	ldrb	r2, [r7, #7]
 8010d42:	68bb      	ldr	r3, [r7, #8]
 8010d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d48:	fb01 f202 	mul.w	r2, r1, r2
 8010d4c:	1a9a      	subs	r2, r3, r2
 8010d4e:	7dfb      	ldrb	r3, [r7, #23]
 8010d50:	4413      	add	r3, r2
 8010d52:	68fa      	ldr	r2, [r7, #12]
 8010d54:	3a01      	subs	r2, #1
 8010d56:	60fa      	str	r2, [r7, #12]
 8010d58:	4a0e      	ldr	r2, [pc, #56]	; (8010d94 <outint+0x78>)
 8010d5a:	5cd2      	ldrb	r2, [r2, r3]
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	701a      	strb	r2, [r3, #0]
	for (base &= 0x3F; val >= base; val /= base) {
 8010d60:	79fb      	ldrb	r3, [r7, #7]
 8010d62:	68ba      	ldr	r2, [r7, #8]
 8010d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8010d68:	60bb      	str	r3, [r7, #8]
 8010d6a:	79fb      	ldrb	r3, [r7, #7]
 8010d6c:	68ba      	ldr	r2, [r7, #8]
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d2e6      	bcs.n	8010d40 <outint+0x24>
	}
	*--ep = digits[val + caps];
 8010d72:	7dfa      	ldrb	r2, [r7, #23]
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	4413      	add	r3, r2
 8010d78:	68fa      	ldr	r2, [r7, #12]
 8010d7a:	3a01      	subs	r2, #1
 8010d7c:	60fa      	str	r2, [r7, #12]
 8010d7e:	4a05      	ldr	r2, [pc, #20]	; (8010d94 <outint+0x78>)
 8010d80:	5cd2      	ldrb	r2, [r2, r3]
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	701a      	strb	r2, [r3, #0]
	return ep;				/* buffer top pointer */
 8010d86:	68fb      	ldr	r3, [r7, #12]
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	371c      	adds	r7, #28
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d92:	4770      	bx	lr
 8010d94:	08012b24 	.word	0x08012b24

08010d98 <tm_vsprintf>:

/*
 *	Output with format (limited version)
 */
LOCAL	void	tm_vsprintf( OutFn ostr, OutPar *par, const UB *fmt, va_list ap )
{
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b090      	sub	sp, #64	; 0x40
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	60f8      	str	r0, [r7, #12]
 8010da0:	60b9      	str	r1, [r7, #8]
 8010da2:	607a      	str	r2, [r7, #4]
 8010da4:	603b      	str	r3, [r7, #0]
#define	F_PLUS		0x02
#define	F_SPACE		0x04
#define	F_PREFIX	0x08
#define	F_ZERO		0x10

	for (fms = NULL; (c = *fmt++) != '\0'; ) {
 8010da6:	2300      	movs	r3, #0
 8010da8:	633b      	str	r3, [r7, #48]	; 0x30
 8010daa:	e2ef      	b.n	801138c <tm_vsprintf+0x5f4>

		if (c != '%') {	/* Fixed string */
 8010dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010db0:	2b25      	cmp	r3, #37	; 0x25
 8010db2:	d007      	beq.n	8010dc4 <tm_vsprintf+0x2c>
			if (fms == NULL) fms = (UB*)fmt - 1;
 8010db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	f040 82e8 	bne.w	801138c <tm_vsprintf+0x5f4>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	3b01      	subs	r3, #1
 8010dc0:	633b      	str	r3, [r7, #48]	; 0x30
			continue;
 8010dc2:	e2e3      	b.n	801138c <tm_vsprintf+0x5f4>
		}

		/* Output fix string */
		if (fms != NULL) {
 8010dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d009      	beq.n	8010dde <tm_vsprintf+0x46>
			(*ostr)(fms, fmt - fms - 1, par);
 8010dca:	687a      	ldr	r2, [r7, #4]
 8010dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010dce:	1ad3      	subs	r3, r2, r3
 8010dd0:	1e59      	subs	r1, r3, #1
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	68ba      	ldr	r2, [r7, #8]
 8010dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010dd8:	4798      	blx	r3
			fms = NULL;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	633b      	str	r3, [r7, #48]	; 0x30
		}

		/* Get flags */
		for (flg = 0; ; ) {
 8010dde:	2300      	movs	r3, #0
 8010de0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			switch (c = *fmt++) {
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	1c5a      	adds	r2, r3, #1
 8010de8:	607a      	str	r2, [r7, #4]
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010df4:	3b20      	subs	r3, #32
 8010df6:	2b10      	cmp	r3, #16
 8010df8:	d848      	bhi.n	8010e8c <tm_vsprintf+0xf4>
 8010dfa:	a201      	add	r2, pc, #4	; (adr r2, 8010e00 <tm_vsprintf+0x68>)
 8010dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e00:	08010e61 	.word	0x08010e61
 8010e04:	08010e8d 	.word	0x08010e8d
 8010e08:	08010e8d 	.word	0x08010e8d
 8010e0c:	08010e6f 	.word	0x08010e6f
 8010e10:	08010e8d 	.word	0x08010e8d
 8010e14:	08010e8d 	.word	0x08010e8d
 8010e18:	08010e8d 	.word	0x08010e8d
 8010e1c:	08010e8d 	.word	0x08010e8d
 8010e20:	08010e8d 	.word	0x08010e8d
 8010e24:	08010e8d 	.word	0x08010e8d
 8010e28:	08010e8d 	.word	0x08010e8d
 8010e2c:	08010e53 	.word	0x08010e53
 8010e30:	08010e8d 	.word	0x08010e8d
 8010e34:	08010e45 	.word	0x08010e45
 8010e38:	08010e8d 	.word	0x08010e8d
 8010e3c:	08010e8d 	.word	0x08010e8d
 8010e40:	08010e7d 	.word	0x08010e7d
			case '-': flg |= F_LEFT;	continue;
 8010e44:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010e48:	f043 0301 	orr.w	r3, r3, #1
 8010e4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010e50:	e01b      	b.n	8010e8a <tm_vsprintf+0xf2>
			case '+': flg |= F_PLUS;	continue;
 8010e52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010e56:	f043 0302 	orr.w	r3, r3, #2
 8010e5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010e5e:	e014      	b.n	8010e8a <tm_vsprintf+0xf2>
			case ' ': flg |= F_SPACE;	continue;
 8010e60:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010e64:	f043 0304 	orr.w	r3, r3, #4
 8010e68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010e6c:	e00d      	b.n	8010e8a <tm_vsprintf+0xf2>
			case '#': flg |= F_PREFIX;	continue;
 8010e6e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010e72:	f043 0308 	orr.w	r3, r3, #8
 8010e76:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010e7a:	e006      	b.n	8010e8a <tm_vsprintf+0xf2>
			case '0': flg |= F_ZERO;	continue;
 8010e7c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010e80:	f043 0310 	orr.w	r3, r3, #16
 8010e84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010e88:	bf00      	nop
			switch (c = *fmt++) {
 8010e8a:	e7ab      	b.n	8010de4 <tm_vsprintf+0x4c>
			}
			break;
 8010e8c:	bf00      	nop
		}

		/* Get field width */
		if (c == '*') {
 8010e8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e92:	2b2a      	cmp	r3, #42	; 0x2a
 8010e94:	d119      	bne.n	8010eca <tm_vsprintf+0x132>
			wid = va_arg(ap, INT);
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	1d1a      	adds	r2, r3, #4
 8010e9a:	603a      	str	r2, [r7, #0]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	877b      	strh	r3, [r7, #58]	; 0x3a
			if (wid < 0) {
 8010ea0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	da09      	bge.n	8010ebc <tm_vsprintf+0x124>
				wid = -wid;
 8010ea8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010eaa:	425b      	negs	r3, r3
 8010eac:	b29b      	uxth	r3, r3
 8010eae:	877b      	strh	r3, [r7, #58]	; 0x3a
				flg |= F_LEFT;
 8010eb0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010eb4:	f043 0301 	orr.w	r3, r3, #1
 8010eb8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			}
			c = *fmt++;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	1c5a      	adds	r2, r3, #1
 8010ec0:	607a      	str	r2, [r7, #4]
 8010ec2:	781b      	ldrb	r3, [r3, #0]
 8010ec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ec8:	e01e      	b.n	8010f08 <tm_vsprintf+0x170>
		} else {
			for (wid = 0; c >= '0' && c <= '9'; c = *fmt++)
 8010eca:	2300      	movs	r3, #0
 8010ecc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8010ece:	e013      	b.n	8010ef8 <tm_vsprintf+0x160>
				wid = wid * 10 + c - '0';
 8010ed0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010ed2:	461a      	mov	r2, r3
 8010ed4:	0092      	lsls	r2, r2, #2
 8010ed6:	4413      	add	r3, r2
 8010ed8:	005b      	lsls	r3, r3, #1
 8010eda:	b29a      	uxth	r2, r3
 8010edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ee0:	b29b      	uxth	r3, r3
 8010ee2:	4413      	add	r3, r2
 8010ee4:	b29b      	uxth	r3, r3
 8010ee6:	3b30      	subs	r3, #48	; 0x30
 8010ee8:	b29b      	uxth	r3, r3
 8010eea:	877b      	strh	r3, [r7, #58]	; 0x3a
			for (wid = 0; c >= '0' && c <= '9'; c = *fmt++)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	1c5a      	adds	r2, r3, #1
 8010ef0:	607a      	str	r2, [r7, #4]
 8010ef2:	781b      	ldrb	r3, [r3, #0]
 8010ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010efc:	2b2f      	cmp	r3, #47	; 0x2f
 8010efe:	d903      	bls.n	8010f08 <tm_vsprintf+0x170>
 8010f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f04:	2b39      	cmp	r3, #57	; 0x39
 8010f06:	d9e3      	bls.n	8010ed0 <tm_vsprintf+0x138>
		}

		/* Get precision */
		prec = -1;
 8010f08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010f0c:	873b      	strh	r3, [r7, #56]	; 0x38
		if (c == '.') {
 8010f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f12:	2b2e      	cmp	r3, #46	; 0x2e
 8010f14:	d140      	bne.n	8010f98 <tm_vsprintf+0x200>
			c = *fmt++;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	1c5a      	adds	r2, r3, #1
 8010f1a:	607a      	str	r2, [r7, #4]
 8010f1c:	781b      	ldrb	r3, [r3, #0]
 8010f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (c == '*') {
 8010f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f26:	2b2a      	cmp	r3, #42	; 0x2a
 8010f28:	d111      	bne.n	8010f4e <tm_vsprintf+0x1b6>
				prec = va_arg(ap, INT);
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	1d1a      	adds	r2, r3, #4
 8010f2e:	603a      	str	r2, [r7, #0]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	873b      	strh	r3, [r7, #56]	; 0x38
				if (prec < 0) prec = 0;
 8010f34:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	da01      	bge.n	8010f40 <tm_vsprintf+0x1a8>
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	873b      	strh	r3, [r7, #56]	; 0x38
				c = *fmt++;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	1c5a      	adds	r2, r3, #1
 8010f44:	607a      	str	r2, [r7, #4]
 8010f46:	781b      	ldrb	r3, [r3, #0]
 8010f48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f4c:	e01e      	b.n	8010f8c <tm_vsprintf+0x1f4>
			} else {
				for (prec = 0;c >= '0' && c <= '9';c = *fmt++)
 8010f4e:	2300      	movs	r3, #0
 8010f50:	873b      	strh	r3, [r7, #56]	; 0x38
 8010f52:	e013      	b.n	8010f7c <tm_vsprintf+0x1e4>
					prec = prec * 10 + c - '0';
 8010f54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8010f56:	461a      	mov	r2, r3
 8010f58:	0092      	lsls	r2, r2, #2
 8010f5a:	4413      	add	r3, r2
 8010f5c:	005b      	lsls	r3, r3, #1
 8010f5e:	b29a      	uxth	r2, r3
 8010f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f64:	b29b      	uxth	r3, r3
 8010f66:	4413      	add	r3, r2
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	3b30      	subs	r3, #48	; 0x30
 8010f6c:	b29b      	uxth	r3, r3
 8010f6e:	873b      	strh	r3, [r7, #56]	; 0x38
				for (prec = 0;c >= '0' && c <= '9';c = *fmt++)
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	1c5a      	adds	r2, r3, #1
 8010f74:	607a      	str	r2, [r7, #4]
 8010f76:	781b      	ldrb	r3, [r3, #0]
 8010f78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f80:	2b2f      	cmp	r3, #47	; 0x2f
 8010f82:	d903      	bls.n	8010f8c <tm_vsprintf+0x1f4>
 8010f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f88:	2b39      	cmp	r3, #57	; 0x39
 8010f8a:	d9e3      	bls.n	8010f54 <tm_vsprintf+0x1bc>
			}
			flg &= ~F_ZERO;		/* No ZERO padding */
 8010f8c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8010f90:	f023 0310 	bic.w	r3, r3, #16
 8010f94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		}

		/* Get qualifier */
		qual = 0;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if (c == 'h' || c == 'l') {
 8010f9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fa2:	2b68      	cmp	r3, #104	; 0x68
 8010fa4:	d003      	beq.n	8010fae <tm_vsprintf+0x216>
 8010fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010faa:	2b6c      	cmp	r3, #108	; 0x6c
 8010fac:	d109      	bne.n	8010fc2 <tm_vsprintf+0x22a>
			qual = c;
 8010fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fb2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			c = *fmt++;
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	1c5a      	adds	r2, r3, #1
 8010fba:	607a      	str	r2, [r7, #4]
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		/* Format items */
		base = 10;
 8010fc2:	230a      	movs	r3, #10
 8010fc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		sign = 0;
 8010fc8:	2300      	movs	r3, #0
 8010fca:	74fb      	strb	r3, [r7, #19]
		cbe = &cbuf[MAX_DIGITS];	/* buffer end pointer */
 8010fcc:	f107 0314 	add.w	r3, r7, #20
 8010fd0:	330e      	adds	r3, #14
 8010fd2:	62bb      	str	r3, [r7, #40]	; 0x28

		switch (c) {
 8010fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fd8:	2b78      	cmp	r3, #120	; 0x78
 8010fda:	f300 814d 	bgt.w	8011278 <tm_vsprintf+0x4e0>
 8010fde:	2b64      	cmp	r3, #100	; 0x64
 8010fe0:	da0b      	bge.n	8010ffa <tm_vsprintf+0x262>
 8010fe2:	2b63      	cmp	r3, #99	; 0x63
 8010fe4:	f000 8135 	beq.w	8011252 <tm_vsprintf+0x4ba>
 8010fe8:	2b63      	cmp	r3, #99	; 0x63
 8010fea:	f300 8145 	bgt.w	8011278 <tm_vsprintf+0x4e0>
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	f000 813e 	beq.w	8011270 <tm_vsprintf+0x4d8>
 8010ff4:	2b58      	cmp	r3, #88	; 0x58
 8010ff6:	d022      	beq.n	801103e <tm_vsprintf+0x2a6>
 8010ff8:	e13e      	b.n	8011278 <tm_vsprintf+0x4e0>
 8010ffa:	3b64      	subs	r3, #100	; 0x64
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8011002:	4a9f      	ldr	r2, [pc, #636]	; (8011280 <tm_vsprintf+0x4e8>)
 8011004:	401a      	ands	r2, r3
 8011006:	2a00      	cmp	r2, #0
 8011008:	bf14      	ite	ne
 801100a:	2201      	movne	r2, #1
 801100c:	2200      	moveq	r2, #0
 801100e:	b2d2      	uxtb	r2, r2
 8011010:	2a00      	cmp	r2, #0
 8011012:	d114      	bne.n	801103e <tm_vsprintf+0x2a6>
 8011014:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8011018:	2a00      	cmp	r2, #0
 801101a:	bf14      	ite	ne
 801101c:	2201      	movne	r2, #1
 801101e:	2200      	moveq	r2, #0
 8011020:	b2d2      	uxtb	r2, r2
 8011022:	2a00      	cmp	r2, #0
 8011024:	f040 80f1 	bne.w	801120a <tm_vsprintf+0x472>
 8011028:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801102c:	2b00      	cmp	r3, #0
 801102e:	bf14      	ite	ne
 8011030:	2301      	movne	r3, #1
 8011032:	2300      	moveq	r3, #0
 8011034:	b2db      	uxtb	r3, r3
 8011036:	2b00      	cmp	r3, #0
 8011038:	f040 80cf 	bne.w	80111da <tm_vsprintf+0x442>
 801103c:	e11c      	b.n	8011278 <tm_vsprintf+0x4e0>
		case 'd':
		case 'u':
		case 'X':
		case 'x':
		case 'o':
			if (qual == 'l') {
 801103e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011042:	2b6c      	cmp	r3, #108	; 0x6c
 8011044:	d105      	bne.n	8011052 <tm_vsprintf+0x2ba>
				v = va_arg(ap, UW);
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	1d1a      	adds	r2, r3, #4
 801104a:	603a      	str	r2, [r7, #0]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011050:	e016      	b.n	8011080 <tm_vsprintf+0x2e8>
			} else {
				v = va_arg(ap, UINT);
 8011052:	683b      	ldr	r3, [r7, #0]
 8011054:	1d1a      	adds	r2, r3, #4
 8011056:	603a      	str	r2, [r7, #0]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	63fb      	str	r3, [r7, #60]	; 0x3c
				if (qual == 'h') {
 801105c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011060:	2b68      	cmp	r3, #104	; 0x68
 8011062:	d10d      	bne.n	8011080 <tm_vsprintf+0x2e8>
					v = (c == 'i' || c == 'd') ?
						(H)v :(UH)v;
 8011064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011068:	2b69      	cmp	r3, #105	; 0x69
 801106a:	d003      	beq.n	8011074 <tm_vsprintf+0x2dc>
					v = (c == 'i' || c == 'd') ?
 801106c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011070:	2b64      	cmp	r3, #100	; 0x64
 8011072:	d102      	bne.n	801107a <tm_vsprintf+0x2e2>
						(H)v :(UH)v;
 8011074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011076:	b21b      	sxth	r3, r3
 8011078:	e001      	b.n	801107e <tm_vsprintf+0x2e6>
 801107a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801107c:	b29b      	uxth	r3, r3
					v = (c == 'i' || c == 'd') ?
 801107e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
			}
			switch (c) {
 8011080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011084:	3b58      	subs	r3, #88	; 0x58
 8011086:	2b20      	cmp	r3, #32
 8011088:	f200 8094 	bhi.w	80111b4 <tm_vsprintf+0x41c>
 801108c:	a201      	add	r2, pc, #4	; (adr r2, 8011094 <tm_vsprintf+0x2fc>)
 801108e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011092:	bf00      	nop
 8011094:	0801115b 	.word	0x0801115b
 8011098:	080111b5 	.word	0x080111b5
 801109c:	080111b5 	.word	0x080111b5
 80110a0:	080111b5 	.word	0x080111b5
 80110a4:	080111b5 	.word	0x080111b5
 80110a8:	080111b5 	.word	0x080111b5
 80110ac:	080111b5 	.word	0x080111b5
 80110b0:	080111b5 	.word	0x080111b5
 80110b4:	080111b5 	.word	0x080111b5
 80110b8:	080111b5 	.word	0x080111b5
 80110bc:	080111b5 	.word	0x080111b5
 80110c0:	080111b5 	.word	0x080111b5
 80110c4:	08011119 	.word	0x08011119
 80110c8:	080111b5 	.word	0x080111b5
 80110cc:	080111b5 	.word	0x080111b5
 80110d0:	080111b5 	.word	0x080111b5
 80110d4:	080111b5 	.word	0x080111b5
 80110d8:	08011119 	.word	0x08011119
 80110dc:	080111b5 	.word	0x080111b5
 80110e0:	080111b5 	.word	0x080111b5
 80110e4:	080111b5 	.word	0x080111b5
 80110e8:	080111b5 	.word	0x080111b5
 80110ec:	080111b5 	.word	0x080111b5
 80110f0:	0801116f 	.word	0x0801116f
 80110f4:	080111b5 	.word	0x080111b5
 80110f8:	080111b5 	.word	0x080111b5
 80110fc:	080111b5 	.word	0x080111b5
 8011100:	080111b5 	.word	0x080111b5
 8011104:	080111b5 	.word	0x080111b5
 8011108:	080111b5 	.word	0x080111b5
 801110c:	080111b5 	.word	0x080111b5
 8011110:	080111b5 	.word	0x080111b5
 8011114:	08011165 	.word	0x08011165
			case 'i':
			case 'd':
				if ((W)v < 0) {
 8011118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801111a:	2b00      	cmp	r3, #0
 801111c:	da05      	bge.n	801112a <tm_vsprintf+0x392>
					v = - (W)v;
 801111e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011120:	425b      	negs	r3, r3
 8011122:	63fb      	str	r3, [r7, #60]	; 0x3c
					sign = '-';
 8011124:	232d      	movs	r3, #45	; 0x2d
 8011126:	74fb      	strb	r3, [r7, #19]
 8011128:	e010      	b.n	801114c <tm_vsprintf+0x3b4>
				} else if ((flg & F_PLUS) != 0) {
 801112a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801112e:	f003 0302 	and.w	r3, r3, #2
 8011132:	2b00      	cmp	r3, #0
 8011134:	d002      	beq.n	801113c <tm_vsprintf+0x3a4>
					sign = '+';
 8011136:	232b      	movs	r3, #43	; 0x2b
 8011138:	74fb      	strb	r3, [r7, #19]
 801113a:	e007      	b.n	801114c <tm_vsprintf+0x3b4>
				} else if ((flg & F_SPACE) != 0) {
 801113c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011140:	f003 0304 	and.w	r3, r3, #4
 8011144:	2b00      	cmp	r3, #0
 8011146:	d032      	beq.n	80111ae <tm_vsprintf+0x416>
					sign = ' ';
 8011148:	2320      	movs	r3, #32
 801114a:	74fb      	strb	r3, [r7, #19]
				} else {
					break;
				}
				wid--;		/* for sign */
 801114c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8011150:	b29b      	uxth	r3, r3
 8011152:	3b01      	subs	r3, #1
 8011154:	b29b      	uxth	r3, r3
 8011156:	877b      	strh	r3, [r7, #58]	; 0x3a
			case 'u':
				break;
 8011158:	e02c      	b.n	80111b4 <tm_vsprintf+0x41c>
			case 'X':
				base += 0x40;	/* base = 16 + 0x40 */
 801115a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801115e:	3340      	adds	r3, #64	; 0x40
 8011160:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			case 'x':
				base += 8;	/* base = 16 */
 8011164:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011168:	3308      	adds	r3, #8
 801116a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			case 'o':
				base -= 2;	/* base = 8 */
 801116e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011172:	3b02      	subs	r3, #2
 8011174:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				if ((flg & F_PREFIX) != 0 && v != 0) {
 8011178:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801117c:	f003 0308 	and.w	r3, r3, #8
 8011180:	2b00      	cmp	r3, #0
 8011182:	d016      	beq.n	80111b2 <tm_vsprintf+0x41a>
 8011184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011186:	2b00      	cmp	r3, #0
 8011188:	d013      	beq.n	80111b2 <tm_vsprintf+0x41a>
					wid -= (base == 8) ? 1 : 2;
 801118a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801118c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011190:	2b08      	cmp	r3, #8
 8011192:	d101      	bne.n	8011198 <tm_vsprintf+0x400>
 8011194:	2301      	movs	r3, #1
 8011196:	e000      	b.n	801119a <tm_vsprintf+0x402>
 8011198:	2302      	movs	r3, #2
 801119a:	1ad3      	subs	r3, r2, r3
 801119c:	b29b      	uxth	r3, r3
 801119e:	877b      	strh	r3, [r7, #58]	; 0x3a
					base |= 0x80;
 80111a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80111a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				}
				break;
 80111ac:	e001      	b.n	80111b2 <tm_vsprintf+0x41a>
					break;
 80111ae:	bf00      	nop
 80111b0:	e000      	b.n	80111b4 <tm_vsprintf+0x41c>
				break;
 80111b2:	bf00      	nop
			}
			/* Note: None outputs when v == 0 && prec == 0 */
			cbs = (v == 0 && prec == 0) ?
						cbe : outint(cbe, v, base);
 80111b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d103      	bne.n	80111c2 <tm_vsprintf+0x42a>
			cbs = (v == 0 && prec == 0) ?
 80111ba:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d008      	beq.n	80111d4 <tm_vsprintf+0x43c>
						cbe : outint(cbe, v, base);
 80111c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111c6:	461a      	mov	r2, r3
 80111c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80111ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80111cc:	f7ff fda6 	bl	8010d1c <outint>
 80111d0:	4603      	mov	r3, r0
 80111d2:	e000      	b.n	80111d6 <tm_vsprintf+0x43e>
 80111d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
			cbs = (v == 0 && prec == 0) ?
 80111d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 80111d8:	e055      	b.n	8011286 <tm_vsprintf+0x4ee>
		case 'p':
			v = (UW)va_arg(ap, void *);
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	1d1a      	adds	r2, r3, #4
 80111de:	603a      	str	r2, [r7, #0]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (v != 0) {
 80111e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d006      	beq.n	80111f8 <tm_vsprintf+0x460>
				base = 16 | 0x80;
 80111ea:	2390      	movs	r3, #144	; 0x90
 80111ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				wid -= 2;
 80111f0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80111f2:	3b02      	subs	r3, #2
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	877b      	strh	r3, [r7, #58]	; 0x3a
			}
			cbs = outint(cbe, v, base);
 80111f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80111fc:	461a      	mov	r2, r3
 80111fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011202:	f7ff fd8b 	bl	8010d1c <outint>
 8011206:	62f8      	str	r0, [r7, #44]	; 0x2c
			break;
 8011208:	e03d      	b.n	8011286 <tm_vsprintf+0x4ee>
		case 's':
			cbe = cbs = va_arg(ap, UB *);
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	1d1a      	adds	r2, r3, #4
 801120e:	603a      	str	r2, [r7, #0]
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011216:	62bb      	str	r3, [r7, #40]	; 0x28
			if (prec < 0) {
 8011218:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801121c:	2b00      	cmp	r3, #0
 801121e:	da0b      	bge.n	8011238 <tm_vsprintf+0x4a0>
				while (*cbe != '\0') cbe++;
 8011220:	e002      	b.n	8011228 <tm_vsprintf+0x490>
 8011222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011224:	3301      	adds	r3, #1
 8011226:	62bb      	str	r3, [r7, #40]	; 0x28
 8011228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122a:	781b      	ldrb	r3, [r3, #0]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d1f8      	bne.n	8011222 <tm_vsprintf+0x48a>
			} else {
				while (--prec >= 0 && *cbe != '\0') cbe++;
			}
			break;
 8011230:	e028      	b.n	8011284 <tm_vsprintf+0x4ec>
				while (--prec >= 0 && *cbe != '\0') cbe++;
 8011232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011234:	3301      	adds	r3, #1
 8011236:	62bb      	str	r3, [r7, #40]	; 0x28
 8011238:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801123a:	3b01      	subs	r3, #1
 801123c:	b29b      	uxth	r3, r3
 801123e:	873b      	strh	r3, [r7, #56]	; 0x38
 8011240:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8011244:	2b00      	cmp	r3, #0
 8011246:	db1d      	blt.n	8011284 <tm_vsprintf+0x4ec>
 8011248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d1f0      	bne.n	8011232 <tm_vsprintf+0x49a>
			break;
 8011250:	e018      	b.n	8011284 <tm_vsprintf+0x4ec>
		case 'c':
			cbs = cbe;
 8011252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011254:	62fb      	str	r3, [r7, #44]	; 0x2c
			*--cbs = (UB)va_arg(ap, INT);
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	1d1a      	adds	r2, r3, #4
 801125a:	603a      	str	r2, [r7, #0]
 801125c:	681a      	ldr	r2, [r3, #0]
 801125e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011260:	3b01      	subs	r3, #1
 8011262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011264:	b2d2      	uxtb	r2, r2
 8011266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011268:	701a      	strb	r2, [r3, #0]
			prec = 0;
 801126a:	2300      	movs	r3, #0
 801126c:	873b      	strh	r3, [r7, #56]	; 0x38
			break;
 801126e:	e00a      	b.n	8011286 <tm_vsprintf+0x4ee>
		case '\0':
			fmt--;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	3b01      	subs	r3, #1
 8011274:	607b      	str	r3, [r7, #4]
			continue;
 8011276:	e089      	b.n	801138c <tm_vsprintf+0x5f4>
		default:
			/* Output as fixed string */
			fms = (UB*)fmt - 1;
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	3b01      	subs	r3, #1
 801127c:	633b      	str	r3, [r7, #48]	; 0x30
			continue;
 801127e:	e085      	b.n	801138c <tm_vsprintf+0x5f4>
 8011280:	00120821 	.word	0x00120821
			break;
 8011284:	bf00      	nop
		}

		n = cbe - cbs;				/* item length */
 8011286:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801128a:	1ad3      	subs	r3, r2, r3
 801128c:	86fb      	strh	r3, [r7, #54]	; 0x36
		if ((prec -= n) > 0) n += prec;
 801128e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8011290:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011292:	1ad3      	subs	r3, r2, r3
 8011294:	b29b      	uxth	r3, r3
 8011296:	873b      	strh	r3, [r7, #56]	; 0x38
 8011298:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 801129c:	2b00      	cmp	r3, #0
 801129e:	dd04      	ble.n	80112aa <tm_vsprintf+0x512>
 80112a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80112a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80112a4:	4413      	add	r3, r2
 80112a6:	b29b      	uxth	r3, r3
 80112a8:	86fb      	strh	r3, [r7, #54]	; 0x36
		wid -= n;				/* pad length */
 80112aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80112ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80112ae:	1ad3      	subs	r3, r2, r3
 80112b0:	b29b      	uxth	r3, r3
 80112b2:	877b      	strh	r3, [r7, #58]	; 0x3a

		/* Output preceding spaces */
		if ((flg & (F_LEFT | F_ZERO)) == 0 ) {
 80112b4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80112b8:	f003 0311 	and.w	r3, r3, #17
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d10d      	bne.n	80112dc <tm_vsprintf+0x544>
			while (--wid >= 0) (*ostr)((UB*)" ", 1, par);
 80112c0:	e004      	b.n	80112cc <tm_vsprintf+0x534>
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	68ba      	ldr	r2, [r7, #8]
 80112c6:	2101      	movs	r1, #1
 80112c8:	483d      	ldr	r0, [pc, #244]	; (80113c0 <tm_vsprintf+0x628>)
 80112ca:	4798      	blx	r3
 80112cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80112ce:	3b01      	subs	r3, #1
 80112d0:	b29b      	uxth	r3, r3
 80112d2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80112d4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 80112d8:	2b00      	cmp	r3, #0
 80112da:	daf2      	bge.n	80112c2 <tm_vsprintf+0x52a>
		}

		/* Output sign */
		if (sign != 0) {
 80112dc:	7cfb      	ldrb	r3, [r7, #19]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d005      	beq.n	80112ee <tm_vsprintf+0x556>
			(*ostr)(&sign, 1, par);
 80112e2:	f107 0013 	add.w	r0, r7, #19
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	68ba      	ldr	r2, [r7, #8]
 80112ea:	2101      	movs	r1, #1
 80112ec:	4798      	blx	r3
		}

		/* Output prefix "0x", "0X" or "0" */
		if ((base & 0x80) != 0) {
 80112ee:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	da17      	bge.n	8011326 <tm_vsprintf+0x58e>
			(*ostr)((UB*)"0", 1, par);
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	68ba      	ldr	r2, [r7, #8]
 80112fa:	2101      	movs	r1, #1
 80112fc:	4831      	ldr	r0, [pc, #196]	; (80113c4 <tm_vsprintf+0x62c>)
 80112fe:	4798      	blx	r3
			if ((base & 0x10) != 0) {
 8011300:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011304:	f003 0310 	and.w	r3, r3, #16
 8011308:	2b00      	cmp	r3, #0
 801130a:	d00c      	beq.n	8011326 <tm_vsprintf+0x58e>
				(*ostr)((base & 0x40) ? (UB*)"X" : (UB*)"x", 1, par);
 801130c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011314:	2b00      	cmp	r3, #0
 8011316:	d001      	beq.n	801131c <tm_vsprintf+0x584>
 8011318:	482b      	ldr	r0, [pc, #172]	; (80113c8 <tm_vsprintf+0x630>)
 801131a:	e000      	b.n	801131e <tm_vsprintf+0x586>
 801131c:	482b      	ldr	r0, [pc, #172]	; (80113cc <tm_vsprintf+0x634>)
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	68ba      	ldr	r2, [r7, #8]
 8011322:	2101      	movs	r1, #1
 8011324:	4798      	blx	r3
			}
		}

		/* Output preceding zeros for precision or padding */
		if ((n = prec) <= 0) {
 8011326:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011328:	86fb      	strh	r3, [r7, #54]	; 0x36
 801132a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801132e:	2b00      	cmp	r3, #0
 8011330:	dc0f      	bgt.n	8011352 <tm_vsprintf+0x5ba>
			if ((flg & (F_LEFT | F_ZERO)) == F_ZERO ) {
 8011332:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011336:	f003 0311 	and.w	r3, r3, #17
 801133a:	2b10      	cmp	r3, #16
 801133c:	d109      	bne.n	8011352 <tm_vsprintf+0x5ba>
				n = wid;
 801133e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011340:	86fb      	strh	r3, [r7, #54]	; 0x36
				wid = 0;
 8011342:	2300      	movs	r3, #0
 8011344:	877b      	strh	r3, [r7, #58]	; 0x3a
			}
		}
		while (--n >= 0) (*ostr)((UB*)"0", 1, par);
 8011346:	e004      	b.n	8011352 <tm_vsprintf+0x5ba>
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	68ba      	ldr	r2, [r7, #8]
 801134c:	2101      	movs	r1, #1
 801134e:	481d      	ldr	r0, [pc, #116]	; (80113c4 <tm_vsprintf+0x62c>)
 8011350:	4798      	blx	r3
 8011352:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011354:	3b01      	subs	r3, #1
 8011356:	b29b      	uxth	r3, r3
 8011358:	86fb      	strh	r3, [r7, #54]	; 0x36
 801135a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 801135e:	2b00      	cmp	r3, #0
 8011360:	daf2      	bge.n	8011348 <tm_vsprintf+0x5b0>

		/* Output item string */
		(*ostr)(cbs, cbe - cbs, par);
 8011362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011366:	1ad1      	subs	r1, r2, r3
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	68ba      	ldr	r2, [r7, #8]
 801136c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801136e:	4798      	blx	r3

		/* Output tailing spaces */
		while (--wid >= 0) (*ostr)((UB*)" ", 1, par);
 8011370:	e004      	b.n	801137c <tm_vsprintf+0x5e4>
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	68ba      	ldr	r2, [r7, #8]
 8011376:	2101      	movs	r1, #1
 8011378:	4811      	ldr	r0, [pc, #68]	; (80113c0 <tm_vsprintf+0x628>)
 801137a:	4798      	blx	r3
 801137c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801137e:	3b01      	subs	r3, #1
 8011380:	b29b      	uxth	r3, r3
 8011382:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011384:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8011388:	2b00      	cmp	r3, #0
 801138a:	daf2      	bge.n	8011372 <tm_vsprintf+0x5da>
	for (fms = NULL; (c = *fmt++) != '\0'; ) {
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	1c5a      	adds	r2, r3, #1
 8011390:	607a      	str	r2, [r7, #4]
 8011392:	781b      	ldrb	r3, [r3, #0]
 8011394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801139c:	2b00      	cmp	r3, #0
 801139e:	f47f ad05 	bne.w	8010dac <tm_vsprintf+0x14>
	}

	/* Output last fix string */
	if (fms != NULL) {
 80113a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d007      	beq.n	80113b8 <tm_vsprintf+0x620>
		(*ostr)(fms, fmt - fms - 1, par);
 80113a8:	687a      	ldr	r2, [r7, #4]
 80113aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ac:	1ad3      	subs	r3, r2, r3
 80113ae:	1e59      	subs	r1, r3, #1
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	68ba      	ldr	r2, [r7, #8]
 80113b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113b6:	4798      	blx	r3
	}
#if	TM_OUTBUF_SZ > 0
	/* Flush output */
	(*ostr)(NULL, 0, par);
#endif
}
 80113b8:	bf00      	nop
 80113ba:	3740      	adds	r7, #64	; 0x40
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}
 80113c0:	080129fc 	.word	0x080129fc
 80113c4:	08012a00 	.word	0x08012a00
 80113c8:	08012a04 	.word	0x08012a04
 80113cc:	08012a08 	.word	0x08012a08

080113d0 <out_cons>:

/*
 *	Output to console
 */
LOCAL	void	out_cons( UB *str, INT len,  OutPar *par )
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b084      	sub	sp, #16
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	60f8      	str	r0, [r7, #12]
 80113d8:	60b9      	str	r1, [r7, #8]
 80113da:	607a      	str	r2, [r7, #4]
#if	TM_OUTBUF_SZ == 0
	/* Direct output to console */
	par->len += len;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	4413      	add	r3, r2
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	b21a      	sxth	r2, r3
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	801a      	strh	r2, [r3, #0]
	while (--len >= 0) tm_putchar(*str++);
 80113f2:	e006      	b.n	8011402 <out_cons+0x32>
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	1c5a      	adds	r2, r3, #1
 80113f8:	60fa      	str	r2, [r7, #12]
 80113fa:	781b      	ldrb	r3, [r3, #0]
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7ff fc49 	bl	8010c94 <tm_putchar>
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	3b01      	subs	r3, #1
 8011406:	60bb      	str	r3, [r7, #8]
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	2b00      	cmp	r3, #0
 801140c:	daf2      	bge.n	80113f4 <out_cons+0x24>
			}
			par->bufp[par->cnt++] = *str++;
		}
	}
#endif
}
 801140e:	bf00      	nop
 8011410:	bf00      	nop
 8011412:	3710      	adds	r7, #16
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}

08011418 <tm_printf>:

EXPORT INT	tm_printf( const UB *format, ... )
{
 8011418:	b40f      	push	{r0, r1, r2, r3}
 801141a:	b580      	push	{r7, lr}
 801141c:	b082      	sub	sp, #8
 801141e:	af00      	add	r7, sp, #0
	va_list	ap;

#if	TM_OUTBUF_SZ == 0
	H	len = 0;
 8011420:	2300      	movs	r3, #0
 8011422:	807b      	strh	r3, [r7, #2]

	va_start(ap, format);
 8011424:	f107 0314 	add.w	r3, r7, #20
 8011428:	607b      	str	r3, [r7, #4]
	tm_vsprintf(out_cons, (OutPar*)&len, format, ap);
 801142a:	1cb9      	adds	r1, r7, #2
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	693a      	ldr	r2, [r7, #16]
 8011430:	4805      	ldr	r0, [pc, #20]	; (8011448 <tm_printf+0x30>)
 8011432:	f7ff fcb1 	bl	8010d98 <tm_vsprintf>
	va_end(ap);
	return len;
 8011436:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
	va_start(ap, format);
	tm_vsprintf(out_cons, (OutPar*)&par, format, ap);
	va_end(ap);
	return par.len;
#endif
}
 801143a:	4618      	mov	r0, r3
 801143c:	3708      	adds	r7, #8
 801143e:	46bd      	mov	sp, r7
 8011440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011444:	b004      	add	sp, #16
 8011446:	4770      	bx	lr
 8011448:	080113d1 	.word	0x080113d1

0801144c <out_w>:
{
 801144c:	b480      	push	{r7}
 801144e:	b083      	sub	sp, #12
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
 8011454:	6039      	str	r1, [r7, #0]
	*(_UW*)port = data;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	683a      	ldr	r2, [r7, #0]
 801145a:	601a      	str	r2, [r3, #0]
}
 801145c:	bf00      	nop
 801145e:	370c      	adds	r7, #12
 8011460:	46bd      	mov	sp, r7
 8011462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011466:	4770      	bx	lr

08011468 <knl_force_dispatch>:
/* ----------------------------------------------------------------------- */
/*
 *	Task dispatcher startup
 */
EXPORT void knl_force_dispatch( void )
{
 8011468:	b580      	push	{r7, lr}
 801146a:	af00      	add	r7, sp, #0
	knl_dispatch_disabled = DDS_DISABLE_IMPLICIT;
 801146c:	4b07      	ldr	r3, [pc, #28]	; (801148c <knl_force_dispatch+0x24>)
 801146e:	2201      	movs	r2, #1
 8011470:	601a      	str	r2, [r3, #0]
	knl_ctxtsk = NULL;
 8011472:	4b07      	ldr	r3, [pc, #28]	; (8011490 <knl_force_dispatch+0x28>)
 8011474:	2200      	movs	r2, #0
 8011476:	601a      	str	r2, [r3, #0]
	out_w(SCB_ICSR, ICSR_PENDSVSET);	/* pendsv exception */
 8011478:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 801147c:	4805      	ldr	r0, [pc, #20]	; (8011494 <knl_force_dispatch+0x2c>)
 801147e:	f7ff ffe5 	bl	801144c <out_w>
	set_basepri(0);
 8011482:	2000      	movs	r0, #0
 8011484:	f001 f87f 	bl	8012586 <set_basepri>
}
 8011488:	bf00      	nop
 801148a:	bd80      	pop	{r7, pc}
 801148c:	24002404 	.word	0x24002404
 8011490:	24002408 	.word	0x24002408
 8011494:	e000ed04 	.word	0xe000ed04

08011498 <knl_dispatch>:

EXPORT void knl_dispatch( void )
{
 8011498:	b580      	push	{r7, lr}
 801149a:	af00      	add	r7, sp, #0
	out_w(SCB_ICSR, ICSR_PENDSVSET);	/* pendsv exception */
 801149c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 80114a0:	4802      	ldr	r0, [pc, #8]	; (80114ac <knl_dispatch+0x14>)
 80114a2:	f7ff ffd3 	bl	801144c <out_w>
}
 80114a6:	bf00      	nop
 80114a8:	bd80      	pop	{r7, pc}
 80114aa:	bf00      	nop
 80114ac:	e000ed04 	.word	0xe000ed04

080114b0 <knl_EnterTaskIndependent>:
/*
 * Move to/Restore task independent part
 */
Inline void knl_EnterTaskIndependent( void )
{
 80114b0:	b480      	push	{r7}
 80114b2:	af00      	add	r7, sp, #0
	knl_taskindp++;
 80114b4:	4b04      	ldr	r3, [pc, #16]	; (80114c8 <knl_EnterTaskIndependent+0x18>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	3301      	adds	r3, #1
 80114ba:	4a03      	ldr	r2, [pc, #12]	; (80114c8 <knl_EnterTaskIndependent+0x18>)
 80114bc:	6013      	str	r3, [r2, #0]
}
 80114be:	bf00      	nop
 80114c0:	46bd      	mov	sp, r7
 80114c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c6:	4770      	bx	lr
 80114c8:	240010d8 	.word	0x240010d8

080114cc <knl_LeaveTaskIndependent>:
Inline void knl_LeaveTaskIndependent( void )
{
 80114cc:	b480      	push	{r7}
 80114ce:	af00      	add	r7, sp, #0
	knl_taskindp--;
 80114d0:	4b04      	ldr	r3, [pc, #16]	; (80114e4 <knl_LeaveTaskIndependent+0x18>)
 80114d2:	681b      	ldr	r3, [r3, #0]
 80114d4:	3b01      	subs	r3, #1
 80114d6:	4a03      	ldr	r2, [pc, #12]	; (80114e4 <knl_LeaveTaskIndependent+0x18>)
 80114d8:	6013      	str	r3, [r2, #0]
}
 80114da:	bf00      	nop
 80114dc:	46bd      	mov	sp, r7
 80114de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e2:	4770      	bx	lr
 80114e4:	240010d8 	.word	0x240010d8

080114e8 <knl_systim_inthdr>:
/* ------------------------------------------------------------------------ */
/*
 * System-timer Interrupt handler
 */
EXPORT void knl_systim_inthdr(void)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	af00      	add	r7, sp, #0
	ENTER_TASK_INDEPENDENT;
 80114ec:	f7ff ffe0 	bl	80114b0 <knl_EnterTaskIndependent>

	knl_timer_handler();
 80114f0:	f7fe feb4 	bl	801025c <knl_timer_handler>

	LEAVE_TASK_INDEPENDENT;
 80114f4:	f7ff ffea 	bl	80114cc <knl_LeaveTaskIndependent>
}
 80114f8:	bf00      	nop
 80114fa:	bd80      	pop	{r7, pc}

080114fc <knl_init_interrupt>:
/* ------------------------------------------------------------------------ */
/*
 * Interrupt initialize
 */
EXPORT ER knl_init_interrupt( void )
{
 80114fc:	b480      	push	{r7}
 80114fe:	af00      	add	r7, sp, #0
	/* Set Exception handler */
	knl_exctbl[14]	= (UW)knl_dispatch_entry;
 8011500:	4a05      	ldr	r2, [pc, #20]	; (8011518 <knl_init_interrupt+0x1c>)
 8011502:	4b06      	ldr	r3, [pc, #24]	; (801151c <knl_init_interrupt+0x20>)
 8011504:	639a      	str	r2, [r3, #56]	; 0x38
	knl_exctbl[15]	= (UW)knl_systim_inthdr;
 8011506:	4a06      	ldr	r2, [pc, #24]	; (8011520 <knl_init_interrupt+0x24>)
 8011508:	4b04      	ldr	r3, [pc, #16]	; (801151c <knl_init_interrupt+0x20>)
 801150a:	63da      	str	r2, [r3, #60]	; 0x3c

	return E_OK;
 801150c:	2300      	movs	r3, #0
}
 801150e:	4618      	mov	r0, r3
 8011510:	46bd      	mov	sp, r7
 8011512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011516:	4770      	bx	lr
 8011518:	0800030d 	.word	0x0800030d
 801151c:	24000200 	.word	0x24000200
 8011520:	080114e9 	.word	0x080114e9

08011524 <out_w>:
{
 8011524:	b480      	push	{r7}
 8011526:	b083      	sub	sp, #12
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	6039      	str	r1, [r7, #0]
	*(_UW*)port = data;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	683a      	ldr	r2, [r7, #0]
 8011532:	601a      	str	r2, [r3, #0]
}
 8011534:	bf00      	nop
 8011536:	370c      	adds	r7, #12
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr

08011540 <in_w>:
{
 8011540:	b480      	push	{r7}
 8011542:	b083      	sub	sp, #12
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
	return *(_UW*)port;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
}
 801154c:	4618      	mov	r0, r3
 801154e:	370c      	adds	r7, #12
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr

08011558 <halif_get_sysclk>:
uint32_t HAL_RCC_GetHCLKFreq(void);
uint32_t HAL_RCC_GetPCLK1Freq(void);
uint32_t HAL_RCC_GetPCLK2Freq(void);

Inline uint32_t halif_get_sysclk(void)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	af00      	add	r7, sp, #0
	return HAL_RCC_GetSysClockFreq();
 801155c:	f7f6 fa14 	bl	8007988 <HAL_RCC_GetSysClockFreq>
 8011560:	4603      	mov	r3, r0
}
 8011562:	4618      	mov	r0, r3
 8011564:	bd80      	pop	{r7, pc}
	...

08011568 <knl_start_mtkernel>:
EXPORT void		*knl_sysmem_top	= 0;
EXPORT void		*knl_sysmem_end	= 0;
#endif

EXPORT void knl_start_mtkernel(void)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b084      	sub	sp, #16
 801156c:	af00      	add	r7, sp, #0
	UW	*src, *top;
	UW	reg;
	INT	i;

	disint();		// Disable Interrupt
 801156e:	f001 f826 	bl	80125be <disint>

	knl_startup_hw();
 8011572:	f000 ffc3 	bl	80124fc <knl_startup_hw>

	/* Copy exception handler (ROM -> RAM) */
	src = knl_exctbl_o = (UW*)in_w(SCB_VTOR);
 8011576:	482b      	ldr	r0, [pc, #172]	; (8011624 <knl_start_mtkernel+0xbc>)
 8011578:	f7ff ffe2 	bl	8011540 <in_w>
 801157c:	4603      	mov	r3, r0
 801157e:	461a      	mov	r2, r3
 8011580:	4b29      	ldr	r3, [pc, #164]	; (8011628 <knl_start_mtkernel+0xc0>)
 8011582:	601a      	str	r2, [r3, #0]
 8011584:	4b28      	ldr	r3, [pc, #160]	; (8011628 <knl_start_mtkernel+0xc0>)
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	60fb      	str	r3, [r7, #12]
	top = (UW*)knl_exctbl;
 801158a:	4b28      	ldr	r3, [pc, #160]	; (801162c <knl_start_mtkernel+0xc4>)
 801158c:	60bb      	str	r3, [r7, #8]
	for(i=0; i < (N_SYSVEC + N_INTVEC); i++) {
 801158e:	2300      	movs	r3, #0
 8011590:	607b      	str	r3, [r7, #4]
 8011592:	e00a      	b.n	80115aa <knl_start_mtkernel+0x42>
		*top++ = *src++;
 8011594:	68fa      	ldr	r2, [r7, #12]
 8011596:	1d13      	adds	r3, r2, #4
 8011598:	60fb      	str	r3, [r7, #12]
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	1d19      	adds	r1, r3, #4
 801159e:	60b9      	str	r1, [r7, #8]
 80115a0:	6812      	ldr	r2, [r2, #0]
 80115a2:	601a      	str	r2, [r3, #0]
	for(i=0; i < (N_SYSVEC + N_INTVEC); i++) {
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	3301      	adds	r3, #1
 80115a8:	607b      	str	r3, [r7, #4]
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2ba5      	cmp	r3, #165	; 0xa5
 80115ae:	ddf1      	ble.n	8011594 <knl_start_mtkernel+0x2c>
	}
	out_w(SCB_VTOR, (UW)knl_exctbl);
 80115b0:	4b1e      	ldr	r3, [pc, #120]	; (801162c <knl_start_mtkernel+0xc4>)
 80115b2:	4619      	mov	r1, r3
 80115b4:	481b      	ldr	r0, [pc, #108]	; (8011624 <knl_start_mtkernel+0xbc>)
 80115b6:	f7ff ffb5 	bl	8011524 <out_w>

	/* Configure exception priorities */
	reg = *(_UW*)SCB_AIRCR;
 80115ba:	4b1d      	ldr	r3, [pc, #116]	; (8011630 <knl_start_mtkernel+0xc8>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	603b      	str	r3, [r7, #0]
	reg = (reg & (~AIRCR_PRIGROUP3)) | AIRCR_PRIGROUP0;	// PRIGRP:SUBPRI = 4 : 4
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80115c6:	603b      	str	r3, [r7, #0]
	*(_UW*)SCB_AIRCR = (reg & 0x0000FFFF) | AIRCR_VECTKEY;
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	b29a      	uxth	r2, r3
 80115cc:	4918      	ldr	r1, [pc, #96]	; (8011630 <knl_start_mtkernel+0xc8>)
 80115ce:	4b19      	ldr	r3, [pc, #100]	; (8011634 <knl_start_mtkernel+0xcc>)
 80115d0:	4313      	orrs	r3, r2
 80115d2:	600b      	str	r3, [r1, #0]

	out_w(SCB_SHPR2, SCB_SHPR2_VAL);			// SVC pri = 0
 80115d4:	2100      	movs	r1, #0
 80115d6:	4818      	ldr	r0, [pc, #96]	; (8011638 <knl_start_mtkernel+0xd0>)
 80115d8:	f7ff ffa4 	bl	8011524 <out_w>
	out_w(SCB_SHPR3, SCB_SHPR3_VAL);			// SysTick = 1 , PendSV = 7
 80115dc:	4917      	ldr	r1, [pc, #92]	; (801163c <knl_start_mtkernel+0xd4>)
 80115de:	4818      	ldr	r0, [pc, #96]	; (8011640 <knl_start_mtkernel+0xd8>)
 80115e0:	f7ff ffa0 	bl	8011524 <out_w>

	knl_sysclk	= halif_get_sysclk();			// Get System clock frequency
 80115e4:	f7ff ffb8 	bl	8011558 <halif_get_sysclk>
 80115e8:	4603      	mov	r3, r0
 80115ea:	4a16      	ldr	r2, [pc, #88]	; (8011644 <knl_start_mtkernel+0xdc>)
 80115ec:	6013      	str	r3, [r2, #0]
	knl_lowmem_top = knl_system_mem;
	knl_lowmem_limit = &knl_system_mem[SYSTEM_MEM_SIZE/sizeof(UW)];
#else
	/* Set System memory area */
	if(INTERNAL_RAM_START > SYSTEMAREA_TOP) {
		knl_lowmem_top = (UW*)INTERNAL_RAM_START;
 80115ee:	4b16      	ldr	r3, [pc, #88]	; (8011648 <knl_start_mtkernel+0xe0>)
 80115f0:	f04f 5210 	mov.w	r2, #603979776	; 0x24000000
 80115f4:	601a      	str	r2, [r3, #0]
	} else {
		knl_lowmem_top = (UW*)SYSTEMAREA_TOP;
	}
	if((UW)knl_lowmem_top < (UW)&_end) {
 80115f6:	4b14      	ldr	r3, [pc, #80]	; (8011648 <knl_start_mtkernel+0xe0>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	461a      	mov	r2, r3
 80115fc:	4b13      	ldr	r3, [pc, #76]	; (801164c <knl_start_mtkernel+0xe4>)
 80115fe:	429a      	cmp	r2, r3
 8011600:	d202      	bcs.n	8011608 <knl_start_mtkernel+0xa0>
		knl_lowmem_top = (UW*)&_end;
 8011602:	4b11      	ldr	r3, [pc, #68]	; (8011648 <knl_start_mtkernel+0xe0>)
 8011604:	4a11      	ldr	r2, [pc, #68]	; (801164c <knl_start_mtkernel+0xe4>)
 8011606:	601a      	str	r2, [r3, #0]
	}

	if((SYSTEMAREA_END != 0) && (INTERNAL_RAM_END > CNF_SYSTEMAREA_END)) {
		knl_lowmem_limit = (UW*)(SYSTEMAREA_END - EXC_STACK_SIZE);
	} else {
		knl_lowmem_limit = (UW*)(INTERNAL_RAM_END - EXC_STACK_SIZE);
 8011608:	4b11      	ldr	r3, [pc, #68]	; (8011650 <knl_start_mtkernel+0xe8>)
 801160a:	4a12      	ldr	r2, [pc, #72]	; (8011654 <knl_start_mtkernel+0xec>)
 801160c:	601a      	str	r2, [r3, #0]
	}
#endif

#if USE_DEBUG_SYSMEMINFO
	knl_sysmem_top	= knl_lowmem_top;
 801160e:	4b0e      	ldr	r3, [pc, #56]	; (8011648 <knl_start_mtkernel+0xe0>)
 8011610:	681b      	ldr	r3, [r3, #0]
 8011612:	4a11      	ldr	r2, [pc, #68]	; (8011658 <knl_start_mtkernel+0xf0>)
 8011614:	6013      	str	r3, [r2, #0]
	knl_sysmem_end	= knl_lowmem_limit;
 8011616:	4b0e      	ldr	r3, [pc, #56]	; (8011650 <knl_start_mtkernel+0xe8>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	4a10      	ldr	r2, [pc, #64]	; (801165c <knl_start_mtkernel+0xf4>)
 801161c:	6013      	str	r3, [r2, #0]
#endif	// USE_DEBUG_MEMINFO
#endif	// USE_IMALLOC

	/* Startup Kernel */
	knl_main();		// *** No return ****/
 801161e:	f7fb fba5 	bl	800cd6c <knl_main>
	while(1);		// guard - infinite loops
 8011622:	e7fe      	b.n	8011622 <knl_start_mtkernel+0xba>
 8011624:	e000ed08 	.word	0xe000ed08
 8011628:	240010e0 	.word	0x240010e0
 801162c:	24000200 	.word	0x24000200
 8011630:	e000ed0c 	.word	0xe000ed0c
 8011634:	05fa0000 	.word	0x05fa0000
 8011638:	e000ed1c 	.word	0xe000ed1c
 801163c:	10f00000 	.word	0x10f00000
 8011640:	e000ed20 	.word	0xe000ed20
 8011644:	240010dc 	.word	0x240010dc
 8011648:	240010e4 	.word	0x240010e4
 801164c:	24003410 	.word	0x24003410
 8011650:	240010e8 	.word	0x240010e8
 8011654:	24050000 	.word	0x24050000
 8011658:	240010ec 	.word	0x240010ec
 801165c:	240010f0 	.word	0x240010f0

08011660 <knl_EnterTaskIndependent>:
{
 8011660:	b480      	push	{r7}
 8011662:	af00      	add	r7, sp, #0
	knl_taskindp++;
 8011664:	4b04      	ldr	r3, [pc, #16]	; (8011678 <knl_EnterTaskIndependent+0x18>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	3301      	adds	r3, #1
 801166a:	4a03      	ldr	r2, [pc, #12]	; (8011678 <knl_EnterTaskIndependent+0x18>)
 801166c:	6013      	str	r3, [r2, #0]
}
 801166e:	bf00      	nop
 8011670:	46bd      	mov	sp, r7
 8011672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011676:	4770      	bx	lr
 8011678:	240010d8 	.word	0x240010d8

0801167c <knl_LeaveTaskIndependent>:
{
 801167c:	b480      	push	{r7}
 801167e:	af00      	add	r7, sp, #0
	knl_taskindp--;
 8011680:	4b04      	ldr	r3, [pc, #16]	; (8011694 <knl_LeaveTaskIndependent+0x18>)
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	3b01      	subs	r3, #1
 8011686:	4a03      	ldr	r2, [pc, #12]	; (8011694 <knl_LeaveTaskIndependent+0x18>)
 8011688:	6013      	str	r3, [r2, #0]
}
 801168a:	bf00      	nop
 801168c:	46bd      	mov	sp, r7
 801168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011692:	4770      	bx	lr
 8011694:	240010d8 	.word	0x240010d8

08011698 <read_atr>:

/*---------------------------------------------------------------------*/
/* Attribute data control
 */
LOCAL ER read_atr(T_HAL_ADC_DCB *p_dcb, T_DEVREQ *req)
{
 8011698:	b480      	push	{r7}
 801169a:	b083      	sub	sp, #12
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
 80116a0:	6039      	str	r1, [r7, #0]
	return E_PAR;
 80116a2:	f06f 0310 	mvn.w	r3, #16
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	370c      	adds	r7, #12
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr

080116b2 <write_atr>:

LOCAL ER write_atr(T_HAL_ADC_DCB *p_dcb, T_DEVREQ *req)
{
 80116b2:	b480      	push	{r7}
 80116b4:	b083      	sub	sp, #12
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
 80116ba:	6039      	str	r1, [r7, #0]
	return E_PAR;
 80116bc:	f06f 0310 	mvn.w	r3, #16
}
 80116c0:	4618      	mov	r0, r3
 80116c2:	370c      	adds	r7, #12
 80116c4:	46bd      	mov	sp, r7
 80116c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ca:	4770      	bx	lr

080116cc <HAL_ADC_ConvCpltCallback>:
/* Device-specific data control
 */

/* HAL Callback functions */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b084      	sub	sp, #16
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
	T_HAL_ADC_DCB	*p_dcb;
	UINT	i;

	ENTER_TASK_INDEPENDENT
 80116d4:	f7ff ffc4 	bl	8011660 <knl_EnterTaskIndependent>

	for(i = 0; i < DEV_HAL_ADC_UNITNM; i++) {
 80116d8:	2300      	movs	r3, #0
 80116da:	60fb      	str	r3, [r7, #12]
 80116dc:	e01b      	b.n	8011716 <HAL_ADC_ConvCpltCallback+0x4a>
		p_dcb = get_dcb_ptr(i);
 80116de:	4a12      	ldr	r2, [pc, #72]	; (8011728 <HAL_ADC_ConvCpltCallback+0x5c>)
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116e6:	60bb      	str	r3, [r7, #8]
		if(p_dcb->hadc == hadc) {
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	687a      	ldr	r2, [r7, #4]
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d10e      	bne.n	8011710 <HAL_ADC_ConvCpltCallback+0x44>
			p_dcb->err = E_OK;
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	2200      	movs	r2, #0
 80116f6:	615a      	str	r2, [r3, #20]
			tk_set_flg(id_flgid, 1<< p_dcb->unit);
 80116f8:	4b0c      	ldr	r3, [pc, #48]	; (801172c <HAL_ADC_ConvCpltCallback+0x60>)
 80116fa:	681a      	ldr	r2, [r3, #0]
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	689b      	ldr	r3, [r3, #8]
 8011700:	2101      	movs	r1, #1
 8011702:	fa01 f303 	lsl.w	r3, r1, r3
 8011706:	4619      	mov	r1, r3
 8011708:	4610      	mov	r0, r2
 801170a:	f7fc fd49 	bl	800e1a0 <tk_set_flg>
			break;
 801170e:	e005      	b.n	801171c <HAL_ADC_ConvCpltCallback+0x50>
	for(i = 0; i < DEV_HAL_ADC_UNITNM; i++) {
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	3301      	adds	r3, #1
 8011714:	60fb      	str	r3, [r7, #12]
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2b02      	cmp	r3, #2
 801171a:	d9e0      	bls.n	80116de <HAL_ADC_ConvCpltCallback+0x12>
		}
	}

	LEAVE_TASK_INDEPENDENT
 801171c:	f7ff ffae 	bl	801167c <knl_LeaveTaskIndependent>
}
 8011720:	bf00      	nop
 8011722:	3710      	adds	r7, #16
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	240010f8 	.word	0x240010f8
 801172c:	240010f4 	.word	0x240010f4

08011730 <read_data>:

LOCAL ER read_data(T_HAL_ADC_DCB *p_dcb, T_DEVREQ *req)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b08a      	sub	sp, #40	; 0x28
 8011734:	af02      	add	r7, sp, #8
 8011736:	6078      	str	r0, [r7, #4]
 8011738:	6039      	str	r1, [r7, #0]
	uint32_t		value;
	HAL_StatusTypeDef	hal_sts;
	UINT			wflgptn, rflgptn;
	ER			err;

	if(req->size == 0) {
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	695b      	ldr	r3, [r3, #20]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d104      	bne.n	801174c <read_data+0x1c>
		req->asize = 1;
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	2201      	movs	r2, #1
 8011746:	61da      	str	r2, [r3, #28]
		return E_OK;
 8011748:	2300      	movs	r3, #0
 801174a:	e04c      	b.n	80117e6 <read_data+0xb6>
	}
	// Configure for A/DC
	err = dev_adc_setch(p_dcb->hadc, p_dcb->unit, req->start);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	6818      	ldr	r0, [r3, #0]
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	6899      	ldr	r1, [r3, #8]
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	691b      	ldr	r3, [r3, #16]
 8011758:	461a      	mov	r2, r3
 801175a:	f000 f963 	bl	8011a24 <dev_adc_setch>
 801175e:	61f8      	str	r0, [r7, #28]
	if(err != E_OK) return err;
 8011760:	69fb      	ldr	r3, [r7, #28]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d001      	beq.n	801176a <read_data+0x3a>
 8011766:	69fb      	ldr	r3, [r7, #28]
 8011768:	e03d      	b.n	80117e6 <read_data+0xb6>

	wflgptn = 1 << p_dcb->unit;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	689b      	ldr	r3, [r3, #8]
 801176e:	2201      	movs	r2, #1
 8011770:	fa02 f303 	lsl.w	r3, r2, r3
 8011774:	61bb      	str	r3, [r7, #24]
	tk_clr_flg(id_flgid, ~wflgptn);
 8011776:	4b1e      	ldr	r3, [pc, #120]	; (80117f0 <read_data+0xc0>)
 8011778:	681a      	ldr	r2, [r3, #0]
 801177a:	69bb      	ldr	r3, [r7, #24]
 801177c:	43db      	mvns	r3, r3
 801177e:	4619      	mov	r1, r3
 8011780:	4610      	mov	r0, r2
 8011782:	f7fc fd95 	bl	800e2b0 <tk_clr_flg>
	hal_sts = HAL_ADC_Start_IT(p_dcb->hadc);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	4618      	mov	r0, r3
 801178c:	f7f0 fdce 	bl	800232c <HAL_ADC_Start_IT>
 8011790:	4603      	mov	r3, r0
 8011792:	75fb      	strb	r3, [r7, #23]
	if(hal_sts != HAL_OK) return E_BUSY;
 8011794:	7dfb      	ldrb	r3, [r7, #23]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d002      	beq.n	80117a0 <read_data+0x70>
 801179a:	f06f 0340 	mvn.w	r3, #64	; 0x40
 801179e:	e022      	b.n	80117e6 <read_data+0xb6>

	err = tk_wai_flg(id_flgid, wflgptn, TWF_ANDW | TWF_BITCLR, &rflgptn, DEV_HAL_ADC_TMOUT);
 80117a0:	4b13      	ldr	r3, [pc, #76]	; (80117f0 <read_data+0xc0>)
 80117a2:	6818      	ldr	r0, [r3, #0]
 80117a4:	f107 030c 	add.w	r3, r7, #12
 80117a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80117ac:	9200      	str	r2, [sp, #0]
 80117ae:	2220      	movs	r2, #32
 80117b0:	69b9      	ldr	r1, [r7, #24]
 80117b2:	f7fc fde1 	bl	800e378 <tk_wai_flg>
 80117b6:	61f8      	str	r0, [r7, #28]
	if(err >= E_OK) {
 80117b8:	69fb      	ldr	r3, [r7, #28]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	db12      	blt.n	80117e4 <read_data+0xb4>
		err  = p_dcb->err;
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	695b      	ldr	r3, [r3, #20]
 80117c2:	61fb      	str	r3, [r7, #28]
		if(err >= E_OK) {
 80117c4:	69fb      	ldr	r3, [r7, #28]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	db0c      	blt.n	80117e4 <read_data+0xb4>
			value = HAL_ADC_GetValue(p_dcb->hadc);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	4618      	mov	r0, r3
 80117d0:	f7f0 feea 	bl	80025a8 <HAL_ADC_GetValue>
 80117d4:	6138      	str	r0, [r7, #16]
			*(UW*)(req->buf) = (UW)value;
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	699b      	ldr	r3, [r3, #24]
 80117da:	693a      	ldr	r2, [r7, #16]
 80117dc:	601a      	str	r2, [r3, #0]
			req->asize= 1;
 80117de:	683b      	ldr	r3, [r7, #0]
 80117e0:	2201      	movs	r2, #1
 80117e2:	61da      	str	r2, [r3, #28]
		}
	}

	return err;
 80117e4:	69fb      	ldr	r3, [r7, #28]
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3720      	adds	r7, #32
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}
 80117ee:	bf00      	nop
 80117f0:	240010f4 	.word	0x240010f4

080117f4 <write_data>:

LOCAL ER write_data(T_HAL_ADC_DCB *p_dcb, T_DEVREQ *req)
{
 80117f4:	b480      	push	{r7}
 80117f6:	b083      	sub	sp, #12
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	6039      	str	r1, [r7, #0]
	return E_RONLY;
 80117fe:	f06f 0342 	mvn.w	r3, #66	; 0x42
}
 8011802:	4618      	mov	r0, r3
 8011804:	370c      	adds	r7, #12
 8011806:	46bd      	mov	sp, r7
 8011808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180c:	4770      	bx	lr

0801180e <dev_adc_openfn>:
 */
/*
 * Open device
 */
LOCAL ER dev_adc_openfn( ID devid, UINT omode, T_MSDI *msdi)
{
 801180e:	b480      	push	{r7}
 8011810:	b087      	sub	sp, #28
 8011812:	af00      	add	r7, sp, #0
 8011814:	60f8      	str	r0, [r7, #12]
 8011816:	60b9      	str	r1, [r7, #8]
 8011818:	607a      	str	r2, [r7, #4]
	T_HAL_ADC_DCB	*p_dcb;

	p_dcb = (T_HAL_ADC_DCB*)(msdi->dmsdi.exinf);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	691b      	ldr	r3, [r3, #16]
 801181e:	617b      	str	r3, [r7, #20]
	if(p_dcb->hadc == NULL) return E_IO;
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d102      	bne.n	801182e <dev_adc_openfn+0x20>
 8011828:	f06f 0338 	mvn.w	r3, #56	; 0x38
 801182c:	e003      	b.n	8011836 <dev_adc_openfn+0x28>

	p_dcb->omode = omode;
 801182e:	697b      	ldr	r3, [r7, #20]
 8011830:	68ba      	ldr	r2, [r7, #8]
 8011832:	60da      	str	r2, [r3, #12]
	return E_OK;
 8011834:	2300      	movs	r3, #0
}
 8011836:	4618      	mov	r0, r3
 8011838:	371c      	adds	r7, #28
 801183a:	46bd      	mov	sp, r7
 801183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011840:	4770      	bx	lr

08011842 <dev_adc_closefn>:

/*
 * Close Device
 */
LOCAL ER dev_adc_closefn( ID devid, UINT option, T_MSDI *msdi)
{
 8011842:	b480      	push	{r7}
 8011844:	b085      	sub	sp, #20
 8011846:	af00      	add	r7, sp, #0
 8011848:	60f8      	str	r0, [r7, #12]
 801184a:	60b9      	str	r1, [r7, #8]
 801184c:	607a      	str	r2, [r7, #4]
	return E_OK;
 801184e:	2300      	movs	r3, #0
}
 8011850:	4618      	mov	r0, r3
 8011852:	3714      	adds	r7, #20
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr

0801185c <dev_adc_readfn>:

/*
 * Read Device
 */
LOCAL ER dev_adc_readfn( T_DEVREQ *req, T_MSDI *p_msdi)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
 8011864:	6039      	str	r1, [r7, #0]
	T_HAL_ADC_DCB	*p_dcb;
	ER		err;

	p_dcb = (T_HAL_ADC_DCB*)(p_msdi->dmsdi.exinf);
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	691b      	ldr	r3, [r3, #16]
 801186a:	60bb      	str	r3, [r7, #8]
	if(p_dcb->hadc == NULL) return E_IO;
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d102      	bne.n	801187a <dev_adc_readfn+0x1e>
 8011874:	f06f 0338 	mvn.w	r3, #56	; 0x38
 8011878:	e00f      	b.n	801189a <dev_adc_readfn+0x3e>

	if(req->start >= 0) {
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	691b      	ldr	r3, [r3, #16]
 801187e:	2b00      	cmp	r3, #0
 8011880:	db05      	blt.n	801188e <dev_adc_readfn+0x32>
		err = read_data( p_dcb, req);	// Device specific data
 8011882:	6879      	ldr	r1, [r7, #4]
 8011884:	68b8      	ldr	r0, [r7, #8]
 8011886:	f7ff ff53 	bl	8011730 <read_data>
 801188a:	60f8      	str	r0, [r7, #12]
 801188c:	e004      	b.n	8011898 <dev_adc_readfn+0x3c>
	} else {
		err = read_atr( p_dcb, req);	// Device attribute data
 801188e:	6879      	ldr	r1, [r7, #4]
 8011890:	68b8      	ldr	r0, [r7, #8]
 8011892:	f7ff ff01 	bl	8011698 <read_atr>
 8011896:	60f8      	str	r0, [r7, #12]
	}
	return err;
 8011898:	68fb      	ldr	r3, [r7, #12]
}
 801189a:	4618      	mov	r0, r3
 801189c:	3710      	adds	r7, #16
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}

080118a2 <dev_adc_writefn>:

/*
 * Write Device
 */
LOCAL ER dev_adc_writefn( T_DEVREQ *req, T_MSDI *p_msdi)
{
 80118a2:	b580      	push	{r7, lr}
 80118a4:	b084      	sub	sp, #16
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	6078      	str	r0, [r7, #4]
 80118aa:	6039      	str	r1, [r7, #0]
	T_HAL_ADC_DCB	*p_dcb;
	ER		rtn;

	p_dcb = (T_HAL_ADC_DCB*)(p_msdi->dmsdi.exinf);
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	691b      	ldr	r3, [r3, #16]
 80118b0:	60bb      	str	r3, [r7, #8]
	if(p_dcb->hadc == NULL) return E_IO;
 80118b2:	68bb      	ldr	r3, [r7, #8]
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d102      	bne.n	80118c0 <dev_adc_writefn+0x1e>
 80118ba:	f06f 0338 	mvn.w	r3, #56	; 0x38
 80118be:	e00f      	b.n	80118e0 <dev_adc_writefn+0x3e>

	if(req->start >= 0) {
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	691b      	ldr	r3, [r3, #16]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	db05      	blt.n	80118d4 <dev_adc_writefn+0x32>
		rtn = write_data( p_dcb, req);	// Device specific data
 80118c8:	6879      	ldr	r1, [r7, #4]
 80118ca:	68b8      	ldr	r0, [r7, #8]
 80118cc:	f7ff ff92 	bl	80117f4 <write_data>
 80118d0:	60f8      	str	r0, [r7, #12]
 80118d2:	e004      	b.n	80118de <dev_adc_writefn+0x3c>
	} else {
		rtn = write_atr( p_dcb, req);	// Device attribute data
 80118d4:	6879      	ldr	r1, [r7, #4]
 80118d6:	68b8      	ldr	r0, [r7, #8]
 80118d8:	f7ff feeb 	bl	80116b2 <write_atr>
 80118dc:	60f8      	str	r0, [r7, #12]
	}
	return rtn;
 80118de:	68fb      	ldr	r3, [r7, #12]
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	3710      	adds	r7, #16
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bd80      	pop	{r7, pc}

080118e8 <dev_adc_eventfn>:

/*
 * Event Device
 */
LOCAL ER dev_adc_eventfn( INT evttyp, void *evtinf, T_MSDI *msdi)
{
 80118e8:	b480      	push	{r7}
 80118ea:	b085      	sub	sp, #20
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	60f8      	str	r0, [r7, #12]
 80118f0:	60b9      	str	r1, [r7, #8]
 80118f2:	607a      	str	r2, [r7, #4]
	return E_NOSPT;
 80118f4:	f06f 0308 	mvn.w	r3, #8
}
 80118f8:	4618      	mov	r0, r3
 80118fa:	3714      	adds	r7, #20
 80118fc:	46bd      	mov	sp, r7
 80118fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011902:	4770      	bx	lr

08011904 <dev_init_hal_adc>:

/*----------------------------------------------------------------------
 * Device driver initialization and registration
 */
EXPORT ER dev_init_hal_adc( UW unit, ADC_HandleTypeDef *hadc )
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b094      	sub	sp, #80	; 0x50
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	6039      	str	r1, [r7, #0]
	T_MSDI		*p_msdi;
	T_DMSDI		dmsdi;
	ER		err;
	INT		i;

	if( unit >= DEV_HAL_ADC_UNITNM) return E_PAR;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	2b02      	cmp	r3, #2
 8011912:	d902      	bls.n	801191a <dev_init_hal_adc+0x16>
 8011914:	f06f 0310 	mvn.w	r3, #16
 8011918:	e06d      	b.n	80119f6 <dev_init_hal_adc+0xf2>

#if TK_SUPPORT_MEMLIB
	p_dcb = (T_HAL_ADC_DCB*)Kmalloc(sizeof(T_HAL_ADC_DCB));
 801191a:	2020      	movs	r0, #32
 801191c:	f7ff f99c 	bl	8010c58 <Kmalloc>
 8011920:	64b8      	str	r0, [r7, #72]	; 0x48
	if( p_dcb == NULL) return E_NOMEM;
 8011922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011924:	2b00      	cmp	r3, #0
 8011926:	d102      	bne.n	801192e <dev_init_hal_adc+0x2a>
 8011928:	f06f 0320 	mvn.w	r3, #32
 801192c:	e063      	b.n	80119f6 <dev_init_hal_adc+0xf2>
	dev_adc_cb[unit]	= p_dcb;
 801192e:	4934      	ldr	r1, [pc, #208]	; (8011a00 <dev_init_hal_adc+0xfc>)
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#else
	p_dcb = &dev_adc_cb[unit];
#endif

	id_flgid = tk_cre_flg(&id_flg);
 8011938:	4832      	ldr	r0, [pc, #200]	; (8011a04 <dev_init_hal_adc+0x100>)
 801193a:	f7fc fb81 	bl	800e040 <tk_cre_flg>
 801193e:	4603      	mov	r3, r0
 8011940:	4a31      	ldr	r2, [pc, #196]	; (8011a08 <dev_init_hal_adc+0x104>)
 8011942:	6013      	str	r3, [r2, #0]
	if(id_flgid <= E_OK) {
 8011944:	4b30      	ldr	r3, [pc, #192]	; (8011a08 <dev_init_hal_adc+0x104>)
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	2b00      	cmp	r3, #0
 801194a:	dc03      	bgt.n	8011954 <dev_init_hal_adc+0x50>
		err = (ER)id_flgid;
 801194c:	4b2e      	ldr	r3, [pc, #184]	; (8011a08 <dev_init_hal_adc+0x104>)
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	64fb      	str	r3, [r7, #76]	; 0x4c
		goto err_1;
 8011952:	e04c      	b.n	80119ee <dev_init_hal_adc+0xea>
	}

	/* Device registration information */
	dmsdi.exinf	= p_dcb;
 8011954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011956:	60bb      	str	r3, [r7, #8]
	dmsdi.drvatr	= 0;			/* Driver attributes */
 8011958:	2300      	movs	r3, #0
 801195a:	61bb      	str	r3, [r7, #24]
	dmsdi.devatr	= TDK_UNDEF;		/* Device attributes */
 801195c:	2300      	movs	r3, #0
 801195e:	61fb      	str	r3, [r7, #28]
	dmsdi.nsub	= 0;			/* Number of sub units */
 8011960:	2300      	movs	r3, #0
 8011962:	623b      	str	r3, [r7, #32]
	dmsdi.blksz	= 1;			/* Unique data block size (-1 = unknown) */
 8011964:	2301      	movs	r3, #1
 8011966:	627b      	str	r3, [r7, #36]	; 0x24
	dmsdi.openfn	= dev_adc_openfn;
 8011968:	4b28      	ldr	r3, [pc, #160]	; (8011a0c <dev_init_hal_adc+0x108>)
 801196a:	62bb      	str	r3, [r7, #40]	; 0x28
	dmsdi.closefn	= dev_adc_closefn;
 801196c:	4b28      	ldr	r3, [pc, #160]	; (8011a10 <dev_init_hal_adc+0x10c>)
 801196e:	62fb      	str	r3, [r7, #44]	; 0x2c
	dmsdi.readfn	= dev_adc_readfn;
 8011970:	4b28      	ldr	r3, [pc, #160]	; (8011a14 <dev_init_hal_adc+0x110>)
 8011972:	633b      	str	r3, [r7, #48]	; 0x30
	dmsdi.writefn	= dev_adc_writefn;
 8011974:	4b28      	ldr	r3, [pc, #160]	; (8011a18 <dev_init_hal_adc+0x114>)
 8011976:	637b      	str	r3, [r7, #52]	; 0x34
	dmsdi.eventfn	= dev_adc_eventfn;
 8011978:	4b28      	ldr	r3, [pc, #160]	; (8011a1c <dev_init_hal_adc+0x118>)
 801197a:	63bb      	str	r3, [r7, #56]	; 0x38
	
	knl_strcpy( (char*)dmsdi.devnm, DEVNAME_HAL_ADC);
 801197c:	f107 0308 	add.w	r3, r7, #8
 8011980:	3304      	adds	r3, #4
 8011982:	4927      	ldr	r1, [pc, #156]	; (8011a20 <dev_init_hal_adc+0x11c>)
 8011984:	4618      	mov	r0, r3
 8011986:	f7fe ff38 	bl	80107fa <knl_strcpy>
	i = knl_strlen(DEVNAME_HAL_ADC);
 801198a:	4825      	ldr	r0, [pc, #148]	; (8011a20 <dev_init_hal_adc+0x11c>)
 801198c:	f7fe ff24 	bl	80107d8 <knl_strlen>
 8011990:	6478      	str	r0, [r7, #68]	; 0x44
	dmsdi.devnm[i] = (UB)('a' + unit);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	b2db      	uxtb	r3, r3
 8011996:	3361      	adds	r3, #97	; 0x61
 8011998:	b2d9      	uxtb	r1, r3
 801199a:	f107 020c 	add.w	r2, r7, #12
 801199e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119a0:	4413      	add	r3, r2
 80119a2:	460a      	mov	r2, r1
 80119a4:	701a      	strb	r2, [r3, #0]
	dmsdi.devnm[i+1] = 0;
 80119a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80119a8:	3301      	adds	r3, #1
 80119aa:	3350      	adds	r3, #80	; 0x50
 80119ac:	443b      	add	r3, r7
 80119ae:	2200      	movs	r2, #0
 80119b0:	f803 2c44 	strb.w	r2, [r3, #-68]

	err = msdi_def_dev( &dmsdi, &idev, &p_msdi);
 80119b4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80119b8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80119bc:	f107 0308 	add.w	r3, r7, #8
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7fb f907 	bl	800cbd4 <msdi_def_dev>
 80119c6:	64f8      	str	r0, [r7, #76]	; 0x4c
	if(err != E_OK) goto err_1;
 80119c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d10e      	bne.n	80119ec <dev_init_hal_adc+0xe8>

	p_dcb->hadc	= hadc;
 80119ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119d0:	683a      	ldr	r2, [r7, #0]
 80119d2:	601a      	str	r2, [r3, #0]
	p_dcb->devid	= p_msdi->devid;
 80119d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119d6:	681a      	ldr	r2, [r3, #0]
 80119d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119da:	605a      	str	r2, [r3, #4]
	p_dcb->unit	= unit;
 80119dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119de:	687a      	ldr	r2, [r7, #4]
 80119e0:	609a      	str	r2, [r3, #8]
	p_dcb->evtmbfid	= idev.evtmbfid;
 80119e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80119e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119e6:	619a      	str	r2, [r3, #24]

	return E_OK;
 80119e8:	2300      	movs	r3, #0
 80119ea:	e004      	b.n	80119f6 <dev_init_hal_adc+0xf2>
	if(err != E_OK) goto err_1;
 80119ec:	bf00      	nop

err_1:
#if TK_SUPPORT_MEMLIB
	Kfree(p_dcb);
 80119ee:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80119f0:	f7ff f93f 	bl	8010c72 <Kfree>
#endif
	return err;
 80119f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	3750      	adds	r7, #80	; 0x50
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}
 80119fe:	bf00      	nop
 8011a00:	240010f8 	.word	0x240010f8
 8011a04:	2400002c 	.word	0x2400002c
 8011a08:	240010f4 	.word	0x240010f4
 8011a0c:	0801180f 	.word	0x0801180f
 8011a10:	08011843 	.word	0x08011843
 8011a14:	0801185d 	.word	0x0801185d
 8011a18:	080118a3 	.word	0x080118a3
 8011a1c:	080118e9 	.word	0x080118e9
 8011a20:	08012a0c 	.word	0x08012a0c

08011a24 <dev_adc_setch>:
	ADC_CHANNEL_12, ADC_CHANNEL_13, ADC_CHANNEL_14, ADC_CHANNEL_15, ADC_CHANNEL_16, ADC_CHANNEL_17,	
	ADC_CHANNEL_18, ADC_CHANNEL_19
};

EXPORT ER dev_adc_setch(ADC_HandleTypeDef *hadc, UW unit, W start)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b08e      	sub	sp, #56	; 0x38
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	60f8      	str	r0, [r7, #12]
 8011a2c:	60b9      	str	r1, [r7, #8]
 8011a2e:	607a      	str	r2, [r7, #4]
	ADC_ChannelConfTypeDef	sConfig = {0};
 8011a30:	f107 0310 	add.w	r3, r7, #16
 8011a34:	2224      	movs	r2, #36	; 0x24
 8011a36:	2100      	movs	r1, #0
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f000 fe31 	bl	80126a0 <memset>
	HAL_StatusTypeDef	hal_sts;

	if(start >= sizeof(adc_cfg_ch)/sizeof(UW)) return E_PAR;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	2b13      	cmp	r3, #19
 8011a42:	d902      	bls.n	8011a4a <dev_adc_setch+0x26>
 8011a44:	f06f 0310 	mvn.w	r3, #16
 8011a48:	e03b      	b.n	8011ac2 <dev_adc_setch+0x9e>

	sConfig.Channel = adc_cfg_ch[start];
 8011a4a:	4a20      	ldr	r2, [pc, #128]	; (8011acc <dev_adc_setch+0xa8>)
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a52:	613b      	str	r3, [r7, #16]
	if(unit == 0) {		// ADC1
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d10e      	bne.n	8011a78 <dev_adc_setch+0x54>
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8011a5a:	2306      	movs	r3, #6
 8011a5c:	617b      	str	r3, [r7, #20]
		sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	61bb      	str	r3, [r7, #24]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8011a62:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8011a66:	61fb      	str	r3, [r7, #28]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8011a68:	2304      	movs	r3, #4
 8011a6a:	623b      	str	r3, [r7, #32]
		sConfig.Offset = 0;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	627b      	str	r3, [r7, #36]	; 0x24
		sConfig.OffsetSignedSaturation = DISABLE;
 8011a70:	2300      	movs	r3, #0
 8011a72:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8011a76:	e013      	b.n	8011aa0 <dev_adc_setch+0x7c>
	} else if(unit == 2) {		// ADC3
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	2b02      	cmp	r3, #2
 8011a7c:	d10d      	bne.n	8011a9a <dev_adc_setch+0x76>
		sConfig.Rank = ADC_REGULAR_RANK_1;
 8011a7e:	2306      	movs	r3, #6
 8011a80:	617b      	str	r3, [r7, #20]
		sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8011a82:	2300      	movs	r3, #0
 8011a84:	61bb      	str	r3, [r7, #24]
		sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8011a86:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8011a8a:	61fb      	str	r3, [r7, #28]
		sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8011a8c:	2304      	movs	r3, #4
 8011a8e:	623b      	str	r3, [r7, #32]
		sConfig.Offset = 0;
 8011a90:	2300      	movs	r3, #0
 8011a92:	627b      	str	r3, [r7, #36]	; 0x24
		sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8011a94:	2300      	movs	r3, #0
 8011a96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a98:	e002      	b.n	8011aa0 <dev_adc_setch+0x7c>
	} else {
		return E_IO;
 8011a9a:	f06f 0338 	mvn.w	r3, #56	; 0x38
 8011a9e:	e010      	b.n	8011ac2 <dev_adc_setch+0x9e>
	}

	hal_sts = HAL_ADC_ConfigChannel(hadc, &sConfig);
 8011aa0:	f107 0310 	add.w	r3, r7, #16
 8011aa4:	4619      	mov	r1, r3
 8011aa6:	68f8      	ldr	r0, [r7, #12]
 8011aa8:	f7f0 ffda 	bl	8002a60 <HAL_ADC_ConfigChannel>
 8011aac:	4603      	mov	r3, r0
 8011aae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	return (hal_sts == HAL_OK)?E_OK:E_PAR;
 8011ab2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d101      	bne.n	8011abe <dev_adc_setch+0x9a>
 8011aba:	2300      	movs	r3, #0
 8011abc:	e001      	b.n	8011ac2 <dev_adc_setch+0x9e>
 8011abe:	f06f 0310 	mvn.w	r3, #16
}
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	3738      	adds	r7, #56	; 0x38
 8011ac6:	46bd      	mov	sp, r7
 8011ac8:	bd80      	pop	{r7, pc}
 8011aca:	bf00      	nop
 8011acc:	08012b44 	.word	0x08012b44

08011ad0 <knl_EnterTaskIndependent>:
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	af00      	add	r7, sp, #0
	knl_taskindp++;
 8011ad4:	4b04      	ldr	r3, [pc, #16]	; (8011ae8 <knl_EnterTaskIndependent+0x18>)
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	3301      	adds	r3, #1
 8011ada:	4a03      	ldr	r2, [pc, #12]	; (8011ae8 <knl_EnterTaskIndependent+0x18>)
 8011adc:	6013      	str	r3, [r2, #0]
}
 8011ade:	bf00      	nop
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae6:	4770      	bx	lr
 8011ae8:	240010d8 	.word	0x240010d8

08011aec <knl_LeaveTaskIndependent>:
{
 8011aec:	b480      	push	{r7}
 8011aee:	af00      	add	r7, sp, #0
	knl_taskindp--;
 8011af0:	4b04      	ldr	r3, [pc, #16]	; (8011b04 <knl_LeaveTaskIndependent+0x18>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	3b01      	subs	r3, #1
 8011af6:	4a03      	ldr	r2, [pc, #12]	; (8011b04 <knl_LeaveTaskIndependent+0x18>)
 8011af8:	6013      	str	r3, [r2, #0]
}
 8011afa:	bf00      	nop
 8011afc:	46bd      	mov	sp, r7
 8011afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b02:	4770      	bx	lr
 8011b04:	240010d8 	.word	0x240010d8

08011b08 <read_atr>:

/*---------------------------------------------------------------------*/
/* Attribute data control
 */
LOCAL ER read_atr(T_HAL_I2C_DCB *p_dcb, T_DEVREQ *req)
{
 8011b08:	b480      	push	{r7}
 8011b0a:	b083      	sub	sp, #12
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	6039      	str	r1, [r7, #0]
	if((req->start >= TDN_HAL_I2C_MODE) && (req->start <= TDN_HAL_I2C_MAX)) return E_PAR;
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	691b      	ldr	r3, [r3, #16]
 8011b16:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8011b1a:	db07      	blt.n	8011b2c <read_atr+0x24>
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	691b      	ldr	r3, [r3, #16]
 8011b20:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8011b24:	da02      	bge.n	8011b2c <read_atr+0x24>
 8011b26:	f06f 0310 	mvn.w	r3, #16
 8011b2a:	e027      	b.n	8011b7c <read_atr+0x74>

	req->asize = sizeof(UW);
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	2204      	movs	r2, #4
 8011b30:	61da      	str	r2, [r3, #28]
	
	if(req->size == 0) return E_OK;
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	695b      	ldr	r3, [r3, #20]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d101      	bne.n	8011b3e <read_atr+0x36>
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	e01e      	b.n	8011b7c <read_atr+0x74>
	else if(req->size != sizeof(UW)) return E_PAR;
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	695b      	ldr	r3, [r3, #20]
 8011b42:	2b04      	cmp	r3, #4
 8011b44:	d002      	beq.n	8011b4c <read_atr+0x44>
 8011b46:	f06f 0310 	mvn.w	r3, #16
 8011b4a:	e017      	b.n	8011b7c <read_atr+0x74>

	switch(req->start) {
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	691b      	ldr	r3, [r3, #16]
 8011b50:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8011b54:	d008      	beq.n	8011b68 <read_atr+0x60>
 8011b56:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8011b5a:	d10b      	bne.n	8011b74 <read_atr+0x6c>
	case TDN_HAL_I2C_MODE:
		*(UW*)req->buf = p_dcb->dmode;
 8011b5c:	683b      	ldr	r3, [r7, #0]
 8011b5e:	699b      	ldr	r3, [r3, #24]
 8011b60:	687a      	ldr	r2, [r7, #4]
 8011b62:	6992      	ldr	r2, [r2, #24]
 8011b64:	601a      	str	r2, [r3, #0]
		break;
 8011b66:	e008      	b.n	8011b7a <read_atr+0x72>
	case TDN_HAL_I2C_TADR:
		*(UW*)req->buf = p_dcb->tadr;
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	699b      	ldr	r3, [r3, #24]
 8011b6c:	687a      	ldr	r2, [r7, #4]
 8011b6e:	69d2      	ldr	r2, [r2, #28]
 8011b70:	601a      	str	r2, [r3, #0]
		break;
 8011b72:	e002      	b.n	8011b7a <read_atr+0x72>
	default:
		return E_PAR;
 8011b74:	f06f 0310 	mvn.w	r3, #16
 8011b78:	e000      	b.n	8011b7c <read_atr+0x74>
	}
	return E_OK;
 8011b7a:	2300      	movs	r3, #0
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	370c      	adds	r7, #12
 8011b80:	46bd      	mov	sp, r7
 8011b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b86:	4770      	bx	lr

08011b88 <write_atr>:

LOCAL ER write_atr(T_HAL_I2C_DCB *p_dcb, T_DEVREQ *req)
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b085      	sub	sp, #20
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
 8011b90:	6039      	str	r1, [r7, #0]
	UW	data;

	if(req->size != sizeof(UW)) return E_PAR;
 8011b92:	683b      	ldr	r3, [r7, #0]
 8011b94:	695b      	ldr	r3, [r3, #20]
 8011b96:	2b04      	cmp	r3, #4
 8011b98:	d002      	beq.n	8011ba0 <write_atr+0x18>
 8011b9a:	f06f 0310 	mvn.w	r3, #16
 8011b9e:	e020      	b.n	8011be2 <write_atr+0x5a>
	data = *(UW*)req->buf;
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	699b      	ldr	r3, [r3, #24]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	60fb      	str	r3, [r7, #12]

	switch(req->start) {
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	691b      	ldr	r3, [r3, #16]
 8011bac:	f113 0f65 	cmn.w	r3, #101	; 0x65
 8011bb0:	d00c      	beq.n	8011bcc <write_atr+0x44>
 8011bb2:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8011bb6:	d10d      	bne.n	8011bd4 <write_atr+0x4c>
	case TDN_HAL_I2C_MODE:
		if(data <HAL_I2C_MODE_CNT || data > HAL_I2C_MODE_TAR) return E_PAR;
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	2b01      	cmp	r3, #1
 8011bbc:	d902      	bls.n	8011bc4 <write_atr+0x3c>
 8011bbe:	f06f 0310 	mvn.w	r3, #16
 8011bc2:	e00e      	b.n	8011be2 <write_atr+0x5a>
		p_dcb->dmode = data;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	68fa      	ldr	r2, [r7, #12]
 8011bc8:	619a      	str	r2, [r3, #24]
		break;
 8011bca:	e006      	b.n	8011bda <write_atr+0x52>
	case TDN_HAL_I2C_TADR:
		p_dcb->tadr = data;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	68fa      	ldr	r2, [r7, #12]
 8011bd0:	61da      	str	r2, [r3, #28]
		break;
 8011bd2:	e002      	b.n	8011bda <write_atr+0x52>
	default:
		return E_PAR;
 8011bd4:	f06f 0310 	mvn.w	r3, #16
 8011bd8:	e003      	b.n	8011be2 <write_atr+0x5a>
	}
	req->asize = sizeof(UW);
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	2204      	movs	r2, #4
 8011bde:	61da      	str	r2, [r3, #28]
	return E_OK;
 8011be0:	2300      	movs	r3, #0
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3714      	adds	r7, #20
 8011be6:	46bd      	mov	sp, r7
 8011be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bec:	4770      	bx	lr
	...

08011bf0 <HAL_I2C_Callback>:
/*Device-specific data control
 */

/* HAL Callback functions */
LOCAL void HAL_I2C_Callback(I2C_HandleTypeDef *hi2c, ER err)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b084      	sub	sp, #16
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	6039      	str	r1, [r7, #0]
	T_HAL_I2C_DCB	*p_dcb;
	UINT	i;

	ENTER_TASK_INDEPENDENT
 8011bfa:	f7ff ff69 	bl	8011ad0 <knl_EnterTaskIndependent>

	for(i = 0; i < DEV_HAL_I2C_UNITNM; i++) {
 8011bfe:	2300      	movs	r3, #0
 8011c00:	60fb      	str	r3, [r7, #12]
 8011c02:	e01b      	b.n	8011c3c <HAL_I2C_Callback+0x4c>
		p_dcb = get_dcb_ptr(i);
 8011c04:	4a12      	ldr	r2, [pc, #72]	; (8011c50 <HAL_I2C_Callback+0x60>)
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c0c:	60bb      	str	r3, [r7, #8]
		if(p_dcb->hi2c == hi2c) {
 8011c0e:	68bb      	ldr	r3, [r7, #8]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	687a      	ldr	r2, [r7, #4]
 8011c14:	429a      	cmp	r2, r3
 8011c16:	d10e      	bne.n	8011c36 <HAL_I2C_Callback+0x46>
			p_dcb->err = err;
 8011c18:	68bb      	ldr	r3, [r7, #8]
 8011c1a:	683a      	ldr	r2, [r7, #0]
 8011c1c:	611a      	str	r2, [r3, #16]
			tk_set_flg(id_flgid, 1<< p_dcb->unit);
 8011c1e:	4b0d      	ldr	r3, [pc, #52]	; (8011c54 <HAL_I2C_Callback+0x64>)
 8011c20:	681a      	ldr	r2, [r3, #0]
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	68db      	ldr	r3, [r3, #12]
 8011c26:	2101      	movs	r1, #1
 8011c28:	fa01 f303 	lsl.w	r3, r1, r3
 8011c2c:	4619      	mov	r1, r3
 8011c2e:	4610      	mov	r0, r2
 8011c30:	f7fc fab6 	bl	800e1a0 <tk_set_flg>
			break;
 8011c34:	e005      	b.n	8011c42 <HAL_I2C_Callback+0x52>
	for(i = 0; i < DEV_HAL_I2C_UNITNM; i++) {
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	3301      	adds	r3, #1
 8011c3a:	60fb      	str	r3, [r7, #12]
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	2b04      	cmp	r3, #4
 8011c40:	d9e0      	bls.n	8011c04 <HAL_I2C_Callback+0x14>
		}
	}

	LEAVE_TASK_INDEPENDENT
 8011c42:	f7ff ff53 	bl	8011aec <knl_LeaveTaskIndependent>
}
 8011c46:	bf00      	nop
 8011c48:	3710      	adds	r7, #16
 8011c4a:	46bd      	mov	sp, r7
 8011c4c:	bd80      	pop	{r7, pc}
 8011c4e:	bf00      	nop
 8011c50:	24001108 	.word	0x24001108
 8011c54:	24001104 	.word	0x24001104

08011c58 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Callback(hi2c, E_OK);
 8011c60:	2100      	movs	r1, #0
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f7ff ffc4 	bl	8011bf0 <HAL_I2C_Callback>
}
 8011c68:	bf00      	nop
 8011c6a:	3708      	adds	r7, #8
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}

08011c70 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011c70:	b580      	push	{r7, lr}
 8011c72:	b082      	sub	sp, #8
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
	HAL_I2C_Callback(hi2c, E_OK);
 8011c78:	2100      	movs	r1, #0
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f7ff ffb8 	bl	8011bf0 <HAL_I2C_Callback>
}
 8011c80:	bf00      	nop
 8011c82:	3708      	adds	r7, #8
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Callback(hi2c, E_OK);
 8011c90:	2100      	movs	r1, #0
 8011c92:	6878      	ldr	r0, [r7, #4]
 8011c94:	f7ff ffac 	bl	8011bf0 <HAL_I2C_Callback>
}
 8011c98:	bf00      	nop
 8011c9a:	3708      	adds	r7, #8
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}

08011ca0 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Callback(hi2c, E_OK);
 8011ca8:	2100      	movs	r1, #0
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f7ff ffa0 	bl	8011bf0 <HAL_I2C_Callback>
}
 8011cb0:	bf00      	nop
 8011cb2:	3708      	adds	r7, #8
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	bd80      	pop	{r7, pc}

08011cb8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b082      	sub	sp, #8
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	6078      	str	r0, [r7, #4]
	HAL_I2C_Callback(hi2c, E_OK);
 8011cc0:	2100      	movs	r1, #0
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f7ff ff94 	bl	8011bf0 <HAL_I2C_Callback>
}
 8011cc8:	bf00      	nop
 8011cca:	3708      	adds	r7, #8
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}

08011cd0 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b082      	sub	sp, #8
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Callback(hi2c, E_OK);
 8011cd8:	2100      	movs	r1, #0
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f7ff ff88 	bl	8011bf0 <HAL_I2C_Callback>
}
 8011ce0:	bf00      	nop
 8011ce2:	3708      	adds	r7, #8
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}

08011ce8 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b082      	sub	sp, #8
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
	HAL_I2C_Callback(hi2c, E_IO);
 8011cf0:	f06f 0138 	mvn.w	r1, #56	; 0x38
 8011cf4:	6878      	ldr	r0, [r7, #4]
 8011cf6:	f7ff ff7b 	bl	8011bf0 <HAL_I2C_Callback>
}
 8011cfa:	bf00      	nop
 8011cfc:	3708      	adds	r7, #8
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <HAL_I2C_AbortCpltCallback>:

void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8011d02:	b580      	push	{r7, lr}
 8011d04:	b082      	sub	sp, #8
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6078      	str	r0, [r7, #4]
	HAL_I2C_Callback(hi2c, E_ABORT);
 8011d0a:	f06f 0141 	mvn.w	r1, #65	; 0x41
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7ff ff6e 	bl	8011bf0 <HAL_I2C_Callback>
}
 8011d14:	bf00      	nop
 8011d16:	3708      	adds	r7, #8
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}

08011d1c <read_data>:

LOCAL ER read_data(T_HAL_I2C_DCB *p_dcb, T_DEVREQ *req)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b088      	sub	sp, #32
 8011d20:	af02      	add	r7, sp, #8
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef	hal_sts;
	UINT			wflgptn, rflgptn;
	ER			err;

	wflgptn = 1 << p_dcb->unit;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	68db      	ldr	r3, [r3, #12]
 8011d2a:	2201      	movs	r2, #1
 8011d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8011d30:	60fb      	str	r3, [r7, #12]
	tk_clr_flg(id_flgid, ~wflgptn);
 8011d32:	4b2a      	ldr	r3, [pc, #168]	; (8011ddc <read_data+0xc0>)
 8011d34:	681a      	ldr	r2, [r3, #0]
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	43db      	mvns	r3, r3
 8011d3a:	4619      	mov	r1, r3
 8011d3c:	4610      	mov	r0, r2
 8011d3e:	f7fc fab7 	bl	800e2b0 <tk_clr_flg>

	switch(p_dcb->dmode) {
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	699b      	ldr	r3, [r3, #24]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d002      	beq.n	8011d50 <read_data+0x34>
 8011d4a:	2b01      	cmp	r3, #1
 8011d4c:	d011      	beq.n	8011d72 <read_data+0x56>
 8011d4e:	e01d      	b.n	8011d8c <read_data+0x70>
	case HAL_I2C_MODE_CNT:
		hal_sts = HAL_I2C_Master_Receive_IT(
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6818      	ldr	r0, [r3, #0]
			p_dcb->hi2c,		// I2C_Handle
			(req->start)<<1,	// Target device address
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	691b      	ldr	r3, [r3, #16]
		hal_sts = HAL_I2C_Master_Receive_IT(
 8011d58:	b29b      	uxth	r3, r3
 8011d5a:	005b      	lsls	r3, r3, #1
 8011d5c:	b299      	uxth	r1, r3
			req->buf,		// Pointer to data buffer
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	699a      	ldr	r2, [r3, #24]
			req->size		// Amount of data to be sent
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	695b      	ldr	r3, [r3, #20]
		hal_sts = HAL_I2C_Master_Receive_IT(
 8011d66:	b29b      	uxth	r3, r3
 8011d68:	f7f3 f8ea 	bl	8004f40 <HAL_I2C_Master_Receive_IT>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	75fb      	strb	r3, [r7, #23]
		);
		break;
 8011d70:	e00f      	b.n	8011d92 <read_data+0x76>
	case HAL_I2C_MODE_TAR:
		hal_sts = HAL_I2C_Slave_Receive_IT(
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6818      	ldr	r0, [r3, #0]
			p_dcb->hi2c,		// I2C_Handle
			req->buf,		// Pointer to data buffer
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	6999      	ldr	r1, [r3, #24]
			req->size		// Amount of data to be sent
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	695b      	ldr	r3, [r3, #20]
		hal_sts = HAL_I2C_Slave_Receive_IT(
 8011d7e:	b29b      	uxth	r3, r3
 8011d80:	461a      	mov	r2, r3
 8011d82:	f7f3 f9bb 	bl	80050fc <HAL_I2C_Slave_Receive_IT>
 8011d86:	4603      	mov	r3, r0
 8011d88:	75fb      	strb	r3, [r7, #23]
		);
		break;
 8011d8a:	e002      	b.n	8011d92 <read_data+0x76>
	default:
		return E_SYS;
 8011d8c:	f06f 0304 	mvn.w	r3, #4
 8011d90:	e01f      	b.n	8011dd2 <read_data+0xb6>
	}
	if(hal_sts != HAL_OK) return E_BUSY;
 8011d92:	7dfb      	ldrb	r3, [r7, #23]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d002      	beq.n	8011d9e <read_data+0x82>
 8011d98:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8011d9c:	e019      	b.n	8011dd2 <read_data+0xb6>

	err = tk_wai_flg(id_flgid, wflgptn, TWF_ANDW | TWF_BITCLR, &rflgptn, DEV_HAL_I2C_TMOUT);
 8011d9e:	4b0f      	ldr	r3, [pc, #60]	; (8011ddc <read_data+0xc0>)
 8011da0:	6818      	ldr	r0, [r3, #0]
 8011da2:	f107 0308 	add.w	r3, r7, #8
 8011da6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8011daa:	9200      	str	r2, [sp, #0]
 8011dac:	2220      	movs	r2, #32
 8011dae:	68f9      	ldr	r1, [r7, #12]
 8011db0:	f7fc fae2 	bl	800e378 <tk_wai_flg>
 8011db4:	6138      	str	r0, [r7, #16]
	if(err >= E_OK) {
 8011db6:	693b      	ldr	r3, [r7, #16]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	db09      	blt.n	8011dd0 <read_data+0xb4>
		err  = p_dcb->err;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	691b      	ldr	r3, [r3, #16]
 8011dc0:	613b      	str	r3, [r7, #16]
		if(err >= E_OK) req->asize = req->size;
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	db03      	blt.n	8011dd0 <read_data+0xb4>
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	695a      	ldr	r2, [r3, #20]
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	61da      	str	r2, [r3, #28]
	}

	return err;
 8011dd0:	693b      	ldr	r3, [r7, #16]
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3718      	adds	r7, #24
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	24001104 	.word	0x24001104

08011de0 <write_data>:

LOCAL ER write_data(T_HAL_I2C_DCB *p_dcb, T_DEVREQ *req)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b088      	sub	sp, #32
 8011de4:	af02      	add	r7, sp, #8
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef	hal_sts;
	UINT			wflgptn, rflgptn;
	ER			err;

	wflgptn = 1 << p_dcb->unit;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	68db      	ldr	r3, [r3, #12]
 8011dee:	2201      	movs	r2, #1
 8011df0:	fa02 f303 	lsl.w	r3, r2, r3
 8011df4:	60fb      	str	r3, [r7, #12]
	tk_clr_flg(id_flgid, ~wflgptn);
 8011df6:	4b2a      	ldr	r3, [pc, #168]	; (8011ea0 <write_data+0xc0>)
 8011df8:	681a      	ldr	r2, [r3, #0]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	43db      	mvns	r3, r3
 8011dfe:	4619      	mov	r1, r3
 8011e00:	4610      	mov	r0, r2
 8011e02:	f7fc fa55 	bl	800e2b0 <tk_clr_flg>

	switch(p_dcb->dmode) {
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	699b      	ldr	r3, [r3, #24]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d002      	beq.n	8011e14 <write_data+0x34>
 8011e0e:	2b01      	cmp	r3, #1
 8011e10:	d011      	beq.n	8011e36 <write_data+0x56>
 8011e12:	e01d      	b.n	8011e50 <write_data+0x70>
	case HAL_I2C_MODE_CNT:
		hal_sts = HAL_I2C_Master_Transmit_IT(
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6818      	ldr	r0, [r3, #0]
			p_dcb->hi2c,		// I2C_Handle
			(req->start)<<1,	// Target device address
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	691b      	ldr	r3, [r3, #16]
		hal_sts = HAL_I2C_Master_Transmit_IT(
 8011e1c:	b29b      	uxth	r3, r3
 8011e1e:	005b      	lsls	r3, r3, #1
 8011e20:	b299      	uxth	r1, r3
			req->buf,		// Pointer to data buffer
 8011e22:	683b      	ldr	r3, [r7, #0]
 8011e24:	699a      	ldr	r2, [r3, #24]
			req->size		// Amount of data to be sent
 8011e26:	683b      	ldr	r3, [r7, #0]
 8011e28:	695b      	ldr	r3, [r3, #20]
		hal_sts = HAL_I2C_Master_Transmit_IT(
 8011e2a:	b29b      	uxth	r3, r3
 8011e2c:	f7f2 fff0 	bl	8004e10 <HAL_I2C_Master_Transmit_IT>
 8011e30:	4603      	mov	r3, r0
 8011e32:	75fb      	strb	r3, [r7, #23]
		);
		break;
 8011e34:	e00f      	b.n	8011e56 <write_data+0x76>
	case HAL_I2C_MODE_TAR:
		hal_sts = HAL_I2C_Slave_Transmit_IT(
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	6818      	ldr	r0, [r3, #0]
			p_dcb->hi2c,		// I2C_Handle
			req->buf,		// Pointer to data buffer
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	6999      	ldr	r1, [r3, #24]
			req->size		// Amount of data to be sent
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	695b      	ldr	r3, [r3, #20]
		hal_sts = HAL_I2C_Slave_Transmit_IT(
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	461a      	mov	r2, r3
 8011e46:	f7f3 f8eb 	bl	8005020 <HAL_I2C_Slave_Transmit_IT>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	75fb      	strb	r3, [r7, #23]
		);
		break;
 8011e4e:	e002      	b.n	8011e56 <write_data+0x76>
	default:
		return E_SYS;
 8011e50:	f06f 0304 	mvn.w	r3, #4
 8011e54:	e01f      	b.n	8011e96 <write_data+0xb6>
	}
	if(hal_sts != HAL_OK) return E_BUSY;
 8011e56:	7dfb      	ldrb	r3, [r7, #23]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d002      	beq.n	8011e62 <write_data+0x82>
 8011e5c:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8011e60:	e019      	b.n	8011e96 <write_data+0xb6>

	err = tk_wai_flg(id_flgid, wflgptn, TWF_ANDW | TWF_BITCLR, &rflgptn, DEV_HAL_I2C_TMOUT);
 8011e62:	4b0f      	ldr	r3, [pc, #60]	; (8011ea0 <write_data+0xc0>)
 8011e64:	6818      	ldr	r0, [r3, #0]
 8011e66:	f107 0308 	add.w	r3, r7, #8
 8011e6a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8011e6e:	9200      	str	r2, [sp, #0]
 8011e70:	2220      	movs	r2, #32
 8011e72:	68f9      	ldr	r1, [r7, #12]
 8011e74:	f7fc fa80 	bl	800e378 <tk_wai_flg>
 8011e78:	6138      	str	r0, [r7, #16]
	if(err >= E_OK) {
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	db09      	blt.n	8011e94 <write_data+0xb4>
		err  = p_dcb->err;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	691b      	ldr	r3, [r3, #16]
 8011e84:	613b      	str	r3, [r7, #16]
		if(err >= E_OK) req->asize = req->size;
 8011e86:	693b      	ldr	r3, [r7, #16]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	db03      	blt.n	8011e94 <write_data+0xb4>
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	695a      	ldr	r2, [r3, #20]
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	61da      	str	r2, [r3, #28]
	}

	return err;
 8011e94:	693b      	ldr	r3, [r7, #16]
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	3718      	adds	r7, #24
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	bd80      	pop	{r7, pc}
 8011e9e:	bf00      	nop
 8011ea0:	24001104 	.word	0x24001104

08011ea4 <dev_i2c_openfn>:
 */
/*
 * Open device
 */
LOCAL ER dev_i2c_openfn( ID devid, UINT omode, T_MSDI *msdi)
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	b087      	sub	sp, #28
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	60f8      	str	r0, [r7, #12]
 8011eac:	60b9      	str	r1, [r7, #8]
 8011eae:	607a      	str	r2, [r7, #4]
	T_HAL_I2C_DCB	*p_dcb;

	p_dcb = (T_HAL_I2C_DCB*)(msdi->dmsdi.exinf);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	691b      	ldr	r3, [r3, #16]
 8011eb4:	617b      	str	r3, [r7, #20]
	p_dcb->omode = omode;
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	68ba      	ldr	r2, [r7, #8]
 8011eba:	609a      	str	r2, [r3, #8]
	return E_OK;
 8011ebc:	2300      	movs	r3, #0
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	371c      	adds	r7, #28
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec8:	4770      	bx	lr

08011eca <dev_i2c_closefn>:

/*
 * Close Device
 */
LOCAL ER dev_i2c_closefn( ID devid, UINT option, T_MSDI *msdi)
{
 8011eca:	b480      	push	{r7}
 8011ecc:	b085      	sub	sp, #20
 8011ece:	af00      	add	r7, sp, #0
 8011ed0:	60f8      	str	r0, [r7, #12]
 8011ed2:	60b9      	str	r1, [r7, #8]
 8011ed4:	607a      	str	r2, [r7, #4]
	return E_OK;
 8011ed6:	2300      	movs	r3, #0
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3714      	adds	r7, #20
 8011edc:	46bd      	mov	sp, r7
 8011ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee2:	4770      	bx	lr

08011ee4 <dev_i2c_readfn>:

/*
 * Read Device
 */
LOCAL ER dev_i2c_readfn( T_DEVREQ *req, T_MSDI *p_msdi)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
 8011eec:	6039      	str	r1, [r7, #0]
	T_HAL_I2C_DCB	*p_dcb;
	ER		err;

	p_dcb = (T_HAL_I2C_DCB*)(p_msdi->dmsdi.exinf);
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	691b      	ldr	r3, [r3, #16]
 8011ef2:	60bb      	str	r3, [r7, #8]

	if(req->start >= 0) {
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	691b      	ldr	r3, [r3, #16]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	db05      	blt.n	8011f08 <dev_i2c_readfn+0x24>
		err = read_data( p_dcb, req);	// Device specific data
 8011efc:	6879      	ldr	r1, [r7, #4]
 8011efe:	68b8      	ldr	r0, [r7, #8]
 8011f00:	f7ff ff0c 	bl	8011d1c <read_data>
 8011f04:	60f8      	str	r0, [r7, #12]
 8011f06:	e004      	b.n	8011f12 <dev_i2c_readfn+0x2e>
	} else {
		err = read_atr( p_dcb, req);	// Device attribute data
 8011f08:	6879      	ldr	r1, [r7, #4]
 8011f0a:	68b8      	ldr	r0, [r7, #8]
 8011f0c:	f7ff fdfc 	bl	8011b08 <read_atr>
 8011f10:	60f8      	str	r0, [r7, #12]
	}
	return err;
 8011f12:	68fb      	ldr	r3, [r7, #12]
}
 8011f14:	4618      	mov	r0, r3
 8011f16:	3710      	adds	r7, #16
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}

08011f1c <dev_i2c_writefn>:

/*
 * Write Device
 */
LOCAL ER dev_i2c_writefn( T_DEVREQ *req, T_MSDI *p_msdi)
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b084      	sub	sp, #16
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]
 8011f24:	6039      	str	r1, [r7, #0]
	T_HAL_I2C_DCB	*p_dcb;
	ER		rtn;

	p_dcb = (T_HAL_I2C_DCB*)(p_msdi->dmsdi.exinf);
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	691b      	ldr	r3, [r3, #16]
 8011f2a:	60bb      	str	r3, [r7, #8]

	if(req->start >= 0) {
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	691b      	ldr	r3, [r3, #16]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	db05      	blt.n	8011f40 <dev_i2c_writefn+0x24>
		rtn = write_data( p_dcb, req);	// Device specific data
 8011f34:	6879      	ldr	r1, [r7, #4]
 8011f36:	68b8      	ldr	r0, [r7, #8]
 8011f38:	f7ff ff52 	bl	8011de0 <write_data>
 8011f3c:	60f8      	str	r0, [r7, #12]
 8011f3e:	e004      	b.n	8011f4a <dev_i2c_writefn+0x2e>
	} else {
		rtn = write_atr( p_dcb, req);	// Device attribute data
 8011f40:	6879      	ldr	r1, [r7, #4]
 8011f42:	68b8      	ldr	r0, [r7, #8]
 8011f44:	f7ff fe20 	bl	8011b88 <write_atr>
 8011f48:	60f8      	str	r0, [r7, #12]
	}
	return rtn;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3710      	adds	r7, #16
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}

08011f54 <dev_i2c_eventfn>:

/*
 * Event Device
 */
LOCAL ER dev_i2c_eventfn( INT evttyp, void *evtinf, T_MSDI *msdi)
{
 8011f54:	b480      	push	{r7}
 8011f56:	b085      	sub	sp, #20
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	60f8      	str	r0, [r7, #12]
 8011f5c:	60b9      	str	r1, [r7, #8]
 8011f5e:	607a      	str	r2, [r7, #4]
	return E_NOSPT;
 8011f60:	f06f 0308 	mvn.w	r3, #8
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3714      	adds	r7, #20
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6e:	4770      	bx	lr

08011f70 <dev_init_hal_i2c>:

/*----------------------------------------------------------------------
 * Device driver initialization and registration
 */
EXPORT ER dev_init_hal_i2c( UW unit, I2C_HandleTypeDef *hi2c )
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b094      	sub	sp, #80	; 0x50
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
 8011f78:	6039      	str	r1, [r7, #0]
	T_MSDI		*p_msdi;
	T_DMSDI		dmsdi;
	ER		err;
	INT		i;

	if( unit >= DEV_HAL_I2C_UNITNM) return E_PAR;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2b04      	cmp	r3, #4
 8011f7e:	d902      	bls.n	8011f86 <dev_init_hal_i2c+0x16>
 8011f80:	f06f 0310 	mvn.w	r3, #16
 8011f84:	e070      	b.n	8012068 <dev_init_hal_i2c+0xf8>

#if TK_SUPPORT_MEMLIB
	p_dcb = (T_HAL_I2C_DCB*)Kmalloc(sizeof(T_HAL_I2C_DCB));
 8011f86:	2020      	movs	r0, #32
 8011f88:	f7fe fe66 	bl	8010c58 <Kmalloc>
 8011f8c:	64b8      	str	r0, [r7, #72]	; 0x48
	if( p_dcb == NULL) return E_NOMEM;
 8011f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d102      	bne.n	8011f9a <dev_init_hal_i2c+0x2a>
 8011f94:	f06f 0320 	mvn.w	r3, #32
 8011f98:	e066      	b.n	8012068 <dev_init_hal_i2c+0xf8>
	dev_i2c_cb[unit]	= p_dcb;
 8011f9a:	4935      	ldr	r1, [pc, #212]	; (8012070 <dev_init_hal_i2c+0x100>)
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#else
	p_dcb = &dev_i2c_cb[unit];
#endif

	id_flgid = tk_cre_flg(&id_flg);
 8011fa4:	4833      	ldr	r0, [pc, #204]	; (8012074 <dev_init_hal_i2c+0x104>)
 8011fa6:	f7fc f84b 	bl	800e040 <tk_cre_flg>
 8011faa:	4603      	mov	r3, r0
 8011fac:	4a32      	ldr	r2, [pc, #200]	; (8012078 <dev_init_hal_i2c+0x108>)
 8011fae:	6013      	str	r3, [r2, #0]
	if(id_flgid <= E_OK) {
 8011fb0:	4b31      	ldr	r3, [pc, #196]	; (8012078 <dev_init_hal_i2c+0x108>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	dc03      	bgt.n	8011fc0 <dev_init_hal_i2c+0x50>
		err = (ER)id_flgid;
 8011fb8:	4b2f      	ldr	r3, [pc, #188]	; (8012078 <dev_init_hal_i2c+0x108>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	64fb      	str	r3, [r7, #76]	; 0x4c
		goto err_1;
 8011fbe:	e04f      	b.n	8012060 <dev_init_hal_i2c+0xf0>
	}

	/* Device registration information */
	dmsdi.exinf	= p_dcb;
 8011fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fc2:	60bb      	str	r3, [r7, #8]
	dmsdi.drvatr	= 0;			/* Driver attributes */
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	61bb      	str	r3, [r7, #24]
	dmsdi.devatr	= TDK_UNDEF;		/* Device attributes */
 8011fc8:	2300      	movs	r3, #0
 8011fca:	61fb      	str	r3, [r7, #28]
	dmsdi.nsub	= 0;			/* Number of sub units */
 8011fcc:	2300      	movs	r3, #0
 8011fce:	623b      	str	r3, [r7, #32]
	dmsdi.blksz	= 1;			/* Unique data block size (-1 = unknown) */
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	627b      	str	r3, [r7, #36]	; 0x24
	dmsdi.openfn	= dev_i2c_openfn;
 8011fd4:	4b29      	ldr	r3, [pc, #164]	; (801207c <dev_init_hal_i2c+0x10c>)
 8011fd6:	62bb      	str	r3, [r7, #40]	; 0x28
	dmsdi.closefn	= dev_i2c_closefn;
 8011fd8:	4b29      	ldr	r3, [pc, #164]	; (8012080 <dev_init_hal_i2c+0x110>)
 8011fda:	62fb      	str	r3, [r7, #44]	; 0x2c
	dmsdi.readfn	= dev_i2c_readfn;
 8011fdc:	4b29      	ldr	r3, [pc, #164]	; (8012084 <dev_init_hal_i2c+0x114>)
 8011fde:	633b      	str	r3, [r7, #48]	; 0x30
	dmsdi.writefn	= dev_i2c_writefn;
 8011fe0:	4b29      	ldr	r3, [pc, #164]	; (8012088 <dev_init_hal_i2c+0x118>)
 8011fe2:	637b      	str	r3, [r7, #52]	; 0x34
	dmsdi.eventfn	= dev_i2c_eventfn;
 8011fe4:	4b29      	ldr	r3, [pc, #164]	; (801208c <dev_init_hal_i2c+0x11c>)
 8011fe6:	63bb      	str	r3, [r7, #56]	; 0x38
	
	knl_strcpy( (char*)dmsdi.devnm, DEVNAME_HAL_I2C);
 8011fe8:	f107 0308 	add.w	r3, r7, #8
 8011fec:	3304      	adds	r3, #4
 8011fee:	4928      	ldr	r1, [pc, #160]	; (8012090 <dev_init_hal_i2c+0x120>)
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7fe fc02 	bl	80107fa <knl_strcpy>
	i = knl_strlen(DEVNAME_HAL_I2C);
 8011ff6:	4826      	ldr	r0, [pc, #152]	; (8012090 <dev_init_hal_i2c+0x120>)
 8011ff8:	f7fe fbee 	bl	80107d8 <knl_strlen>
 8011ffc:	6478      	str	r0, [r7, #68]	; 0x44
	dmsdi.devnm[i] = (UB)('a' + unit);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	b2db      	uxtb	r3, r3
 8012002:	3361      	adds	r3, #97	; 0x61
 8012004:	b2d9      	uxtb	r1, r3
 8012006:	f107 020c 	add.w	r2, r7, #12
 801200a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801200c:	4413      	add	r3, r2
 801200e:	460a      	mov	r2, r1
 8012010:	701a      	strb	r2, [r3, #0]
	dmsdi.devnm[i+1] = 0;
 8012012:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012014:	3301      	adds	r3, #1
 8012016:	3350      	adds	r3, #80	; 0x50
 8012018:	443b      	add	r3, r7
 801201a:	2200      	movs	r2, #0
 801201c:	f803 2c44 	strb.w	r2, [r3, #-68]

	err = msdi_def_dev( &dmsdi, &idev, &p_msdi);
 8012020:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8012024:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8012028:	f107 0308 	add.w	r3, r7, #8
 801202c:	4618      	mov	r0, r3
 801202e:	f7fa fdd1 	bl	800cbd4 <msdi_def_dev>
 8012032:	64f8      	str	r0, [r7, #76]	; 0x4c
	if(err != E_OK) goto err_1;
 8012034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012036:	2b00      	cmp	r3, #0
 8012038:	d111      	bne.n	801205e <dev_init_hal_i2c+0xee>

	p_dcb->hi2c	= hi2c;
 801203a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801203c:	683a      	ldr	r2, [r7, #0]
 801203e:	601a      	str	r2, [r3, #0]
	p_dcb->devid	= p_msdi->devid;
 8012040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012042:	681a      	ldr	r2, [r3, #0]
 8012044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012046:	605a      	str	r2, [r3, #4]
	p_dcb->unit	= unit;
 8012048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801204a:	687a      	ldr	r2, [r7, #4]
 801204c:	60da      	str	r2, [r3, #12]
	p_dcb->evtmbfid	= idev.evtmbfid;
 801204e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012052:	615a      	str	r2, [r3, #20]
	p_dcb->dmode	= HAL_I2C_MODE_CNT;
 8012054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012056:	2200      	movs	r2, #0
 8012058:	619a      	str	r2, [r3, #24]

	return E_OK;
 801205a:	2300      	movs	r3, #0
 801205c:	e004      	b.n	8012068 <dev_init_hal_i2c+0xf8>
	if(err != E_OK) goto err_1;
 801205e:	bf00      	nop

err_1:
#if TK_SUPPORT_MEMLIB
	Kfree(p_dcb);
 8012060:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012062:	f7fe fe06 	bl	8010c72 <Kfree>
#endif
	return err;
 8012066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8012068:	4618      	mov	r0, r3
 801206a:	3750      	adds	r7, #80	; 0x50
 801206c:	46bd      	mov	sp, r7
 801206e:	bd80      	pop	{r7, pc}
 8012070:	24001108 	.word	0x24001108
 8012074:	24000038 	.word	0x24000038
 8012078:	24001104 	.word	0x24001104
 801207c:	08011ea5 	.word	0x08011ea5
 8012080:	08011ecb 	.word	0x08011ecb
 8012084:	08011ee5 	.word	0x08011ee5
 8012088:	08011f1d 	.word	0x08011f1d
 801208c:	08011f55 	.word	0x08011f55
 8012090:	08012a14 	.word	0x08012a14

08012094 <knl_EnterTaskIndependent>:
{
 8012094:	b480      	push	{r7}
 8012096:	af00      	add	r7, sp, #0
	knl_taskindp++;
 8012098:	4b04      	ldr	r3, [pc, #16]	; (80120ac <knl_EnterTaskIndependent+0x18>)
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	3301      	adds	r3, #1
 801209e:	4a03      	ldr	r2, [pc, #12]	; (80120ac <knl_EnterTaskIndependent+0x18>)
 80120a0:	6013      	str	r3, [r2, #0]
}
 80120a2:	bf00      	nop
 80120a4:	46bd      	mov	sp, r7
 80120a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120aa:	4770      	bx	lr
 80120ac:	240010d8 	.word	0x240010d8

080120b0 <knl_LeaveTaskIndependent>:
{
 80120b0:	b480      	push	{r7}
 80120b2:	af00      	add	r7, sp, #0
	knl_taskindp--;
 80120b4:	4b04      	ldr	r3, [pc, #16]	; (80120c8 <knl_LeaveTaskIndependent+0x18>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	3b01      	subs	r3, #1
 80120ba:	4a03      	ldr	r2, [pc, #12]	; (80120c8 <knl_LeaveTaskIndependent+0x18>)
 80120bc:	6013      	str	r3, [r2, #0]
}
 80120be:	bf00      	nop
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr
 80120c8:	240010d8 	.word	0x240010d8

080120cc <HAL_UART_Callback>:
/*Device-specific data control
 */

/* HAL Callback functions */
LOCAL void HAL_UART_Callback(UART_HandleTypeDef *huart, ER err)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b084      	sub	sp, #16
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	6039      	str	r1, [r7, #0]
	T_HAL_UART_DCB	*p_dcb;
	UINT	i;

	ENTER_TASK_INDEPENDENT
 80120d6:	f7ff ffdd 	bl	8012094 <knl_EnterTaskIndependent>

	for(i = 0; i < DEV_HAL_UART_UNITNM; i++) {
 80120da:	2300      	movs	r3, #0
 80120dc:	60fb      	str	r3, [r7, #12]
 80120de:	e01b      	b.n	8012118 <HAL_UART_Callback+0x4c>
		p_dcb = get_dcb_ptr(i);
 80120e0:	4a12      	ldr	r2, [pc, #72]	; (801212c <HAL_UART_Callback+0x60>)
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80120e8:	60bb      	str	r3, [r7, #8]
		if(p_dcb->huart == huart) {
 80120ea:	68bb      	ldr	r3, [r7, #8]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	687a      	ldr	r2, [r7, #4]
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d10e      	bne.n	8012112 <HAL_UART_Callback+0x46>
			p_dcb->err = err;
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	683a      	ldr	r2, [r7, #0]
 80120f8:	611a      	str	r2, [r3, #16]
			tk_set_flg(id_flgid, 1<< p_dcb->unit);
 80120fa:	4b0d      	ldr	r3, [pc, #52]	; (8012130 <HAL_UART_Callback+0x64>)
 80120fc:	681a      	ldr	r2, [r3, #0]
 80120fe:	68bb      	ldr	r3, [r7, #8]
 8012100:	68db      	ldr	r3, [r3, #12]
 8012102:	2101      	movs	r1, #1
 8012104:	fa01 f303 	lsl.w	r3, r1, r3
 8012108:	4619      	mov	r1, r3
 801210a:	4610      	mov	r0, r2
 801210c:	f7fc f848 	bl	800e1a0 <tk_set_flg>
			break;
 8012110:	e005      	b.n	801211e <HAL_UART_Callback+0x52>
	for(i = 0; i < DEV_HAL_UART_UNITNM; i++) {
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	3301      	adds	r3, #1
 8012116:	60fb      	str	r3, [r7, #12]
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2b04      	cmp	r3, #4
 801211c:	d9e0      	bls.n	80120e0 <HAL_UART_Callback+0x14>
		}
	}

	LEAVE_TASK_INDEPENDENT
 801211e:	f7ff ffc7 	bl	80120b0 <knl_LeaveTaskIndependent>
}
 8012122:	bf00      	nop
 8012124:	3710      	adds	r7, #16
 8012126:	46bd      	mov	sp, r7
 8012128:	bd80      	pop	{r7, pc}
 801212a:	bf00      	nop
 801212c:	24001120 	.word	0x24001120
 8012130:	2400111c 	.word	0x2400111c

08012134 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
	HAL_UART_Callback(huart, E_OK);
 801213c:	2100      	movs	r1, #0
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f7ff ffc4 	bl	80120cc <HAL_UART_Callback>
}
 8012144:	bf00      	nop
 8012146:	3708      	adds	r7, #8
 8012148:	46bd      	mov	sp, r7
 801214a:	bd80      	pop	{r7, pc}

0801214c <HAL_UART_ErrorCallback>:
{
	HAL_UART_Callback(huart, E_OK);
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
	HAL_UART_Callback(huart, E_IO);
 8012154:	f06f 0138 	mvn.w	r1, #56	; 0x38
 8012158:	6878      	ldr	r0, [r7, #4]
 801215a:	f7ff ffb7 	bl	80120cc <HAL_UART_Callback>
}
 801215e:	bf00      	nop
 8012160:	3708      	adds	r7, #8
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
	...

08012168 <read_data>:
{
	HAL_UART_Callback(huart, E_ABORT);
}

LOCAL ER read_data(T_HAL_UART_DCB *p_dcb, T_DEVREQ *req)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b088      	sub	sp, #32
 801216c:	af02      	add	r7, sp, #8
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef	hal_sts;
	UINT			wflgptn, rflgptn;
	ER			err;

	wflgptn = 1 << p_dcb->unit;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	68db      	ldr	r3, [r3, #12]
 8012176:	2201      	movs	r2, #1
 8012178:	fa02 f303 	lsl.w	r3, r2, r3
 801217c:	613b      	str	r3, [r7, #16]
	tk_clr_flg(id_flgid, ~wflgptn);
 801217e:	4b1c      	ldr	r3, [pc, #112]	; (80121f0 <read_data+0x88>)
 8012180:	681a      	ldr	r2, [r3, #0]
 8012182:	693b      	ldr	r3, [r7, #16]
 8012184:	43db      	mvns	r3, r3
 8012186:	4619      	mov	r1, r3
 8012188:	4610      	mov	r0, r2
 801218a:	f7fc f891 	bl	800e2b0 <tk_clr_flg>

	/* your code to read data */
	hal_sts = HAL_UART_Receive_IT(
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6818      	ldr	r0, [r3, #0]
				p_dcb->huart,	// UART_Handle
				req->buf,		// Pointer to data buffer,
 8012192:	683b      	ldr	r3, [r7, #0]
 8012194:	6999      	ldr	r1, [r3, #24]
				req->size		// Amount of data to be sent
 8012196:	683b      	ldr	r3, [r7, #0]
 8012198:	695b      	ldr	r3, [r3, #20]
	hal_sts = HAL_UART_Receive_IT(
 801219a:	b29b      	uxth	r3, r3
 801219c:	461a      	mov	r2, r3
 801219e:	f7f8 fa93 	bl	800a6c8 <HAL_UART_Receive_IT>
 80121a2:	4603      	mov	r3, r0
 80121a4:	73fb      	strb	r3, [r7, #15]
				);
	/*  */

	if(hal_sts != HAL_OK) return E_BUSY;
 80121a6:	7bfb      	ldrb	r3, [r7, #15]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d002      	beq.n	80121b2 <read_data+0x4a>
 80121ac:	f06f 0340 	mvn.w	r3, #64	; 0x40
 80121b0:	e019      	b.n	80121e6 <read_data+0x7e>

	err = tk_wai_flg(id_flgid, wflgptn, TWF_ANDW | TWF_BITCLR, &rflgptn, DEV_HAL_UART_TMOUT);
 80121b2:	4b0f      	ldr	r3, [pc, #60]	; (80121f0 <read_data+0x88>)
 80121b4:	6818      	ldr	r0, [r3, #0]
 80121b6:	f107 0308 	add.w	r3, r7, #8
 80121ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80121be:	9200      	str	r2, [sp, #0]
 80121c0:	2220      	movs	r2, #32
 80121c2:	6939      	ldr	r1, [r7, #16]
 80121c4:	f7fc f8d8 	bl	800e378 <tk_wai_flg>
 80121c8:	6178      	str	r0, [r7, #20]
	if(err >= E_OK) {
 80121ca:	697b      	ldr	r3, [r7, #20]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	db09      	blt.n	80121e4 <read_data+0x7c>
		err  = p_dcb->err;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	691b      	ldr	r3, [r3, #16]
 80121d4:	617b      	str	r3, [r7, #20]
		if(err >= E_OK) req->asize = req->size;
 80121d6:	697b      	ldr	r3, [r7, #20]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	db03      	blt.n	80121e4 <read_data+0x7c>
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	695a      	ldr	r2, [r3, #20]
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	61da      	str	r2, [r3, #28]
	}

	return err;
 80121e4:	697b      	ldr	r3, [r7, #20]
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	3718      	adds	r7, #24
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}
 80121ee:	bf00      	nop
 80121f0:	2400111c 	.word	0x2400111c

080121f4 <write_data>:

LOCAL ER write_data(T_HAL_UART_DCB *p_dcb, T_DEVREQ *req)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b088      	sub	sp, #32
 80121f8:	af02      	add	r7, sp, #8
 80121fa:	6078      	str	r0, [r7, #4]
 80121fc:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef	hal_sts;
	UINT			wflgptn, rflgptn;
	ER			err;

	wflgptn = 1 << p_dcb->unit;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	68db      	ldr	r3, [r3, #12]
 8012202:	2201      	movs	r2, #1
 8012204:	fa02 f303 	lsl.w	r3, r2, r3
 8012208:	613b      	str	r3, [r7, #16]
	tk_clr_flg(id_flgid, ~wflgptn);
 801220a:	4b1c      	ldr	r3, [pc, #112]	; (801227c <write_data+0x88>)
 801220c:	681a      	ldr	r2, [r3, #0]
 801220e:	693b      	ldr	r3, [r7, #16]
 8012210:	43db      	mvns	r3, r3
 8012212:	4619      	mov	r1, r3
 8012214:	4610      	mov	r0, r2
 8012216:	f7fc f84b 	bl	800e2b0 <tk_clr_flg>


	/* your code to write data*/
	hal_sts = HAL_UART_Transmit_IT(
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	6818      	ldr	r0, [r3, #0]
				p_dcb->huart,	// UART_Handle
				req->buf,		// Pointer to data buffer,
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	6999      	ldr	r1, [r3, #24]
				req->size		// Amount of data to be sent
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	695b      	ldr	r3, [r3, #20]
	hal_sts = HAL_UART_Transmit_IT(
 8012226:	b29b      	uxth	r3, r3
 8012228:	461a      	mov	r2, r3
 801222a:	f7f8 f9b9 	bl	800a5a0 <HAL_UART_Transmit_IT>
 801222e:	4603      	mov	r3, r0
 8012230:	73fb      	strb	r3, [r7, #15]
				);
	/*  */

	if(hal_sts != HAL_OK) return E_BUSY;
 8012232:	7bfb      	ldrb	r3, [r7, #15]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d002      	beq.n	801223e <write_data+0x4a>
 8012238:	f06f 0340 	mvn.w	r3, #64	; 0x40
 801223c:	e019      	b.n	8012272 <write_data+0x7e>

	err = tk_wai_flg(id_flgid, wflgptn, TWF_ANDW | TWF_BITCLR, &rflgptn, DEV_HAL_UART_TMOUT);
 801223e:	4b0f      	ldr	r3, [pc, #60]	; (801227c <write_data+0x88>)
 8012240:	6818      	ldr	r0, [r3, #0]
 8012242:	f107 0308 	add.w	r3, r7, #8
 8012246:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 801224a:	9200      	str	r2, [sp, #0]
 801224c:	2220      	movs	r2, #32
 801224e:	6939      	ldr	r1, [r7, #16]
 8012250:	f7fc f892 	bl	800e378 <tk_wai_flg>
 8012254:	6178      	str	r0, [r7, #20]
	if(err >= E_OK) {
 8012256:	697b      	ldr	r3, [r7, #20]
 8012258:	2b00      	cmp	r3, #0
 801225a:	db09      	blt.n	8012270 <write_data+0x7c>
		err  = p_dcb->err;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	691b      	ldr	r3, [r3, #16]
 8012260:	617b      	str	r3, [r7, #20]
		if(err >= E_OK) req->asize = req->size;
 8012262:	697b      	ldr	r3, [r7, #20]
 8012264:	2b00      	cmp	r3, #0
 8012266:	db03      	blt.n	8012270 <write_data+0x7c>
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	695a      	ldr	r2, [r3, #20]
 801226c:	683b      	ldr	r3, [r7, #0]
 801226e:	61da      	str	r2, [r3, #28]
	}

	return err;
 8012270:	697b      	ldr	r3, [r7, #20]
}
 8012272:	4618      	mov	r0, r3
 8012274:	3718      	adds	r7, #24
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}
 801227a:	bf00      	nop
 801227c:	2400111c 	.word	0x2400111c

08012280 <dev_uart_openfn>:
 */
/*
 * Open device
 */
LOCAL ER dev_uart_openfn( ID devid, UINT omode, T_MSDI *msdi)
{
 8012280:	b480      	push	{r7}
 8012282:	b087      	sub	sp, #28
 8012284:	af00      	add	r7, sp, #0
 8012286:	60f8      	str	r0, [r7, #12]
 8012288:	60b9      	str	r1, [r7, #8]
 801228a:	607a      	str	r2, [r7, #4]
	T_HAL_UART_DCB	*p_dcb;

	p_dcb = (T_HAL_UART_DCB*)(msdi->dmsdi.exinf);
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	691b      	ldr	r3, [r3, #16]
 8012290:	617b      	str	r3, [r7, #20]
	p_dcb->omode = omode;
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	68ba      	ldr	r2, [r7, #8]
 8012296:	609a      	str	r2, [r3, #8]
	return E_OK;
 8012298:	2300      	movs	r3, #0
}
 801229a:	4618      	mov	r0, r3
 801229c:	371c      	adds	r7, #28
 801229e:	46bd      	mov	sp, r7
 80122a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a4:	4770      	bx	lr

080122a6 <dev_uart_closefn>:

/*
 * Close Device
 */
LOCAL ER dev_uart_closefn( ID devid, UINT option, T_MSDI *msdi)
{
 80122a6:	b480      	push	{r7}
 80122a8:	b085      	sub	sp, #20
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	60f8      	str	r0, [r7, #12]
 80122ae:	60b9      	str	r1, [r7, #8]
 80122b0:	607a      	str	r2, [r7, #4]

	return E_OK;
 80122b2:	2300      	movs	r3, #0
}
 80122b4:	4618      	mov	r0, r3
 80122b6:	3714      	adds	r7, #20
 80122b8:	46bd      	mov	sp, r7
 80122ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122be:	4770      	bx	lr

080122c0 <dev_uart_readfn>:

/*
 * Read Device
 */
LOCAL ER dev_uart_readfn( T_DEVREQ *req, T_MSDI *p_msdi)
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b084      	sub	sp, #16
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
 80122c8:	6039      	str	r1, [r7, #0]
	T_HAL_UART_DCB	*p_dcb;
	ER		err;

	p_dcb = (T_HAL_UART_DCB*)(p_msdi->dmsdi.exinf);
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	691b      	ldr	r3, [r3, #16]
 80122ce:	60bb      	str	r3, [r7, #8]

	if(req->start >= 0) {
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	691b      	ldr	r3, [r3, #16]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	db04      	blt.n	80122e2 <dev_uart_readfn+0x22>
		err = read_data( p_dcb, req);	// Device specific data
 80122d8:	6879      	ldr	r1, [r7, #4]
 80122da:	68b8      	ldr	r0, [r7, #8]
 80122dc:	f7ff ff44 	bl	8012168 <read_data>
 80122e0:	60f8      	str	r0, [r7, #12]
	}
	return err;
 80122e2:	68fb      	ldr	r3, [r7, #12]
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	3710      	adds	r7, #16
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}

080122ec <dev_uart_writefn>:

/*
 * Write Device
 */
LOCAL ER dev_uart_writefn( T_DEVREQ *req, T_MSDI *p_msdi)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b084      	sub	sp, #16
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
 80122f4:	6039      	str	r1, [r7, #0]
	T_HAL_UART_DCB	*p_dcb;
	ER		rtn;

	p_dcb = (T_HAL_UART_DCB*)(p_msdi->dmsdi.exinf);
 80122f6:	683b      	ldr	r3, [r7, #0]
 80122f8:	691b      	ldr	r3, [r3, #16]
 80122fa:	60bb      	str	r3, [r7, #8]

	if(req->start >= 0) {
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	691b      	ldr	r3, [r3, #16]
 8012300:	2b00      	cmp	r3, #0
 8012302:	db04      	blt.n	801230e <dev_uart_writefn+0x22>
		rtn = write_data( p_dcb, req);	// Device specific data
 8012304:	6879      	ldr	r1, [r7, #4]
 8012306:	68b8      	ldr	r0, [r7, #8]
 8012308:	f7ff ff74 	bl	80121f4 <write_data>
 801230c:	60f8      	str	r0, [r7, #12]
	}
	return rtn;
 801230e:	68fb      	ldr	r3, [r7, #12]
}
 8012310:	4618      	mov	r0, r3
 8012312:	3710      	adds	r7, #16
 8012314:	46bd      	mov	sp, r7
 8012316:	bd80      	pop	{r7, pc}

08012318 <dev_uart_eventfn>:

/*
 * Event Device
 */
LOCAL ER dev_uart_eventfn( INT evttyp, void *evtinf, T_MSDI *msdi)
{
 8012318:	b480      	push	{r7}
 801231a:	b085      	sub	sp, #20
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	607a      	str	r2, [r7, #4]
	return E_NOSPT;
 8012324:	f06f 0308 	mvn.w	r3, #8
}
 8012328:	4618      	mov	r0, r3
 801232a:	3714      	adds	r7, #20
 801232c:	46bd      	mov	sp, r7
 801232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012332:	4770      	bx	lr

08012334 <dev_init_hal_uart>:

/*----------------------------------------------------------------------
 * Device driver initialization and registration
 */
EXPORT ER dev_init_hal_uart( UW unit, UART_HandleTypeDef *huart )
{
 8012334:	b580      	push	{r7, lr}
 8012336:	b094      	sub	sp, #80	; 0x50
 8012338:	af00      	add	r7, sp, #0
 801233a:	6078      	str	r0, [r7, #4]
 801233c:	6039      	str	r1, [r7, #0]
	T_MSDI		*p_msdi;
	T_DMSDI		dmsdi;
	ER		err;
	INT		i;

	if( unit >= DEV_HAL_UART_UNITNM) return E_PAR;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	2b04      	cmp	r3, #4
 8012342:	d902      	bls.n	801234a <dev_init_hal_uart+0x16>
 8012344:	f06f 0310 	mvn.w	r3, #16
 8012348:	e06d      	b.n	8012426 <dev_init_hal_uart+0xf2>

#if TK_SUPPORT_MEMLIB
	p_dcb = (T_HAL_UART_DCB*)Kmalloc(sizeof(T_HAL_UART_DCB));
 801234a:	2018      	movs	r0, #24
 801234c:	f7fe fc84 	bl	8010c58 <Kmalloc>
 8012350:	64b8      	str	r0, [r7, #72]	; 0x48
	if( p_dcb == NULL) return E_NOMEM;
 8012352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012354:	2b00      	cmp	r3, #0
 8012356:	d102      	bne.n	801235e <dev_init_hal_uart+0x2a>
 8012358:	f06f 0320 	mvn.w	r3, #32
 801235c:	e063      	b.n	8012426 <dev_init_hal_uart+0xf2>
	dev_uart_cb[unit]	= p_dcb;
 801235e:	4934      	ldr	r1, [pc, #208]	; (8012430 <dev_init_hal_uart+0xfc>)
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#else
	p_dcb = &dev_uart_cb[unit];
#endif

	id_flgid = tk_cre_flg(&id_flg);
 8012368:	4832      	ldr	r0, [pc, #200]	; (8012434 <dev_init_hal_uart+0x100>)
 801236a:	f7fb fe69 	bl	800e040 <tk_cre_flg>
 801236e:	4603      	mov	r3, r0
 8012370:	4a31      	ldr	r2, [pc, #196]	; (8012438 <dev_init_hal_uart+0x104>)
 8012372:	6013      	str	r3, [r2, #0]
	if(id_flgid <= E_OK) {
 8012374:	4b30      	ldr	r3, [pc, #192]	; (8012438 <dev_init_hal_uart+0x104>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	dc03      	bgt.n	8012384 <dev_init_hal_uart+0x50>
		err = (ER)id_flgid;
 801237c:	4b2e      	ldr	r3, [pc, #184]	; (8012438 <dev_init_hal_uart+0x104>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	64fb      	str	r3, [r7, #76]	; 0x4c
		goto err_1;
 8012382:	e04c      	b.n	801241e <dev_init_hal_uart+0xea>
	}

	/* Device registration information */
	dmsdi.exinf	= p_dcb;
 8012384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012386:	60bb      	str	r3, [r7, #8]
	dmsdi.drvatr	= 0;			/* Driver attributes */
 8012388:	2300      	movs	r3, #0
 801238a:	61bb      	str	r3, [r7, #24]
	dmsdi.devatr	= TDK_UNDEF;		/* Device attributes */
 801238c:	2300      	movs	r3, #0
 801238e:	61fb      	str	r3, [r7, #28]
	dmsdi.nsub	= 0;			/* Number of sub units */
 8012390:	2300      	movs	r3, #0
 8012392:	623b      	str	r3, [r7, #32]
	dmsdi.blksz	= 1;			/* Unique data block size (-1 = unknown) */
 8012394:	2301      	movs	r3, #1
 8012396:	627b      	str	r3, [r7, #36]	; 0x24
	dmsdi.openfn	= dev_uart_openfn;
 8012398:	4b28      	ldr	r3, [pc, #160]	; (801243c <dev_init_hal_uart+0x108>)
 801239a:	62bb      	str	r3, [r7, #40]	; 0x28
	dmsdi.closefn	= dev_uart_closefn;
 801239c:	4b28      	ldr	r3, [pc, #160]	; (8012440 <dev_init_hal_uart+0x10c>)
 801239e:	62fb      	str	r3, [r7, #44]	; 0x2c
	dmsdi.readfn	= dev_uart_readfn;
 80123a0:	4b28      	ldr	r3, [pc, #160]	; (8012444 <dev_init_hal_uart+0x110>)
 80123a2:	633b      	str	r3, [r7, #48]	; 0x30
	dmsdi.writefn	= dev_uart_writefn;
 80123a4:	4b28      	ldr	r3, [pc, #160]	; (8012448 <dev_init_hal_uart+0x114>)
 80123a6:	637b      	str	r3, [r7, #52]	; 0x34
	dmsdi.eventfn	= dev_uart_eventfn;
 80123a8:	4b28      	ldr	r3, [pc, #160]	; (801244c <dev_init_hal_uart+0x118>)
 80123aa:	63bb      	str	r3, [r7, #56]	; 0x38
	
	knl_strcpy( (char*)dmsdi.devnm, DEVNAME_HAL_UART);
 80123ac:	f107 0308 	add.w	r3, r7, #8
 80123b0:	3304      	adds	r3, #4
 80123b2:	4927      	ldr	r1, [pc, #156]	; (8012450 <dev_init_hal_uart+0x11c>)
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7fe fa20 	bl	80107fa <knl_strcpy>
	i = knl_strlen(DEVNAME_HAL_UART);
 80123ba:	4825      	ldr	r0, [pc, #148]	; (8012450 <dev_init_hal_uart+0x11c>)
 80123bc:	f7fe fa0c 	bl	80107d8 <knl_strlen>
 80123c0:	6478      	str	r0, [r7, #68]	; 0x44
	dmsdi.devnm[i] = (UB)('a' + unit);
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	b2db      	uxtb	r3, r3
 80123c6:	3361      	adds	r3, #97	; 0x61
 80123c8:	b2d9      	uxtb	r1, r3
 80123ca:	f107 020c 	add.w	r2, r7, #12
 80123ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123d0:	4413      	add	r3, r2
 80123d2:	460a      	mov	r2, r1
 80123d4:	701a      	strb	r2, [r3, #0]
	dmsdi.devnm[i+1] = 0;
 80123d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123d8:	3301      	adds	r3, #1
 80123da:	3350      	adds	r3, #80	; 0x50
 80123dc:	443b      	add	r3, r7
 80123de:	2200      	movs	r2, #0
 80123e0:	f803 2c44 	strb.w	r2, [r3, #-68]

	err = msdi_def_dev( &dmsdi, &idev, &p_msdi);
 80123e4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80123e8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80123ec:	f107 0308 	add.w	r3, r7, #8
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7fa fbef 	bl	800cbd4 <msdi_def_dev>
 80123f6:	64f8      	str	r0, [r7, #76]	; 0x4c
	if(err != E_OK) goto err_1;
 80123f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d10e      	bne.n	801241c <dev_init_hal_uart+0xe8>

	p_dcb->huart	= huart;
 80123fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012400:	683a      	ldr	r2, [r7, #0]
 8012402:	601a      	str	r2, [r3, #0]
	p_dcb->devid	= p_msdi->devid;
 8012404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012406:	681a      	ldr	r2, [r3, #0]
 8012408:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801240a:	605a      	str	r2, [r3, #4]
	p_dcb->unit	= unit;
 801240c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801240e:	687a      	ldr	r2, [r7, #4]
 8012410:	60da      	str	r2, [r3, #12]
	p_dcb->evtmbfid	= idev.evtmbfid;
 8012412:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012414:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012416:	615a      	str	r2, [r3, #20]

	return E_OK;
 8012418:	2300      	movs	r3, #0
 801241a:	e004      	b.n	8012426 <dev_init_hal_uart+0xf2>
	if(err != E_OK) goto err_1;
 801241c:	bf00      	nop

err_1:
#if TK_SUPPORT_MEMLIB
	Kfree(p_dcb);
 801241e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8012420:	f7fe fc27 	bl	8010c72 <Kfree>
#endif
	return err;
 8012424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8012426:	4618      	mov	r0, r3
 8012428:	3750      	adds	r7, #80	; 0x50
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}
 801242e:	bf00      	nop
 8012430:	24001120 	.word	0x24001120
 8012434:	24000044 	.word	0x24000044
 8012438:	2400111c 	.word	0x2400111c
 801243c:	08012281 	.word	0x08012281
 8012440:	080122a7 	.word	0x080122a7
 8012444:	080122c1 	.word	0x080122c1
 8012448:	080122ed 	.word	0x080122ed
 801244c:	08012319 	.word	0x08012319
 8012450:	08012a1c 	.word	0x08012a1c

08012454 <knl_init_device>:
/*
 * Initialization before micro T-Kernel starts
 */

EXPORT ER knl_init_device( void )
{
 8012454:	b480      	push	{r7}
 8012456:	af00      	add	r7, sp, #0
	return E_OK;
 8012458:	2300      	movs	r3, #0
}
 801245a:	4618      	mov	r0, r3
 801245c:	46bd      	mov	sp, r7
 801245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012462:	4770      	bx	lr

08012464 <knl_start_device>:
/*
 * Start processing after T-Kernel starts
 *	Called from the initial task contexts.
 */
EXPORT ER knl_start_device( void )
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0
	ER	err	= E_OK;
 801246a:	2300      	movs	r3, #0
 801246c:	607b      	str	r3, [r7, #4]

#if DEVCNF_USE_HAL_IIC
	IMPORT I2C_HandleTypeDef	hi2c1;

	err = dev_init_hal_i2c(DEV_HAL_I2C1, &hi2c1);
 801246e:	491b      	ldr	r1, [pc, #108]	; (80124dc <knl_start_device+0x78>)
 8012470:	2000      	movs	r0, #0
 8012472:	f7ff fd7d 	bl	8011f70 <dev_init_hal_i2c>
 8012476:	6078      	str	r0, [r7, #4]
	if(err < E_OK) return err;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	2b00      	cmp	r3, #0
 801247c:	da01      	bge.n	8012482 <knl_start_device+0x1e>
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	e028      	b.n	80124d4 <knl_start_device+0x70>
#endif

#if DEVCNF_USE_HAL_ADC
	IMPORT ADC_HandleTypeDef	hadc1;
	err = dev_init_hal_adc(DEV_HAL_ADC1, &hadc1);
 8012482:	4917      	ldr	r1, [pc, #92]	; (80124e0 <knl_start_device+0x7c>)
 8012484:	2000      	movs	r0, #0
 8012486:	f7ff fa3d 	bl	8011904 <dev_init_hal_adc>
 801248a:	6078      	str	r0, [r7, #4]
	if(err < E_OK) return err;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2b00      	cmp	r3, #0
 8012490:	da01      	bge.n	8012496 <knl_start_device+0x32>
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	e01e      	b.n	80124d4 <knl_start_device+0x70>

#if defined(MTKBSP_NUCLEO_STM32H723) || defined(MTKBSP_NUCLEO_STM32F767)
	IMPORT ADC_HandleTypeDef	hadc3;
	
	err = dev_init_hal_adc(DEV_HAL_ADC2, NULL);	// hadc2 is not used
 8012496:	2100      	movs	r1, #0
 8012498:	2001      	movs	r0, #1
 801249a:	f7ff fa33 	bl	8011904 <dev_init_hal_adc>
 801249e:	6078      	str	r0, [r7, #4]
	if(err < E_OK) return err;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	da01      	bge.n	80124aa <knl_start_device+0x46>
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	e014      	b.n	80124d4 <knl_start_device+0x70>
	err = dev_init_hal_adc(DEV_HAL_ADC3, &hadc3);
 80124aa:	490e      	ldr	r1, [pc, #56]	; (80124e4 <knl_start_device+0x80>)
 80124ac:	2002      	movs	r0, #2
 80124ae:	f7ff fa29 	bl	8011904 <dev_init_hal_adc>
 80124b2:	6078      	str	r0, [r7, #4]
	if(err < E_OK) return err;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	da01      	bge.n	80124be <knl_start_device+0x5a>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	e00a      	b.n	80124d4 <knl_start_device+0x70>
//	IMPORT UART_HandleTypeDef huart1;
//	err = dev_init_hal_uart(DEV_HAL_UART1, &huart1);
//	if(err < E_OK) return err;
#if defined(MTKBSP_NUCLEO_STM32H723)
	IMPORT UART_HandleTypeDef huart4;
	err = dev_init_hal_uart(DEV_HAL_UART4, &huart4);
 80124be:	490a      	ldr	r1, [pc, #40]	; (80124e8 <knl_start_device+0x84>)
 80124c0:	2003      	movs	r0, #3
 80124c2:	f7ff ff37 	bl	8012334 <dev_init_hal_uart>
 80124c6:	6078      	str	r0, [r7, #4]
	if(err < E_OK) return err;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	da01      	bge.n	80124d2 <knl_start_device+0x6e>
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	e000      	b.n	80124d4 <knl_start_device+0x70>
#endif
#endif
/* DEVCNF_USE_HAL_UART */

	return err;
 80124d2:	687b      	ldr	r3, [r7, #4]
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3708      	adds	r7, #8
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}
 80124dc:	24000e48 	.word	0x24000e48
 80124e0:	24000cb8 	.word	0x24000cb8
 80124e4:	24000d28 	.word	0x24000d28
 80124e8:	24000e9c 	.word	0x24000e9c

080124ec <knl_finish_device>:
 * System finalization
 *	Called just before system shutdown.
 *	Execute finalization that must be done before system shutdown.
 */
EXPORT ER knl_finish_device( void )
{
 80124ec:	b480      	push	{r7}
 80124ee:	af00      	add	r7, sp, #0
	return E_OK;
 80124f0:	2300      	movs	r3, #0
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	46bd      	mov	sp, r7
 80124f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fa:	4770      	bx	lr

080124fc <knl_startup_hw>:

/*
 * Startup Device
 */
EXPORT void knl_startup_hw(void)
{
 80124fc:	b480      	push	{r7}
 80124fe:	af00      	add	r7, sp, #0
#if USE_PTMR
	void knl_init_ptmr(void);
	knl_init_ptmr();
#endif
}
 8012500:	bf00      	nop
 8012502:	46bd      	mov	sp, r7
 8012504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012508:	4770      	bx	lr

0801250a <knl_shutdown_hw>:
#if USE_SHUTDOWN
/*
 * Shutdown device
 */
EXPORT void knl_shutdown_hw( void )
{
 801250a:	b580      	push	{r7, lr}
 801250c:	af00      	add	r7, sp, #0
	disint();
 801250e:	f000 f856 	bl	80125be <disint>
	while(1);
 8012512:	e7fe      	b.n	8012512 <knl_shutdown_hw+0x8>

08012514 <knl_restart_hw>:
 *	mode = -1		reset and re-start	(Reset -> Boot -> Start)
 *	mode = -2		fast re-start		(Start)
 *	mode = -3		Normal re-start		(Boot -> Start)
 */
EXPORT ER knl_restart_hw( W mode )
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
	switch(mode) {
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012522:	d00b      	beq.n	801253c <knl_restart_hw+0x28>
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	2b00      	cmp	r3, #0
 8012528:	da1a      	bge.n	8012560 <knl_restart_hw+0x4c>
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f113 0f03 	cmn.w	r3, #3
 8012530:	d010      	beq.n	8012554 <knl_restart_hw+0x40>
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	f113 0f02 	cmn.w	r3, #2
 8012538:	d006      	beq.n	8012548 <knl_restart_hw+0x34>
 801253a:	e011      	b.n	8012560 <knl_restart_hw+0x4c>
	case -1: /* Reset and re-start */
		SYSTEM_MESSAGE("\n<< SYSTEM RESET & RESTART >>\n");
 801253c:	480b      	ldr	r0, [pc, #44]	; (801256c <knl_restart_hw+0x58>)
 801253e:	f7fe fbcd 	bl	8010cdc <tm_putstring>
		return E_NOSPT;
 8012542:	f06f 0308 	mvn.w	r3, #8
 8012546:	e00d      	b.n	8012564 <knl_restart_hw+0x50>
	case -2: /* fast re-start */
		SYSTEM_MESSAGE("\n<< SYSTEM FAST RESTART >>\n");
 8012548:	4809      	ldr	r0, [pc, #36]	; (8012570 <knl_restart_hw+0x5c>)
 801254a:	f7fe fbc7 	bl	8010cdc <tm_putstring>
		return E_NOSPT;
 801254e:	f06f 0308 	mvn.w	r3, #8
 8012552:	e007      	b.n	8012564 <knl_restart_hw+0x50>
	case -3: /* Normal re-start */
		SYSTEM_MESSAGE("\n<< SYSTEM RESTART >>\n");
 8012554:	4807      	ldr	r0, [pc, #28]	; (8012574 <knl_restart_hw+0x60>)
 8012556:	f7fe fbc1 	bl	8010cdc <tm_putstring>
		return E_NOSPT;
 801255a:	f06f 0308 	mvn.w	r3, #8
 801255e:	e001      	b.n	8012564 <knl_restart_hw+0x50>
	default:
		return E_PAR;
 8012560:	f06f 0310 	mvn.w	r3, #16
	}
}
 8012564:	4618      	mov	r0, r3
 8012566:	3708      	adds	r7, #8
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}
 801256c:	08012a24 	.word	0x08012a24
 8012570:	08012a44 	.word	0x08012a44
 8012574:	08012a60 	.word	0x08012a60

08012578 <low_pow>:

/*
 * Switch to power-saving mode
 */
EXPORT void low_pow( void )
{
 8012578:	b480      	push	{r7}
 801257a:	af00      	add	r7, sp, #0
}
 801257c:	bf00      	nop
 801257e:	46bd      	mov	sp, r7
 8012580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012584:	4770      	bx	lr

08012586 <set_basepri>:

/*
 * Set Base Priority register
 */
EXPORT void set_basepri(UW intsts)
{	
 8012586:	b480      	push	{r7}
 8012588:	b083      	sub	sp, #12
 801258a:	af00      	add	r7, sp, #0
 801258c:	6078      	str	r0, [r7, #4]
	Asm("msr basepri, %0":: "r"(intsts));
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	f383 8811 	msr	BASEPRI, r3
	Asm("isb");
 8012594:	f3bf 8f6f 	isb	sy
}
 8012598:	bf00      	nop
 801259a:	370c      	adds	r7, #12
 801259c:	46bd      	mov	sp, r7
 801259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a2:	4770      	bx	lr

080125a4 <get_basepri>:

/*
 * Get Base Priority register
 */
EXPORT UW get_basepri(void)
{
 80125a4:	b480      	push	{r7}
 80125a6:	b083      	sub	sp, #12
 80125a8:	af00      	add	r7, sp, #0
	UW	basepri;

	Asm("mrs %0, basepri": "=r"(basepri));
 80125aa:	f3ef 8311 	mrs	r3, BASEPRI
 80125ae:	607b      	str	r3, [r7, #4]
	return basepri;
 80125b0:	687b      	ldr	r3, [r7, #4]
}
 80125b2:	4618      	mov	r0, r3
 80125b4:	370c      	adds	r7, #12
 80125b6:	46bd      	mov	sp, r7
 80125b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125bc:	4770      	bx	lr

080125be <disint>:

/* 
 * Disable interrupt 
 */
EXPORT UW disint(void)
{
 80125be:	b480      	push	{r7}
 80125c0:	b083      	sub	sp, #12
 80125c2:	af00      	add	r7, sp, #0
	UW	intsts, maxint;

	maxint = INTPRI_VAL(INTPRI_MAX_EXTINT_PRI);
 80125c4:	2310      	movs	r3, #16
 80125c6:	607b      	str	r3, [r7, #4]
	Asm("mrs %0, basepri": "=r"(intsts));
 80125c8:	f3ef 8311 	mrs	r3, BASEPRI
 80125cc:	603b      	str	r3, [r7, #0]
	Asm("msr basepri, %0":: "r"(maxint));
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	f383 8811 	msr	BASEPRI, r3

	return intsts;
 80125d4:	683b      	ldr	r3, [r7, #0]
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	370c      	adds	r7, #12
 80125da:	46bd      	mov	sp, r7
 80125dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e0:	4770      	bx	lr

080125e2 <halif_get_pclk1>:
{
	return HAL_RCC_GetHCLKFreq();
}

Inline uint32_t halif_get_pclk1(void)
{
 80125e2:	b580      	push	{r7, lr}
 80125e4:	af00      	add	r7, sp, #0
	return HAL_RCC_GetPCLK1Freq();
 80125e6:	f7f5 fb79 	bl	8007cdc <HAL_RCC_GetPCLK1Freq>
 80125ea:	4603      	mov	r3, r0
}
 80125ec:	4618      	mov	r0, r3
 80125ee:	bd80      	pop	{r7, pc}

080125f0 <tm_snd_dat>:

/* Communication speed */
#define UART_BAUD	(115200)			/* 115200 bps */

EXPORT	void	tm_snd_dat( const UB* buf, INT size )
{
 80125f0:	b480      	push	{r7}
 80125f2:	b085      	sub	sp, #20
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
 80125f8:	6039      	str	r1, [r7, #0]
	UB	*b;

	for( b = (UB *)buf; size > 0; size--, b++ ){
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	60fb      	str	r3, [r7, #12]
 80125fe:	e017      	b.n	8012630 <tm_snd_dat+0x40>
		while ((UART_ISR & ISR_TXE) == 0 );
 8012600:	bf00      	nop
 8012602:	4b10      	ldr	r3, [pc, #64]	; (8012644 <tm_snd_dat+0x54>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801260a:	2b00      	cmp	r3, #0
 801260c:	d0f9      	beq.n	8012602 <tm_snd_dat+0x12>
		UART_TDR = *b;
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	781a      	ldrb	r2, [r3, #0]
 8012612:	4b0d      	ldr	r3, [pc, #52]	; (8012648 <tm_snd_dat+0x58>)
 8012614:	601a      	str	r2, [r3, #0]
		while ((UART_ISR & ISR_TC) == 0 );
 8012616:	bf00      	nop
 8012618:	4b0a      	ldr	r3, [pc, #40]	; (8012644 <tm_snd_dat+0x54>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012620:	2b00      	cmp	r3, #0
 8012622:	d0f9      	beq.n	8012618 <tm_snd_dat+0x28>
	for( b = (UB *)buf; size > 0; size--, b++ ){
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	3b01      	subs	r3, #1
 8012628:	603b      	str	r3, [r7, #0]
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	3301      	adds	r3, #1
 801262e:	60fb      	str	r3, [r7, #12]
 8012630:	683b      	ldr	r3, [r7, #0]
 8012632:	2b00      	cmp	r3, #0
 8012634:	dce4      	bgt.n	8012600 <tm_snd_dat+0x10>
	}
}
 8012636:	bf00      	nop
 8012638:	bf00      	nop
 801263a:	3714      	adds	r7, #20
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr
 8012644:	4000481c 	.word	0x4000481c
 8012648:	40004828 	.word	0x40004828

0801264c <tm_com_init>:
}

UW get_pclk1(void);

EXPORT	void	tm_com_init(void)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b082      	sub	sp, #8
 8012650:	af00      	add	r7, sp, #0
	UW	pclk1;

	/* Initialize serial communication. Disable all interrupt. */
	UART_CR1 = 0;		/* 8bit, Non parity (Reset value) */
 8012652:	4b0e      	ldr	r3, [pc, #56]	; (801268c <tm_com_init+0x40>)
 8012654:	2200      	movs	r2, #0
 8012656:	601a      	str	r2, [r3, #0]
	UART_CR2 = 0;		/* Stop bit 1 (Reset value) */
 8012658:	4b0d      	ldr	r3, [pc, #52]	; (8012690 <tm_com_init+0x44>)
 801265a:	2200      	movs	r2, #0
 801265c:	601a      	str	r2, [r3, #0]
	UART_CR3 = 0;		/* No hard flow control (Reset value) */
 801265e:	4b0d      	ldr	r3, [pc, #52]	; (8012694 <tm_com_init+0x48>)
 8012660:	2200      	movs	r2, #0
 8012662:	601a      	str	r2, [r3, #0]

	/* Set baud rate */
	pclk1 = halif_get_pclk1();
 8012664:	f7ff ffbd 	bl	80125e2 <halif_get_pclk1>
 8012668:	6078      	str	r0, [r7, #4]
	UART_BRR = (pclk1 + UART_BAUD/2)/UART_BAUD;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8012670:	4a09      	ldr	r2, [pc, #36]	; (8012698 <tm_com_init+0x4c>)
 8012672:	490a      	ldr	r1, [pc, #40]	; (801269c <tm_com_init+0x50>)
 8012674:	fba1 1303 	umull	r1, r3, r1, r3
 8012678:	0c1b      	lsrs	r3, r3, #16
 801267a:	6013      	str	r3, [r2, #0]

	UART_CR1 = CR1_UE | CR1_RE |CR1_TE;	/* Start UART */
 801267c:	4b03      	ldr	r3, [pc, #12]	; (801268c <tm_com_init+0x40>)
 801267e:	220d      	movs	r2, #13
 8012680:	601a      	str	r2, [r3, #0]
}
 8012682:	bf00      	nop
 8012684:	3708      	adds	r7, #8
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
 801268a:	bf00      	nop
 801268c:	40004800 	.word	0x40004800
 8012690:	40004804 	.word	0x40004804
 8012694:	40004808 	.word	0x40004808
 8012698:	4000480c 	.word	0x4000480c
 801269c:	91a2b3c5 	.word	0x91a2b3c5

080126a0 <memset>:
 80126a0:	4402      	add	r2, r0
 80126a2:	4603      	mov	r3, r0
 80126a4:	4293      	cmp	r3, r2
 80126a6:	d100      	bne.n	80126aa <memset+0xa>
 80126a8:	4770      	bx	lr
 80126aa:	f803 1b01 	strb.w	r1, [r3], #1
 80126ae:	e7f9      	b.n	80126a4 <memset+0x4>

080126b0 <__libc_init_array>:
 80126b0:	b570      	push	{r4, r5, r6, lr}
 80126b2:	4d0d      	ldr	r5, [pc, #52]	; (80126e8 <__libc_init_array+0x38>)
 80126b4:	4c0d      	ldr	r4, [pc, #52]	; (80126ec <__libc_init_array+0x3c>)
 80126b6:	1b64      	subs	r4, r4, r5
 80126b8:	10a4      	asrs	r4, r4, #2
 80126ba:	2600      	movs	r6, #0
 80126bc:	42a6      	cmp	r6, r4
 80126be:	d109      	bne.n	80126d4 <__libc_init_array+0x24>
 80126c0:	4d0b      	ldr	r5, [pc, #44]	; (80126f0 <__libc_init_array+0x40>)
 80126c2:	4c0c      	ldr	r4, [pc, #48]	; (80126f4 <__libc_init_array+0x44>)
 80126c4:	f000 f818 	bl	80126f8 <_init>
 80126c8:	1b64      	subs	r4, r4, r5
 80126ca:	10a4      	asrs	r4, r4, #2
 80126cc:	2600      	movs	r6, #0
 80126ce:	42a6      	cmp	r6, r4
 80126d0:	d105      	bne.n	80126de <__libc_init_array+0x2e>
 80126d2:	bd70      	pop	{r4, r5, r6, pc}
 80126d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80126d8:	4798      	blx	r3
 80126da:	3601      	adds	r6, #1
 80126dc:	e7ee      	b.n	80126bc <__libc_init_array+0xc>
 80126de:	f855 3b04 	ldr.w	r3, [r5], #4
 80126e2:	4798      	blx	r3
 80126e4:	3601      	adds	r6, #1
 80126e6:	e7f2      	b.n	80126ce <__libc_init_array+0x1e>
 80126e8:	08012b9c 	.word	0x08012b9c
 80126ec:	08012b9c 	.word	0x08012b9c
 80126f0:	08012b9c 	.word	0x08012b9c
 80126f4:	08012ba0 	.word	0x08012ba0

080126f8 <_init>:
 80126f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126fa:	bf00      	nop
 80126fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80126fe:	bc08      	pop	{r3}
 8012700:	469e      	mov	lr, r3
 8012702:	4770      	bx	lr

08012704 <_fini>:
 8012704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012706:	bf00      	nop
 8012708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801270a:	bc08      	pop	{r3}
 801270c:	469e      	mov	lr, r3
 801270e:	4770      	bx	lr
